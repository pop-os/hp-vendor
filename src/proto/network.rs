// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `hp/xy/sunrise_v1/hw/network.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct NetworkCard {
    // message fields
    pub state: super::state::HWState,
    pub description: ::std::string::String,
    pub product_name: ::std::string::String,
    pub manufacturer: ::std::string::String,
    pub interface_type: ::std::string::String,
    pub bus_info: ::std::string::String,
    pub serial_value: ::std::string::String,
    pub clock_speed: u32,
    pub width: u32,
    pub capabilities: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NetworkCard {
    fn default() -> &'a NetworkCard {
        <NetworkCard as ::protobuf::Message>::default_instance()
    }
}

impl NetworkCard {
    pub fn new() -> NetworkCard {
        ::std::default::Default::default()
    }

    // .hp.xy.sunrise_v1.HWState state = 1;


    pub fn get_state(&self) -> super::state::HWState {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = super::state::HWState::HW_STATE_SAME;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: super::state::HWState) {
        self.state = v;
    }

    // string description = 2;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // string product_name = 3;


    pub fn get_product_name(&self) -> &str {
        &self.product_name
    }
    pub fn clear_product_name(&mut self) {
        self.product_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_product_name(&mut self, v: ::std::string::String) {
        self.product_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_product_name(&mut self) -> &mut ::std::string::String {
        &mut self.product_name
    }

    // Take field
    pub fn take_product_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.product_name, ::std::string::String::new())
    }

    // string manufacturer = 4;


    pub fn get_manufacturer(&self) -> &str {
        &self.manufacturer
    }
    pub fn clear_manufacturer(&mut self) {
        self.manufacturer.clear();
    }

    // Param is passed by value, moved
    pub fn set_manufacturer(&mut self, v: ::std::string::String) {
        self.manufacturer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_manufacturer(&mut self) -> &mut ::std::string::String {
        &mut self.manufacturer
    }

    // Take field
    pub fn take_manufacturer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.manufacturer, ::std::string::String::new())
    }

    // string interface_type = 5;


    pub fn get_interface_type(&self) -> &str {
        &self.interface_type
    }
    pub fn clear_interface_type(&mut self) {
        self.interface_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_interface_type(&mut self, v: ::std::string::String) {
        self.interface_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_interface_type(&mut self) -> &mut ::std::string::String {
        &mut self.interface_type
    }

    // Take field
    pub fn take_interface_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.interface_type, ::std::string::String::new())
    }

    // string bus_info = 6;


    pub fn get_bus_info(&self) -> &str {
        &self.bus_info
    }
    pub fn clear_bus_info(&mut self) {
        self.bus_info.clear();
    }

    // Param is passed by value, moved
    pub fn set_bus_info(&mut self, v: ::std::string::String) {
        self.bus_info = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bus_info(&mut self) -> &mut ::std::string::String {
        &mut self.bus_info
    }

    // Take field
    pub fn take_bus_info(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bus_info, ::std::string::String::new())
    }

    // string serial_value = 7;


    pub fn get_serial_value(&self) -> &str {
        &self.serial_value
    }
    pub fn clear_serial_value(&mut self) {
        self.serial_value.clear();
    }

    // Param is passed by value, moved
    pub fn set_serial_value(&mut self, v: ::std::string::String) {
        self.serial_value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_value(&mut self) -> &mut ::std::string::String {
        &mut self.serial_value
    }

    // Take field
    pub fn take_serial_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.serial_value, ::std::string::String::new())
    }

    // uint32 clock_speed = 8;


    pub fn get_clock_speed(&self) -> u32 {
        self.clock_speed
    }
    pub fn clear_clock_speed(&mut self) {
        self.clock_speed = 0;
    }

    // Param is passed by value, moved
    pub fn set_clock_speed(&mut self, v: u32) {
        self.clock_speed = v;
    }

    // uint32 width = 9;


    pub fn get_width(&self) -> u32 {
        self.width
    }
    pub fn clear_width(&mut self) {
        self.width = 0;
    }

    // Param is passed by value, moved
    pub fn set_width(&mut self, v: u32) {
        self.width = v;
    }

    // repeated string capabilities = 10;


    pub fn get_capabilities(&self) -> &[::std::string::String] {
        &self.capabilities
    }
    pub fn clear_capabilities(&mut self) {
        self.capabilities.clear();
    }

    // Param is passed by value, moved
    pub fn set_capabilities(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.capabilities = v;
    }

    // Mutable pointer to the field.
    pub fn mut_capabilities(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.capabilities
    }

    // Take field
    pub fn take_capabilities(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.capabilities, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for NetworkCard {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.product_name)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.manufacturer)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.interface_type)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bus_info)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.serial_value)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.clock_speed = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.width = tmp;
                },
                10 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.capabilities)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.state != super::state::HWState::HW_STATE_SAME {
            my_size += ::protobuf::rt::enum_size(1, self.state);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        if !self.product_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.product_name);
        }
        if !self.manufacturer.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.manufacturer);
        }
        if !self.interface_type.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.interface_type);
        }
        if !self.bus_info.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.bus_info);
        }
        if !self.serial_value.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.serial_value);
        }
        if self.clock_speed != 0 {
            my_size += ::protobuf::rt::value_size(8, self.clock_speed, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.width != 0 {
            my_size += ::protobuf::rt::value_size(9, self.width, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.capabilities {
            my_size += ::protobuf::rt::string_size(10, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.state != super::state::HWState::HW_STATE_SAME {
            os.write_enum(1, self.state.value())?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        if !self.product_name.is_empty() {
            os.write_string(3, &self.product_name)?;
        }
        if !self.manufacturer.is_empty() {
            os.write_string(4, &self.manufacturer)?;
        }
        if !self.interface_type.is_empty() {
            os.write_string(5, &self.interface_type)?;
        }
        if !self.bus_info.is_empty() {
            os.write_string(6, &self.bus_info)?;
        }
        if !self.serial_value.is_empty() {
            os.write_string(7, &self.serial_value)?;
        }
        if self.clock_speed != 0 {
            os.write_uint32(8, self.clock_speed)?;
        }
        if self.width != 0 {
            os.write_uint32(9, self.width)?;
        }
        for v in &self.capabilities {
            os.write_string(10, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NetworkCard {
        NetworkCard::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::state::HWState>>(
                    "state",
                    |m: &NetworkCard| { &m.state },
                    |m: &mut NetworkCard| { &mut m.state },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "description",
                    |m: &NetworkCard| { &m.description },
                    |m: &mut NetworkCard| { &mut m.description },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "product_name",
                    |m: &NetworkCard| { &m.product_name },
                    |m: &mut NetworkCard| { &mut m.product_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "manufacturer",
                    |m: &NetworkCard| { &m.manufacturer },
                    |m: &mut NetworkCard| { &mut m.manufacturer },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "interface_type",
                    |m: &NetworkCard| { &m.interface_type },
                    |m: &mut NetworkCard| { &mut m.interface_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "bus_info",
                    |m: &NetworkCard| { &m.bus_info },
                    |m: &mut NetworkCard| { &mut m.bus_info },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "serial_value",
                    |m: &NetworkCard| { &m.serial_value },
                    |m: &mut NetworkCard| { &mut m.serial_value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "clock_speed",
                    |m: &NetworkCard| { &m.clock_speed },
                    |m: &mut NetworkCard| { &mut m.clock_speed },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "width",
                    |m: &NetworkCard| { &m.width },
                    |m: &mut NetworkCard| { &mut m.width },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "capabilities",
                    |m: &NetworkCard| { &m.capabilities },
                    |m: &mut NetworkCard| { &mut m.capabilities },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<NetworkCard>(
                    "NetworkCard",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static NetworkCard {
        static mut instance: ::protobuf::lazy::Lazy<NetworkCard> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NetworkCard,
        };
        unsafe {
            instance.get(NetworkCard::new)
        }
    }
}

impl ::protobuf::Clear for NetworkCard {
    fn clear(&mut self) {
        self.state = super::state::HWState::HW_STATE_SAME;
        self.description.clear();
        self.product_name.clear();
        self.manufacturer.clear();
        self.interface_type.clear();
        self.bus_info.clear();
        self.serial_value.clear();
        self.clock_speed = 0;
        self.width = 0;
        self.capabilities.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NetworkCard {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NetworkCard {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!hp/xy/sunrise_v1/hw/network.proto\x12\x13hp.xy.sunrise_v1.hw\x1a\x1ch\
    p/xy/sunrise_v1/state.proto\"\xe7\x02\n\x0bNetworkCard\x12/\n\x05state\
    \x18\x01\x20\x01(\x0e2\x19.hp.xy.sunrise_v1.HWStateR\x05state\x12\x20\n\
    \x0bdescription\x18\x02\x20\x01(\tR\x0bdescription\x12!\n\x0cproduct_nam\
    e\x18\x03\x20\x01(\tR\x0bproductName\x12\"\n\x0cmanufacturer\x18\x04\x20\
    \x01(\tR\x0cmanufacturer\x12%\n\x0einterface_type\x18\x05\x20\x01(\tR\ri\
    nterfaceType\x12\x19\n\x08bus_info\x18\x06\x20\x01(\tR\x07busInfo\x12!\n\
    \x0cserial_value\x18\x07\x20\x01(\tR\x0bserialValue\x12\x1f\n\x0bclock_s\
    peed\x18\x08\x20\x01(\rR\nclockSpeed\x12\x14\n\x05width\x18\t\x20\x01(\r\
    R\x05width\x12\"\n\x0ccapabilities\x18\n\x20\x03(\tR\x0ccapabilitiesJ\
    \xf8\x10\n\x06\x12\x04\0\0s\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\
    \x01\x02\x12\x03\x02\0\x1c\n\t\n\x02\x03\0\x12\x03\x04\0&\n\n\n\x02\x04\
    \0\x12\x04\x06\0s\x01\n\n\n\x03\x04\0\x01\x12\x03\x06\x08\x13\n\xa0\x02\
    \n\x04\x04\0\x02\0\x12\x03\x0e\x04\x16\x1a\x92\x02*\r\n\x20HW\x20State\r\
    \n\x20\r\n\x20HW_STATE_ADDED\x20-\x20The\x20HW\x20component\x20was\x20ad\
    ded\x20or\x20first\x20detected\x20(all\x20data\x20fields\x20are\x20popul\
    ated)\r\n\x20HW_STATE_REMOVED\x20-\x20The\x20HW\x20component\x20was\x20r\
    emoved\x20or\x20not\x20detected\x20anymore\x20(If\x20there\x20are\x20Pri\
    mary\x20Keys\x20defined\x20send\x20them\x20only,\x20otherwise\x20populat\
    e\x20all\x20data\x20fields)\r\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x0e\
    \x04\x0b\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0e\x0c\x11\n\x0c\n\x05\x04\
    \0\x02\0\x03\x12\x03\x0e\x14\x15\n\x94\x01\n\x04\x04\0\x02\x01\x12\x03\
    \x19\x04\x1b\x1a\x86\x01*\r\n\x20Card\x20Description\r\n\x20\r\n\x20Exam\
    ple:\x20Wireless\x20interface\r\n\x20\r\n\x20Source:\r\n\x20*\x20Windows\
    :\x20WMI\x20-\x20Win32_NetworkAdapter\x20-\x20description\r\n\x20*\x20Li\
    nux:\x20\r\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x19\x04\n\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03\x19\x0b\x16\n\x0c\n\x05\x04\0\x02\x01\x03\x12\
    \x03\x19\x19\x1a\n\x8a\x01\n\x04\x04\0\x02\x02\x12\x03$\x04\x1c\x1a}*\r\
    \n\x20Network\x20Card\x20Product\x20Name\r\n\x20\r\n\x20Example:\x20\r\n\
    \x20\r\n\x20Source:\r\n\x20*\x20Windows:\x20WMI\x20-\x20Win32_NetworkAda\
    pter\x20-\x20productname\r\n\x20*\x20Linux:\x20\r\n\n\x0c\n\x05\x04\0\
    \x02\x02\x05\x12\x03$\x04\n\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03$\x0b\
    \x17\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03$\x1a\x1b\n\xcf\x01\n\x04\x04\
    \0\x02\x03\x12\x03/\x04\x1c\x1a\xc1\x01*\r\n\x20Manufacturer\x20of\x20th\
    e\x20Network\x20card\x20/\x20interface\r\n\x20\r\n\x20Example:\x20Advanc\
    ed\x20Micro\x20Devices,\x20Inc.\x20[AMD/ATI]\x20[1002]\r\n\x20\r\n\x20So\
    urce:\r\n\x20*\x20Windows:\x20WMI\x20-\x20Win32_NetworkAdapter\x20-\x20m\
    anufacturer\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\x03\x05\
    \x12\x03/\x04\n\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03/\x0b\x17\n\x0c\n\
    \x05\x04\0\x02\x03\x03\x12\x03/\x1a\x1b\n\x9a\x02\n\x04\x04\0\x02\x04\
    \x12\x03:\x04\x1e\x1a\x8c\x02*\r\n\x20Network\x20Interface\x20Types\r\n\
    \x20\r\n\x20Example:\x20Ethernet,\x20Wireless80211\r\n\x20\r\n\x20Source\
    :\r\n\x20*\x20Windows\x20WMI\x20-\x20Win32_NetworkAdapter\x20-\x20type\
    \x20(<a\x20href=\"https://docs.microsoft.com/en-us/windows-hardware/driv\
    ers/network/ndis-interface-types\">list\x20of\x20Interface\x20Types</a>)\
    \r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03:\
    \x04\n\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03:\x0b\x19\n\x0c\n\x05\x04\0\
    \x02\x04\x03\x12\x03:\x1c\x1d\nn\n\x04\x04\0\x02\x05\x12\x03E\x04\x18\
    \x1aa*\r\n\x20BUS\x20Information\r\n\x20\r\n\x20Example:\x20pci@0000:02:\
    00.0\r\n\x20\r\n\x20Source:\r\n\x20*\x20Windows:\x20TBD\r\n\x20*\x20Linu\
    x:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03E\x04\n\n\x0c\n\x05\
    \x04\0\x02\x05\x01\x12\x03E\x0b\x13\n\x0c\n\x05\x04\0\x02\x05\x03\x12\
    \x03E\x16\x17\nq\n\x04\x04\0\x02\x06\x12\x03P\x04\x1c\x1ad*\r\n\x20Card\
    \x20Serial\x20Value\r\n\x20\r\n\x20Example:\x2020:1e:88:db:72:11\r\n\x20\
    \r\n\x20Source:\r\n\x20*\x20Windows:\x20TBD\r\n\x20*\x20Linux:\x20TBD\r\
    \n\n\x0c\n\x05\x04\0\x02\x06\x05\x12\x03P\x04\n\n\x0c\n\x05\x04\0\x02\
    \x06\x01\x12\x03P\x0b\x17\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03P\x1a\x1b\
    \nj\n\x04\x04\0\x02\x07\x12\x03\\\x04\x1b\x1a]*\r\n\x20Card\x20Clock\x20\
    Speed\x20(in\x20MHz)\r\n\x20\r\n\x20Example:\x2033\r\n\x20\r\n\x20Source\
    :\r\n\x20*\x20Windows:\x20TBD\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\
    \x04\0\x02\x07\x05\x12\x03\\\x04\n\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03\
    \\\x0b\x16\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03\\\x19\x1a\nf\n\x04\x04\
    \0\x02\x08\x12\x03g\x04\x15\x1aY*\r\n\x20Card\x20Bit\x20Width\r\n\x20\r\
    \n\x20Example:\x2064\x20(bits)\r\n\x20\r\n\x20Source:\r\n\x20*\x20Window\
    s:\x20TBD\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\x08\x05\
    \x12\x03g\x04\n\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03g\x0b\x10\n\x0c\n\
    \x05\x04\0\x02\x08\x03\x12\x03g\x13\x14\n\x97\x01\n\x04\x04\0\x02\t\x12\
    \x03r\x04&\x1a\x89\x01*\r\n\x20Network\x20Card\x20Capabilities\r\n\x20\r\
    \n\x20Example:\x20bus_master\x20cap_list\x20ethernet\x20physical\x20wire\
    less\r\n\x20\r\n\x20Source:\r\n\x20*\x20Windows:\x20TBD\r\n\x20*\x20Linu\
    x:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\t\x04\x12\x03r\x04\x0c\n\x0c\n\x05\
    \x04\0\x02\t\x05\x12\x03r\r\x13\n\x0c\n\x05\x04\0\x02\t\x01\x12\x03r\x14\
    \x20\n\x0c\n\x05\x04\0\x02\t\x03\x12\x03r#%b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
