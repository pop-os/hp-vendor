// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `hp/xy/sunrise_v1/hw/graphics.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct GraphicsCard {
    // message fields
    pub state: super::state::HWState,
    pub bus_info: ::std::string::String,
    pub field_type: ::std::string::String,
    pub manufacturer: ::std::string::String,
    pub model: ::std::string::String,
    pub chip_name: ::std::string::String,
    pub memory_size: f32,
    pub cores_count: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GraphicsCard {
    fn default() -> &'a GraphicsCard {
        <GraphicsCard as ::protobuf::Message>::default_instance()
    }
}

impl GraphicsCard {
    pub fn new() -> GraphicsCard {
        ::std::default::Default::default()
    }

    // .hp.xy.sunrise_v1.HWState state = 1;


    pub fn get_state(&self) -> super::state::HWState {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = super::state::HWState::HW_STATE_SAME;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: super::state::HWState) {
        self.state = v;
    }

    // string bus_info = 2;


    pub fn get_bus_info(&self) -> &str {
        &self.bus_info
    }
    pub fn clear_bus_info(&mut self) {
        self.bus_info.clear();
    }

    // Param is passed by value, moved
    pub fn set_bus_info(&mut self, v: ::std::string::String) {
        self.bus_info = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bus_info(&mut self) -> &mut ::std::string::String {
        &mut self.bus_info
    }

    // Take field
    pub fn take_bus_info(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bus_info, ::std::string::String::new())
    }

    // string type = 3;


    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    // string manufacturer = 4;


    pub fn get_manufacturer(&self) -> &str {
        &self.manufacturer
    }
    pub fn clear_manufacturer(&mut self) {
        self.manufacturer.clear();
    }

    // Param is passed by value, moved
    pub fn set_manufacturer(&mut self, v: ::std::string::String) {
        self.manufacturer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_manufacturer(&mut self) -> &mut ::std::string::String {
        &mut self.manufacturer
    }

    // Take field
    pub fn take_manufacturer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.manufacturer, ::std::string::String::new())
    }

    // string model = 5;


    pub fn get_model(&self) -> &str {
        &self.model
    }
    pub fn clear_model(&mut self) {
        self.model.clear();
    }

    // Param is passed by value, moved
    pub fn set_model(&mut self, v: ::std::string::String) {
        self.model = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_model(&mut self) -> &mut ::std::string::String {
        &mut self.model
    }

    // Take field
    pub fn take_model(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.model, ::std::string::String::new())
    }

    // string chip_name = 6;


    pub fn get_chip_name(&self) -> &str {
        &self.chip_name
    }
    pub fn clear_chip_name(&mut self) {
        self.chip_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_chip_name(&mut self, v: ::std::string::String) {
        self.chip_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chip_name(&mut self) -> &mut ::std::string::String {
        &mut self.chip_name
    }

    // Take field
    pub fn take_chip_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.chip_name, ::std::string::String::new())
    }

    // float memory_size = 7;


    pub fn get_memory_size(&self) -> f32 {
        self.memory_size
    }
    pub fn clear_memory_size(&mut self) {
        self.memory_size = 0.;
    }

    // Param is passed by value, moved
    pub fn set_memory_size(&mut self, v: f32) {
        self.memory_size = v;
    }

    // uint32 cores_count = 8;


    pub fn get_cores_count(&self) -> u32 {
        self.cores_count
    }
    pub fn clear_cores_count(&mut self) {
        self.cores_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_cores_count(&mut self, v: u32) {
        self.cores_count = v;
    }
}

impl ::protobuf::Message for GraphicsCard {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bus_info)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.manufacturer)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.model)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.chip_name)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.memory_size = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.cores_count = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.state != super::state::HWState::HW_STATE_SAME {
            my_size += ::protobuf::rt::enum_size(1, self.state);
        }
        if !self.bus_info.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.bus_info);
        }
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.field_type);
        }
        if !self.manufacturer.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.manufacturer);
        }
        if !self.model.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.model);
        }
        if !self.chip_name.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.chip_name);
        }
        if self.memory_size != 0. {
            my_size += 5;
        }
        if self.cores_count != 0 {
            my_size += ::protobuf::rt::value_size(8, self.cores_count, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.state != super::state::HWState::HW_STATE_SAME {
            os.write_enum(1, self.state.value())?;
        }
        if !self.bus_info.is_empty() {
            os.write_string(2, &self.bus_info)?;
        }
        if !self.field_type.is_empty() {
            os.write_string(3, &self.field_type)?;
        }
        if !self.manufacturer.is_empty() {
            os.write_string(4, &self.manufacturer)?;
        }
        if !self.model.is_empty() {
            os.write_string(5, &self.model)?;
        }
        if !self.chip_name.is_empty() {
            os.write_string(6, &self.chip_name)?;
        }
        if self.memory_size != 0. {
            os.write_float(7, self.memory_size)?;
        }
        if self.cores_count != 0 {
            os.write_uint32(8, self.cores_count)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GraphicsCard {
        GraphicsCard::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::state::HWState>>(
                    "state",
                    |m: &GraphicsCard| { &m.state },
                    |m: &mut GraphicsCard| { &mut m.state },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "bus_info",
                    |m: &GraphicsCard| { &m.bus_info },
                    |m: &mut GraphicsCard| { &mut m.bus_info },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "type",
                    |m: &GraphicsCard| { &m.field_type },
                    |m: &mut GraphicsCard| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "manufacturer",
                    |m: &GraphicsCard| { &m.manufacturer },
                    |m: &mut GraphicsCard| { &mut m.manufacturer },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "model",
                    |m: &GraphicsCard| { &m.model },
                    |m: &mut GraphicsCard| { &mut m.model },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "chip_name",
                    |m: &GraphicsCard| { &m.chip_name },
                    |m: &mut GraphicsCard| { &mut m.chip_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "memory_size",
                    |m: &GraphicsCard| { &m.memory_size },
                    |m: &mut GraphicsCard| { &mut m.memory_size },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "cores_count",
                    |m: &GraphicsCard| { &m.cores_count },
                    |m: &mut GraphicsCard| { &mut m.cores_count },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GraphicsCard>(
                    "GraphicsCard",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GraphicsCard {
        static mut instance: ::protobuf::lazy::Lazy<GraphicsCard> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GraphicsCard,
        };
        unsafe {
            instance.get(GraphicsCard::new)
        }
    }
}

impl ::protobuf::Clear for GraphicsCard {
    fn clear(&mut self) {
        self.state = super::state::HWState::HW_STATE_SAME;
        self.bus_info.clear();
        self.field_type.clear();
        self.manufacturer.clear();
        self.model.clear();
        self.chip_name.clear();
        self.memory_size = 0.;
        self.cores_count = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GraphicsCard {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GraphicsCard {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"hp/xy/sunrise_v1/hw/graphics.proto\x12\x13hp.xy.sunrise_v1.hw\x1a\
    \x1chp/xy/sunrise_v1/state.proto\"\x87\x02\n\x0cGraphicsCard\x12/\n\x05s\
    tate\x18\x01\x20\x01(\x0e2\x19.hp.xy.sunrise_v1.HWStateR\x05state\x12\
    \x19\n\x08bus_info\x18\x02\x20\x01(\tR\x07busInfo\x12\x12\n\x04type\x18\
    \x03\x20\x01(\tR\x04type\x12\"\n\x0cmanufacturer\x18\x04\x20\x01(\tR\x0c\
    manufacturer\x12\x14\n\x05model\x18\x05\x20\x01(\tR\x05model\x12\x1b\n\t\
    chip_name\x18\x06\x20\x01(\tR\x08chipName\x12\x1f\n\x0bmemory_size\x18\
    \x07\x20\x01(\x02R\nmemorySize\x12\x1f\n\x0bcores_count\x18\x08\x20\x01(\
    \rR\ncoresCountJ\xa3\x10\n\x06\x12\x04\0\0^\x01\n\x08\n\x01\x0c\x12\x03\
    \0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x1c\n\t\n\x02\x03\0\x12\x03\x04\0\
    &\n\n\n\x02\x04\0\x12\x04\x06\0^\x01\n\n\n\x03\x04\0\x01\x12\x03\x06\x08\
    \x14\n\xa0\x02\n\x04\x04\0\x02\0\x12\x03\x0e\x04\x16\x1a\x92\x02*\r\n\
    \x20HW\x20State\r\n\x20\r\n\x20HW_STATE_ADDED\x20-\x20The\x20HW\x20compo\
    nent\x20was\x20added\x20or\x20first\x20detected\x20(all\x20data\x20field\
    s\x20are\x20populated)\r\n\x20HW_STATE_REMOVED\x20-\x20The\x20HW\x20comp\
    onent\x20was\x20removed\x20or\x20not\x20detected\x20anymore\x20(If\x20th\
    ere\x20are\x20Primary\x20Keys\x20defined\x20send\x20them\x20only,\x20oth\
    erwise\x20populate\x20all\x20data\x20fields)\r\n\n\x0c\n\x05\x04\0\x02\0\
    \x06\x12\x03\x0e\x04\x0b\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0e\x0c\x11\
    \n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0e\x14\x15\n\xf5\x01\n\x04\x04\0\
    \x02\x01\x12\x03\x1a\x04\x18\x1a\xe7\x01*\r\n\x20Graphic\x20Card\x20Bus\
    \x20Info\r\n\x20ID\x20of\x20the\x20device\x20connected\x20to\x20the\x20b\
    us.\x20This\x20field\x20forms\x20a\x20compound\x20key\x20with\x20serial_\
    number\r\n\x20\r\n\x20Example:\x20pci@0000:04:00.0\r\n\x20\r\n\x20Source\
    :\x20\r\n\x20*\x20Windows:\x20Nvidia,\x20AMD\x20(AdapterInfo),\x20Intel\
    \x20(WMI)\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\x01\x05\
    \x12\x03\x1a\x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x1a\x0b\x13\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x1a\x16\x17\n\xa8\x01\n\x04\x04\0\
    \x02\x02\x12\x03%\x04\x14\x1a\x9a\x01*\r\n\x20Graphic\x20Card\x20Type\r\
    \n\x20\r\n\x20Example:\x20Integrated,\x20UMA,\x20Internal,\x20Discrete\r\
    \n\x20\r\n\x20Source:\x20\r\n\x20*\x20Windows:\x20Nvidia,\x20AMD\x20(Ada\
    pterInfo),\x20Intel\x20(WMI)\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\
    \x04\0\x02\x02\x05\x12\x03%\x04\n\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03%\
    \x0b\x0f\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03%\x12\x13\n\xa2\x01\n\x04\
    \x04\0\x02\x03\x12\x030\x04\x1c\x1a\x94\x01*\r\n\x20Graphic\x20Card\x20M\
    anufacturer\r\n\x20\r\n\x20Example:\x20Nvidia,\x20AMD\x20and\x20Intel\r\
    \n\x20\r\n\x20Source:\x20\r\n\x20*\x20Windows:\x20Nvidia,\x20AMD\x20(Ada\
    pterInfo),\x20Intel\x20(WMI)\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\
    \x04\0\x02\x03\x05\x12\x030\x04\n\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x030\
    \x0b\x17\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x030\x1a\x1b\n\x9a\x01\n\x04\
    \x04\0\x02\x04\x12\x03;\x04\x15\x1a\x8c\x01*\r\n\x20Graphic\x20Card\x20M\
    odel\r\n\x20\r\n\x20Example:\x20NVIDIA\x20Quadro\x20M1000M\r\n\x20\r\n\
    \x20Source:\x20\r\n\x20*\x20Windows:\x20Nvidia,\x20AMD\x20(AdapterInfo),\
    \x20Intel\x20(WMI)\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\
    \x04\x05\x12\x03;\x04\n\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03;\x0b\x10\n\
    \x0c\n\x05\x04\0\x02\x04\x03\x12\x03;\x13\x14\n\xab\x01\n\x04\x04\0\x02\
    \x05\x12\x03F\x04\x19\x1a\x9d\x01*\r\n\x20Graphic\x20Card\x20Chip\x20Nam\
    e\r\n\x20\r\n\x20Example:\x20GM107,\x20HD\x20Graphics\x20530,\x20Ellesme\
    re\r\n\x20\r\n\x20Source:\x20\r\n\x20*\x20Windows:\x20Nvidia,\x20AMD\x20\
    (AdapterInfo),\x20Intel\x20(WMI)\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\
    \x05\x04\0\x02\x05\x05\x12\x03F\x04\n\n\x0c\n\x05\x04\0\x02\x05\x01\x12\
    \x03F\x0b\x14\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03F\x17\x18\n\x8b\x02\n\
    \x04\x04\0\x02\x06\x12\x03R\x04\x1a\x1a\xfd\x01*\r\n\x20Memory\x20Size\
    \x20(in\x20MBs)\r\n\x20Available\x20memory\x20in\x20the\x20graphic\x20ca\
    rd.\r\n\x20\r\n\x20Example:\x208192\r\n\x20\r\n\x20Source:\x20\r\n\x20*\
    \x20Windows:\x20Nvidia\x20(NvAPI_GPU_GetMemoryInfo),\x20AMD\x20(ADLMemor\
    yInfo)\x20and\x20Intel\x20(No\x20dedicated\x20memory,\x20then\x20use\x20\
    system\x20shared\x20memory\x20-\x20SMBIOS)\r\n\x20*\x20Linux:\x20TBD\r\n\
    \n\x0c\n\x05\x04\0\x02\x06\x05\x12\x03R\x04\t\n\x0c\n\x05\x04\0\x02\x06\
    \x01\x12\x03R\n\x15\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03R\x18\x19\n\xcd\
    \x01\n\x04\x04\0\x02\x07\x12\x03]\x04\x1b\x1a\xbf\x01*\r\n\x20Number\x20\
    of\x20Cores\r\n\x20\r\n\x20Example:\x20512\r\n\x20\r\n\x20Source:\x20\r\
    \n\x20*\x20Windows:\x20Nvidia\x20(NvAPI_GPU_GetMemoryInfo),\x20AMD\x20(A\
    DLMemoryInfo)\x20and\x20Intel\x20(No\x20dedicated\x20cores,\x20then\x20r\
    eport\x20from\x20SMBIOS)\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\
    \x02\x07\x05\x12\x03]\x04\n\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03]\x0b\
    \x16\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03]\x19\x1ab\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
