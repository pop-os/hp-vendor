// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `hp/xy/sunrise_v1/hw/display.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct Display {
    // message fields
    pub display_name: ::std::string::String,
    pub pixel_size: u32,
    pub connected: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Display {
    fn default() -> &'a Display {
        <Display as ::protobuf::Message>::default_instance()
    }
}

impl Display {
    pub fn new() -> Display {
        ::std::default::Default::default()
    }

    // string display_name = 1;


    pub fn get_display_name(&self) -> &str {
        &self.display_name
    }
    pub fn clear_display_name(&mut self) {
        self.display_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_display_name(&mut self, v: ::std::string::String) {
        self.display_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_display_name(&mut self) -> &mut ::std::string::String {
        &mut self.display_name
    }

    // Take field
    pub fn take_display_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.display_name, ::std::string::String::new())
    }

    // uint32 pixel_size = 2;


    pub fn get_pixel_size(&self) -> u32 {
        self.pixel_size
    }
    pub fn clear_pixel_size(&mut self) {
        self.pixel_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_pixel_size(&mut self, v: u32) {
        self.pixel_size = v;
    }

    // bool connected = 3;


    pub fn get_connected(&self) -> bool {
        self.connected
    }
    pub fn clear_connected(&mut self) {
        self.connected = false;
    }

    // Param is passed by value, moved
    pub fn set_connected(&mut self, v: bool) {
        self.connected = v;
    }
}

impl ::protobuf::Message for Display {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.display_name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.pixel_size = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.connected = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.display_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.display_name);
        }
        if self.pixel_size != 0 {
            my_size += ::protobuf::rt::value_size(2, self.pixel_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.connected != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.display_name.is_empty() {
            os.write_string(1, &self.display_name)?;
        }
        if self.pixel_size != 0 {
            os.write_uint32(2, self.pixel_size)?;
        }
        if self.connected != false {
            os.write_bool(3, self.connected)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Display {
        Display::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "display_name",
                    |m: &Display| { &m.display_name },
                    |m: &mut Display| { &mut m.display_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "pixel_size",
                    |m: &Display| { &m.pixel_size },
                    |m: &mut Display| { &mut m.pixel_size },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "connected",
                    |m: &Display| { &m.connected },
                    |m: &mut Display| { &mut m.connected },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Display>(
                    "Display",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Display {
        static mut instance: ::protobuf::lazy::Lazy<Display> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Display,
        };
        unsafe {
            instance.get(Display::new)
        }
    }
}

impl ::protobuf::Clear for Display {
    fn clear(&mut self) {
        self.display_name.clear();
        self.pixel_size = 0;
        self.connected = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Display {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Display {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!hp/xy/sunrise_v1/hw/display.proto\x12\x13hp.xy.sunrise_v1.hw\"i\n\x07\
    Display\x12!\n\x0cdisplay_name\x18\x01\x20\x01(\tR\x0bdisplayName\x12\
    \x1d\n\npixel_size\x18\x02\x20\x01(\rR\tpixelSize\x12\x1c\n\tconnected\
    \x18\x03\x20\x01(\x08R\tconnectedJ\x93\x04\n\x06\x12\x04\0\0\"\x01\n\x08\
    \n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x1c\n?\n\x02\
    \x04\0\x12\x04\x05\0\"\x01\x1a3\x20TODO:\x20To\x20add\x20fields\x20to\
    \x20uniquely\x20identify\x20Displays\n\n\n\n\x03\x04\0\x01\x12\x03\x05\
    \x08\x0f\nm\n\x04\x04\0\x02\0\x12\x03\x0f\x04\x1c\x1a`*\n\x20Port\x20typ\
    e\n\x20\n\x20Examples:\x20Screen\x200,\x20HDMI-A-0,\x20DisplayPort-0\n\
    \x20\n\x20Source:\n\x20*\x20Linux:\x20xrandr\x20--query\n\n\x0c\n\x05\
    \x04\0\x02\0\x05\x12\x03\x0f\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\
    \x0f\x0b\x17\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0f\x1a\x1b\ni\n\x04\
    \x04\0\x02\x01\x12\x03\x19\x04\x1a\x1a\\*\n\x20Current\x20Pixel\x20Size\
    \n\x20\n\x20Examples:\x201920x1080,\x201280x1024\n\x20\n\x20Source:\n\
    \x20*\x20Linux:\x20xrandr\x20--query\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\
    \x03\x19\x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x19\x0b\x15\n\x0c\n\
    \x05\x04\0\x02\x01\x03\x12\x03\x19\x18\x19\nP\n\x04\x04\0\x02\x02\x12\
    \x03!\x04\x17\x1aC*\n\x20Display\x20is\x20connected\x20or\x20not\n\x20\n\
    \x20Source:\n\x20*\x20Linux:\x20xrandr\x20--query\n\n\x0c\n\x05\x04\0\
    \x02\x02\x05\x12\x03!\x04\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03!\t\
    \x12\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03!\x15\x16b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
