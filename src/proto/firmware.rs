// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `hp/xy/sunrise_v1/sw/firmware.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct Firmware {
    // message fields
    pub state: super::state::SWState,
    pub bios_vendor: ::std::string::String,
    pub bios_version: ::std::string::String,
    pub bios_release_date: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub smbios_version: ::std::string::String,
    pub embedded_controller_version: ::std::string::String,
    pub address: ::std::string::String,
    pub runtime_size: ::std::string::String,
    pub rom_size: ::std::string::String,
    pub capabilities: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Firmware {
    fn default() -> &'a Firmware {
        <Firmware as ::protobuf::Message>::default_instance()
    }
}

impl Firmware {
    pub fn new() -> Firmware {
        ::std::default::Default::default()
    }

    // .hp.xy.sunrise_v1.SWState state = 1;


    pub fn get_state(&self) -> super::state::SWState {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = super::state::SWState::SW_STATE_SAME;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: super::state::SWState) {
        self.state = v;
    }

    // string bios_vendor = 2;


    pub fn get_bios_vendor(&self) -> &str {
        &self.bios_vendor
    }
    pub fn clear_bios_vendor(&mut self) {
        self.bios_vendor.clear();
    }

    // Param is passed by value, moved
    pub fn set_bios_vendor(&mut self, v: ::std::string::String) {
        self.bios_vendor = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bios_vendor(&mut self) -> &mut ::std::string::String {
        &mut self.bios_vendor
    }

    // Take field
    pub fn take_bios_vendor(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bios_vendor, ::std::string::String::new())
    }

    // string bios_version = 3;


    pub fn get_bios_version(&self) -> &str {
        &self.bios_version
    }
    pub fn clear_bios_version(&mut self) {
        self.bios_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_bios_version(&mut self, v: ::std::string::String) {
        self.bios_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bios_version(&mut self) -> &mut ::std::string::String {
        &mut self.bios_version
    }

    // Take field
    pub fn take_bios_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bios_version, ::std::string::String::new())
    }

    // .google.protobuf.Timestamp bios_release_date = 4;


    pub fn get_bios_release_date(&self) -> &::protobuf::well_known_types::Timestamp {
        self.bios_release_date.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_bios_release_date(&mut self) {
        self.bios_release_date.clear();
    }

    pub fn has_bios_release_date(&self) -> bool {
        self.bios_release_date.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bios_release_date(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.bios_release_date = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bios_release_date(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.bios_release_date.is_none() {
            self.bios_release_date.set_default();
        }
        self.bios_release_date.as_mut().unwrap()
    }

    // Take field
    pub fn take_bios_release_date(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.bios_release_date.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // string smbios_version = 5;


    pub fn get_smbios_version(&self) -> &str {
        &self.smbios_version
    }
    pub fn clear_smbios_version(&mut self) {
        self.smbios_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_smbios_version(&mut self, v: ::std::string::String) {
        self.smbios_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_smbios_version(&mut self) -> &mut ::std::string::String {
        &mut self.smbios_version
    }

    // Take field
    pub fn take_smbios_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.smbios_version, ::std::string::String::new())
    }

    // string embedded_controller_version = 6;


    pub fn get_embedded_controller_version(&self) -> &str {
        &self.embedded_controller_version
    }
    pub fn clear_embedded_controller_version(&mut self) {
        self.embedded_controller_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_embedded_controller_version(&mut self, v: ::std::string::String) {
        self.embedded_controller_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_embedded_controller_version(&mut self) -> &mut ::std::string::String {
        &mut self.embedded_controller_version
    }

    // Take field
    pub fn take_embedded_controller_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.embedded_controller_version, ::std::string::String::new())
    }

    // string address = 7;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }

    // string runtime_size = 8;


    pub fn get_runtime_size(&self) -> &str {
        &self.runtime_size
    }
    pub fn clear_runtime_size(&mut self) {
        self.runtime_size.clear();
    }

    // Param is passed by value, moved
    pub fn set_runtime_size(&mut self, v: ::std::string::String) {
        self.runtime_size = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_runtime_size(&mut self) -> &mut ::std::string::String {
        &mut self.runtime_size
    }

    // Take field
    pub fn take_runtime_size(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.runtime_size, ::std::string::String::new())
    }

    // string rom_size = 9;


    pub fn get_rom_size(&self) -> &str {
        &self.rom_size
    }
    pub fn clear_rom_size(&mut self) {
        self.rom_size.clear();
    }

    // Param is passed by value, moved
    pub fn set_rom_size(&mut self, v: ::std::string::String) {
        self.rom_size = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rom_size(&mut self) -> &mut ::std::string::String {
        &mut self.rom_size
    }

    // Take field
    pub fn take_rom_size(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rom_size, ::std::string::String::new())
    }

    // repeated string capabilities = 10;


    pub fn get_capabilities(&self) -> &[::std::string::String] {
        &self.capabilities
    }
    pub fn clear_capabilities(&mut self) {
        self.capabilities.clear();
    }

    // Param is passed by value, moved
    pub fn set_capabilities(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.capabilities = v;
    }

    // Mutable pointer to the field.
    pub fn mut_capabilities(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.capabilities
    }

    // Take field
    pub fn take_capabilities(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.capabilities, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Firmware {
    fn is_initialized(&self) -> bool {
        for v in &self.bios_release_date {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bios_vendor)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bios_version)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.bios_release_date)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.smbios_version)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.embedded_controller_version)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.runtime_size)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rom_size)?;
                },
                10 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.capabilities)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.state != super::state::SWState::SW_STATE_SAME {
            my_size += ::protobuf::rt::enum_size(1, self.state);
        }
        if !self.bios_vendor.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.bios_vendor);
        }
        if !self.bios_version.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.bios_version);
        }
        if let Some(ref v) = self.bios_release_date.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.smbios_version.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.smbios_version);
        }
        if !self.embedded_controller_version.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.embedded_controller_version);
        }
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.address);
        }
        if !self.runtime_size.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.runtime_size);
        }
        if !self.rom_size.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.rom_size);
        }
        for value in &self.capabilities {
            my_size += ::protobuf::rt::string_size(10, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.state != super::state::SWState::SW_STATE_SAME {
            os.write_enum(1, self.state.value())?;
        }
        if !self.bios_vendor.is_empty() {
            os.write_string(2, &self.bios_vendor)?;
        }
        if !self.bios_version.is_empty() {
            os.write_string(3, &self.bios_version)?;
        }
        if let Some(ref v) = self.bios_release_date.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.smbios_version.is_empty() {
            os.write_string(5, &self.smbios_version)?;
        }
        if !self.embedded_controller_version.is_empty() {
            os.write_string(6, &self.embedded_controller_version)?;
        }
        if !self.address.is_empty() {
            os.write_string(7, &self.address)?;
        }
        if !self.runtime_size.is_empty() {
            os.write_string(8, &self.runtime_size)?;
        }
        if !self.rom_size.is_empty() {
            os.write_string(9, &self.rom_size)?;
        }
        for v in &self.capabilities {
            os.write_string(10, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Firmware {
        Firmware::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::state::SWState>>(
                    "state",
                    |m: &Firmware| { &m.state },
                    |m: &mut Firmware| { &mut m.state },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "bios_vendor",
                    |m: &Firmware| { &m.bios_vendor },
                    |m: &mut Firmware| { &mut m.bios_vendor },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "bios_version",
                    |m: &Firmware| { &m.bios_version },
                    |m: &mut Firmware| { &mut m.bios_version },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "bios_release_date",
                    |m: &Firmware| { &m.bios_release_date },
                    |m: &mut Firmware| { &mut m.bios_release_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "smbios_version",
                    |m: &Firmware| { &m.smbios_version },
                    |m: &mut Firmware| { &mut m.smbios_version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "embedded_controller_version",
                    |m: &Firmware| { &m.embedded_controller_version },
                    |m: &mut Firmware| { &mut m.embedded_controller_version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "address",
                    |m: &Firmware| { &m.address },
                    |m: &mut Firmware| { &mut m.address },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "runtime_size",
                    |m: &Firmware| { &m.runtime_size },
                    |m: &mut Firmware| { &mut m.runtime_size },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rom_size",
                    |m: &Firmware| { &m.rom_size },
                    |m: &mut Firmware| { &mut m.rom_size },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "capabilities",
                    |m: &Firmware| { &m.capabilities },
                    |m: &mut Firmware| { &mut m.capabilities },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Firmware>(
                    "Firmware",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Firmware {
        static mut instance: ::protobuf::lazy::Lazy<Firmware> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Firmware,
        };
        unsafe {
            instance.get(Firmware::new)
        }
    }
}

impl ::protobuf::Clear for Firmware {
    fn clear(&mut self) {
        self.state = super::state::SWState::SW_STATE_SAME;
        self.bios_vendor.clear();
        self.bios_version.clear();
        self.bios_release_date.clear();
        self.smbios_version.clear();
        self.embedded_controller_version.clear();
        self.address.clear();
        self.runtime_size.clear();
        self.rom_size.clear();
        self.capabilities.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Firmware {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Firmware {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"hp/xy/sunrise_v1/sw/firmware.proto\x12\x13hp.xy.sunrise_v1.sw\x1a\
    \x1chp/xy/sunrise_v1/state.proto\x1a\x1fgoogle/protobuf/timestamp.proto\
    \"\xaa\x03\n\x08Firmware\x12/\n\x05state\x18\x01\x20\x01(\x0e2\x19.hp.xy\
    .sunrise_v1.SWStateR\x05state\x12\x1f\n\x0bbios_vendor\x18\x02\x20\x01(\
    \tR\nbiosVendor\x12!\n\x0cbios_version\x18\x03\x20\x01(\tR\x0bbiosVersio\
    n\x12F\n\x11bios_release_date\x18\x04\x20\x01(\x0b2\x1a.google.protobuf.\
    TimestampR\x0fbiosReleaseDate\x12%\n\x0esmbios_version\x18\x05\x20\x01(\
    \tR\rsmbiosVersion\x12>\n\x1bembedded_controller_version\x18\x06\x20\x01\
    (\tR\x19embeddedControllerVersion\x12\x18\n\x07address\x18\x07\x20\x01(\
    \tR\x07address\x12!\n\x0cruntime_size\x18\x08\x20\x01(\tR\x0bruntimeSize\
    \x12\x19\n\x08rom_size\x18\t\x20\x01(\tR\x07romSize\x12\"\n\x0ccapabilit\
    ies\x18\n\x20\x03(\tR\x0ccapabilitiesJ\xf9\x15\n\x06\x12\x04\0\0y\x01\n\
    \x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x1c\n\t\n\
    \x02\x03\0\x12\x03\x04\0&\n\t\n\x02\x03\x01\x12\x03\x05\0)\n\n\n\x02\x04\
    \0\x12\x04\x07\0y\x01\n\n\n\x03\x04\0\x01\x12\x03\x07\x08\x10\n\xb9\x02\
    \n\x04\x04\0\x02\0\x12\x03\x10\x04\x16\x1a\xab\x02\x20\r\n\x20SW\x20Stat\
    e\r\n\x20\r\n\x20SW_STATE_INSTALLED\x20-\x20SW\x20component\x20was\x20in\
    stalled\x20/\x20first\x20detected\x20(populate\x20all\x20data\x20fields)\
    \r\n\x20SW_STATE_UNINSTALLED\x20-\x20SW\x20component\x20was\x20uninstall\
    ed\x20/\x20not\x20detected\x20anymore\x20(populate\x20PKs\x20only)\r\n\
    \x20SW_STATE_UPDATED\x20-\x20SW\x20component\x20was\x20updated\x20/\x20u\
    pgraded\x20(populate\x20PKs\x20and\x20changed\x20fields)\r\n\n\x0c\n\x05\
    \x04\0\x02\0\x06\x12\x03\x10\x04\x0b\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\
    \x10\x0c\x11\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x10\x14\x15\nx\n\x04\
    \x04\0\x02\x01\x12\x03\x1b\x04\x1b\x1ak*\r\n\x20BIOS\x20Vendor\r\n\x20\r\
    \n\x20Example:\x20HP\r\n\x20\r\n\x20Source:\r\n\x20*\x20Windows:\x20WMI\
    \x20-\x20Win32_BIOS\x20-\x20Manufacturer\r\n\x20*\x20Linux:\x20TBD\r\n\n\
    \x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x1b\x04\n\n\x0c\n\x05\x04\0\x02\x01\
    \x01\x12\x03\x1b\x0b\x16\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x1b\x19\
    \x1a\n\xa2\x01\n\x04\x04\0\x02\x02\x12\x03&\x04\x1c\x1a\x94\x01*\r\n\x20\
    BIOS\x20Version\r\n\x20\r\n\x20Examples:\x20T82\x20Ver.\x2001.01.00,\x20\
    R92\x20Ver.\x2001.08.02\r\n\x20\r\n\x20Source:\r\n\x20*\x20Windows:\x20W\
    MI\x20-\x20Win32_BIOS\x20-\x20SMBIOSBIOSVersion\r\n\x20*\x20Linux:\x20TB\
    D\r\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03&\x04\n\n\x0c\n\x05\x04\0\x02\
    \x02\x01\x12\x03&\x0b\x17\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03&\x1a\x1b\
    \n\x89\x01\n\x04\x04\0\x02\x03\x12\x031\x044\x1a|*\r\n\x20BIOS\x20Releas\
    e\x20Date\r\n\x20\r\n\x20Example:\x202020-10-31\r\n\x20\r\n\x20Source:\r\
    \n\x20*\x20Windows:\x20WMI\x20-\x20Win32_BIOS\x20-\x20ReleaseDate\x20\
    \x20\x20\x20\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\x03\x06\
    \x12\x031\x04\x1d\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x031\x1e/\n\x0c\n\
    \x05\x04\0\x02\x03\x03\x12\x03123\n\xc8\x01\n\x04\x04\0\x02\x04\x12\x03<\
    \x04\x1e\x1a\xba\x01*\r\n\x20System\x20Management\x20BIOS\x20version\x20\
    (Format:\x20\"{MAJOR}.{MINOR}\")\r\n\x20\r\n\x20Example:\x203.1\r\n\x20\
    \r\n\x20Source:\r\n\x20*\x20Windows:\x20WMI\x20-\x20Win32_BIOS\x20-\x20(\
    SMBIOSMajorVersion\x20and\x20SMBIOSMinorVersion)\r\n\x20*\x20Linux:\x20T\
    BD\r\n\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03<\x04\n\n\x0c\n\x05\x04\0\
    \x02\x04\x01\x12\x03<\x0b\x19\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03<\x1c\
    \x1d\n\xda\x01\n\x04\x04\0\x02\x05\x12\x03G\x04+\x1a\xcc\x01*\r\n\x20Emb\
    edded\x20Controller\x20Version\x20(Format:\x20\"{MAJOR}.{MINOR}\")\r\n\
    \x20\r\n\x20Example:\x20101.48\r\n\x20\r\n\x20Source:\r\n\x20*\x20Window\
    s:\x20WMI\x20-\x20MS_SystemInformation\x20-\x20(ECFirmwareMajorRelease\
    \x20and\x20ECFirmwareMinorRelease)\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\
    \x05\x04\0\x02\x05\x05\x12\x03G\x04\n\n\x0c\n\x05\x04\0\x02\x05\x01\x12\
    \x03G\x0b&\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03G)*\n\\\n\x04\x04\0\x02\
    \x06\x12\x03R\x04\x17\x1aO*\r\n\x20Address\r\n\x20\r\n\x20Example:\x200x\
    F000\r\n\x20\r\n\x20Source:\r\n\x20*\x20Windows:\x20TBD\r\n\x20*\x20Linu\
    x:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\x06\x05\x12\x03R\x04\n\n\x0c\n\x05\
    \x04\0\x02\x06\x01\x12\x03R\x0b\x12\n\x0c\n\x05\x04\0\x02\x06\x03\x12\
    \x03R\x15\x16\ne\n\x04\x04\0\x02\x07\x12\x03]\x04\x1c\x1aX*\r\n\x20Runti\
    me\x20size\x20(in\x20kB)\r\n\x20\r\n\x20Example:\x2064\r\n\x20\r\n\x20So\
    urce:\r\n\x20*\x20Windows:\x20TBD\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\
    \x05\x04\0\x02\x07\x05\x12\x03]\x04\n\n\x0c\n\x05\x04\0\x02\x07\x01\x12\
    \x03]\x0b\x17\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03]\x1a\x1b\na\n\x04\
    \x04\0\x02\x08\x12\x03h\x04\x18\x1aT*\r\n\x20ROM\x20Size\x20(in\x20MB)\r\
    \n\x20\r\n\x20Example:\x2032\r\n\x20\r\n\x20Source:\r\n\x20*\x20Windows:\
    \x20TBD\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\x08\x05\x12\
    \x03h\x04\n\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03h\x0b\x13\n\x0c\n\x05\
    \x04\0\x02\x08\x03\x12\x03h\x16\x17\n\xc3\x06\n\x04\x04\0\x02\t\x12\x03w\
    \x04&\x1a\xb5\x06*\r\n\x20Firmware\x20Capabilities\r\n\x20\r\n\x20Exampl\
    es:\r\n\x20\x20\x20\x20\x20pci\x20pcmcia\x20upgrade\x20shadowing\x20cdbo\
    ot\x20bootselect\x20edd\x20int5printscreen\x20int9keyboard\x20int14seria\
    l\x20int17printer\x20acpi\x20usb\x20smartbattery\x20biosbootspecificatio\
    n\x20netboot\x20uefi\x20\x20\x20\x20\r\n\r\n\x20The\x20ones\x20above\x20\
    can\x20be\x20interpreted\x20as:\r\n\x20\x20\x20\x20\x20PCI\x20is\x20supp\
    orted,\x20PC\x20Card\x20(PCMCIA)\x20is\x20supported,\x20BIOS\x20is\x20up\
    gradeable,\x20BIOS\x20shadowing\x20is\x20allowed,\x20Boot\x20from\x20CD\
    \x20is\x20supported,\x20Selectable\x20boot\x20is\x20supported,\x20EDD\
    \x20is\x20supported,\x20Print\x20screen\x20service\x20is\x20supported\
    \x20(int\x205h),\x208042\x20keyboard\x20services\x20are\x20supported\x20\
    (int\x209h),\x20Serial\x20services\x20are\x20supported\x20(int\x2014h),\
    \x20Printer\x20services\x20are\x20supported\x20(int\x2017h),\x20ACPI\x20\
    is\x20supported,\x20BIOS\x20boot\x20specification\x20is\x20supported,\
    \x20Function\x20key-initiated\x20network\x20boot\x20is\x20supported,\x20\
    Targeted\x20content\x20distribution\x20is\x20supported,\x20UEFI\x20is\
    \x20supported\r\n\r\n\x20Source:\r\n\x20*\x20Windows:\x20TBD\r\n\x20*\
    \x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\t\x04\x12\x03w\x04\x0c\n\x0c\
    \n\x05\x04\0\x02\t\x05\x12\x03w\r\x13\n\x0c\n\x05\x04\0\x02\t\x01\x12\
    \x03w\x14\x20\n\x0c\n\x05\x04\0\x02\t\x03\x12\x03w#%b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
