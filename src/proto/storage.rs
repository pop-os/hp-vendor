// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `hp/xy/sunrise_v1/hw/storage.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct NVMEStoragePhysical {
    // message fields
    pub state: super::state::HWState,
    pub serial_number: ::std::string::String,
    pub model: ::std::string::String,
    pub firmware_revision: ::std::string::String,
    pub vendor_id: ::std::string::String,
    pub sub_system_id: ::std::string::String,
    pub total_capacity: ::std::string::String,
    pub bus_info: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NVMEStoragePhysical {
    fn default() -> &'a NVMEStoragePhysical {
        <NVMEStoragePhysical as ::protobuf::Message>::default_instance()
    }
}

impl NVMEStoragePhysical {
    pub fn new() -> NVMEStoragePhysical {
        ::std::default::Default::default()
    }

    // .hp.xy.sunrise_v1.HWState state = 1;


    pub fn get_state(&self) -> super::state::HWState {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = super::state::HWState::HW_STATE_SAME;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: super::state::HWState) {
        self.state = v;
    }

    // string serial_number = 2;


    pub fn get_serial_number(&self) -> &str {
        &self.serial_number
    }
    pub fn clear_serial_number(&mut self) {
        self.serial_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        &mut self.serial_number
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.serial_number, ::std::string::String::new())
    }

    // string model = 3;


    pub fn get_model(&self) -> &str {
        &self.model
    }
    pub fn clear_model(&mut self) {
        self.model.clear();
    }

    // Param is passed by value, moved
    pub fn set_model(&mut self, v: ::std::string::String) {
        self.model = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_model(&mut self) -> &mut ::std::string::String {
        &mut self.model
    }

    // Take field
    pub fn take_model(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.model, ::std::string::String::new())
    }

    // string firmware_revision = 4;


    pub fn get_firmware_revision(&self) -> &str {
        &self.firmware_revision
    }
    pub fn clear_firmware_revision(&mut self) {
        self.firmware_revision.clear();
    }

    // Param is passed by value, moved
    pub fn set_firmware_revision(&mut self, v: ::std::string::String) {
        self.firmware_revision = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_firmware_revision(&mut self) -> &mut ::std::string::String {
        &mut self.firmware_revision
    }

    // Take field
    pub fn take_firmware_revision(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.firmware_revision, ::std::string::String::new())
    }

    // string vendor_id = 5;


    pub fn get_vendor_id(&self) -> &str {
        &self.vendor_id
    }
    pub fn clear_vendor_id(&mut self) {
        self.vendor_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_vendor_id(&mut self, v: ::std::string::String) {
        self.vendor_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vendor_id(&mut self) -> &mut ::std::string::String {
        &mut self.vendor_id
    }

    // Take field
    pub fn take_vendor_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.vendor_id, ::std::string::String::new())
    }

    // string sub_system_id = 7;


    pub fn get_sub_system_id(&self) -> &str {
        &self.sub_system_id
    }
    pub fn clear_sub_system_id(&mut self) {
        self.sub_system_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_sub_system_id(&mut self, v: ::std::string::String) {
        self.sub_system_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sub_system_id(&mut self) -> &mut ::std::string::String {
        &mut self.sub_system_id
    }

    // Take field
    pub fn take_sub_system_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sub_system_id, ::std::string::String::new())
    }

    // string total_capacity = 8;


    pub fn get_total_capacity(&self) -> &str {
        &self.total_capacity
    }
    pub fn clear_total_capacity(&mut self) {
        self.total_capacity.clear();
    }

    // Param is passed by value, moved
    pub fn set_total_capacity(&mut self, v: ::std::string::String) {
        self.total_capacity = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_total_capacity(&mut self) -> &mut ::std::string::String {
        &mut self.total_capacity
    }

    // Take field
    pub fn take_total_capacity(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.total_capacity, ::std::string::String::new())
    }

    // string bus_info = 9;


    pub fn get_bus_info(&self) -> &str {
        &self.bus_info
    }
    pub fn clear_bus_info(&mut self) {
        self.bus_info.clear();
    }

    // Param is passed by value, moved
    pub fn set_bus_info(&mut self, v: ::std::string::String) {
        self.bus_info = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bus_info(&mut self) -> &mut ::std::string::String {
        &mut self.bus_info
    }

    // Take field
    pub fn take_bus_info(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bus_info, ::std::string::String::new())
    }
}

impl ::protobuf::Message for NVMEStoragePhysical {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.serial_number)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.model)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.firmware_revision)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.vendor_id)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sub_system_id)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.total_capacity)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bus_info)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.state != super::state::HWState::HW_STATE_SAME {
            my_size += ::protobuf::rt::enum_size(1, self.state);
        }
        if !self.serial_number.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.serial_number);
        }
        if !self.model.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.model);
        }
        if !self.firmware_revision.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.firmware_revision);
        }
        if !self.vendor_id.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.vendor_id);
        }
        if !self.sub_system_id.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.sub_system_id);
        }
        if !self.total_capacity.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.total_capacity);
        }
        if !self.bus_info.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.bus_info);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.state != super::state::HWState::HW_STATE_SAME {
            os.write_enum(1, self.state.value())?;
        }
        if !self.serial_number.is_empty() {
            os.write_string(2, &self.serial_number)?;
        }
        if !self.model.is_empty() {
            os.write_string(3, &self.model)?;
        }
        if !self.firmware_revision.is_empty() {
            os.write_string(4, &self.firmware_revision)?;
        }
        if !self.vendor_id.is_empty() {
            os.write_string(5, &self.vendor_id)?;
        }
        if !self.sub_system_id.is_empty() {
            os.write_string(7, &self.sub_system_id)?;
        }
        if !self.total_capacity.is_empty() {
            os.write_string(8, &self.total_capacity)?;
        }
        if !self.bus_info.is_empty() {
            os.write_string(9, &self.bus_info)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NVMEStoragePhysical {
        NVMEStoragePhysical::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::state::HWState>>(
                    "state",
                    |m: &NVMEStoragePhysical| { &m.state },
                    |m: &mut NVMEStoragePhysical| { &mut m.state },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "serial_number",
                    |m: &NVMEStoragePhysical| { &m.serial_number },
                    |m: &mut NVMEStoragePhysical| { &mut m.serial_number },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "model",
                    |m: &NVMEStoragePhysical| { &m.model },
                    |m: &mut NVMEStoragePhysical| { &mut m.model },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "firmware_revision",
                    |m: &NVMEStoragePhysical| { &m.firmware_revision },
                    |m: &mut NVMEStoragePhysical| { &mut m.firmware_revision },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "vendor_id",
                    |m: &NVMEStoragePhysical| { &m.vendor_id },
                    |m: &mut NVMEStoragePhysical| { &mut m.vendor_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "sub_system_id",
                    |m: &NVMEStoragePhysical| { &m.sub_system_id },
                    |m: &mut NVMEStoragePhysical| { &mut m.sub_system_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "total_capacity",
                    |m: &NVMEStoragePhysical| { &m.total_capacity },
                    |m: &mut NVMEStoragePhysical| { &mut m.total_capacity },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "bus_info",
                    |m: &NVMEStoragePhysical| { &m.bus_info },
                    |m: &mut NVMEStoragePhysical| { &mut m.bus_info },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<NVMEStoragePhysical>(
                    "NVMEStoragePhysical",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static NVMEStoragePhysical {
        static mut instance: ::protobuf::lazy::Lazy<NVMEStoragePhysical> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NVMEStoragePhysical,
        };
        unsafe {
            instance.get(NVMEStoragePhysical::new)
        }
    }
}

impl ::protobuf::Clear for NVMEStoragePhysical {
    fn clear(&mut self) {
        self.state = super::state::HWState::HW_STATE_SAME;
        self.serial_number.clear();
        self.model.clear();
        self.firmware_revision.clear();
        self.vendor_id.clear();
        self.sub_system_id.clear();
        self.total_capacity.clear();
        self.bus_info.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NVMEStoragePhysical {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NVMEStoragePhysical {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NVMEStorageLogical {
    // message fields
    pub serial_number: ::std::string::String,
    pub node_id: ::std::string::String,
    pub used_capacity: u32,
    pub lba_size: u32,
    pub partitions: ::protobuf::RepeatedField<StoragePartition>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NVMEStorageLogical {
    fn default() -> &'a NVMEStorageLogical {
        <NVMEStorageLogical as ::protobuf::Message>::default_instance()
    }
}

impl NVMEStorageLogical {
    pub fn new() -> NVMEStorageLogical {
        ::std::default::Default::default()
    }

    // string serial_number = 1;


    pub fn get_serial_number(&self) -> &str {
        &self.serial_number
    }
    pub fn clear_serial_number(&mut self) {
        self.serial_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        &mut self.serial_number
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.serial_number, ::std::string::String::new())
    }

    // string node_id = 2;


    pub fn get_node_id(&self) -> &str {
        &self.node_id
    }
    pub fn clear_node_id(&mut self) {
        self.node_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_node_id(&mut self, v: ::std::string::String) {
        self.node_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_node_id(&mut self) -> &mut ::std::string::String {
        &mut self.node_id
    }

    // Take field
    pub fn take_node_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.node_id, ::std::string::String::new())
    }

    // uint32 used_capacity = 3;


    pub fn get_used_capacity(&self) -> u32 {
        self.used_capacity
    }
    pub fn clear_used_capacity(&mut self) {
        self.used_capacity = 0;
    }

    // Param is passed by value, moved
    pub fn set_used_capacity(&mut self, v: u32) {
        self.used_capacity = v;
    }

    // uint32 lba_size = 4;


    pub fn get_lba_size(&self) -> u32 {
        self.lba_size
    }
    pub fn clear_lba_size(&mut self) {
        self.lba_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_lba_size(&mut self, v: u32) {
        self.lba_size = v;
    }

    // repeated .hp.xy.sunrise_v1.hw.StoragePartition partitions = 5;


    pub fn get_partitions(&self) -> &[StoragePartition] {
        &self.partitions
    }
    pub fn clear_partitions(&mut self) {
        self.partitions.clear();
    }

    // Param is passed by value, moved
    pub fn set_partitions(&mut self, v: ::protobuf::RepeatedField<StoragePartition>) {
        self.partitions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_partitions(&mut self) -> &mut ::protobuf::RepeatedField<StoragePartition> {
        &mut self.partitions
    }

    // Take field
    pub fn take_partitions(&mut self) -> ::protobuf::RepeatedField<StoragePartition> {
        ::std::mem::replace(&mut self.partitions, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for NVMEStorageLogical {
    fn is_initialized(&self) -> bool {
        for v in &self.partitions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.serial_number)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.node_id)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.used_capacity = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.lba_size = tmp;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.partitions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.serial_number.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.serial_number);
        }
        if !self.node_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.node_id);
        }
        if self.used_capacity != 0 {
            my_size += ::protobuf::rt::value_size(3, self.used_capacity, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.lba_size != 0 {
            my_size += ::protobuf::rt::value_size(4, self.lba_size, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.partitions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.serial_number.is_empty() {
            os.write_string(1, &self.serial_number)?;
        }
        if !self.node_id.is_empty() {
            os.write_string(2, &self.node_id)?;
        }
        if self.used_capacity != 0 {
            os.write_uint32(3, self.used_capacity)?;
        }
        if self.lba_size != 0 {
            os.write_uint32(4, self.lba_size)?;
        }
        for v in &self.partitions {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NVMEStorageLogical {
        NVMEStorageLogical::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "serial_number",
                    |m: &NVMEStorageLogical| { &m.serial_number },
                    |m: &mut NVMEStorageLogical| { &mut m.serial_number },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "node_id",
                    |m: &NVMEStorageLogical| { &m.node_id },
                    |m: &mut NVMEStorageLogical| { &mut m.node_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "used_capacity",
                    |m: &NVMEStorageLogical| { &m.used_capacity },
                    |m: &mut NVMEStorageLogical| { &mut m.used_capacity },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "lba_size",
                    |m: &NVMEStorageLogical| { &m.lba_size },
                    |m: &mut NVMEStorageLogical| { &mut m.lba_size },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<StoragePartition>>(
                    "partitions",
                    |m: &NVMEStorageLogical| { &m.partitions },
                    |m: &mut NVMEStorageLogical| { &mut m.partitions },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<NVMEStorageLogical>(
                    "NVMEStorageLogical",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static NVMEStorageLogical {
        static mut instance: ::protobuf::lazy::Lazy<NVMEStorageLogical> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NVMEStorageLogical,
        };
        unsafe {
            instance.get(NVMEStorageLogical::new)
        }
    }
}

impl ::protobuf::Clear for NVMEStorageLogical {
    fn clear(&mut self) {
        self.serial_number.clear();
        self.node_id.clear();
        self.used_capacity = 0;
        self.lba_size = 0;
        self.partitions.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NVMEStorageLogical {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NVMEStorageLogical {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StoragePartition {
    // message fields
    pub number: u32,
    pub size: u32,
    pub file_system: ::std::string::String,
    pub name: ::std::string::String,
    pub flags: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StoragePartition {
    fn default() -> &'a StoragePartition {
        <StoragePartition as ::protobuf::Message>::default_instance()
    }
}

impl StoragePartition {
    pub fn new() -> StoragePartition {
        ::std::default::Default::default()
    }

    // uint32 number = 1;


    pub fn get_number(&self) -> u32 {
        self.number
    }
    pub fn clear_number(&mut self) {
        self.number = 0;
    }

    // Param is passed by value, moved
    pub fn set_number(&mut self, v: u32) {
        self.number = v;
    }

    // uint32 size = 2;


    pub fn get_size(&self) -> u32 {
        self.size
    }
    pub fn clear_size(&mut self) {
        self.size = 0;
    }

    // Param is passed by value, moved
    pub fn set_size(&mut self, v: u32) {
        self.size = v;
    }

    // string file_system = 3;


    pub fn get_file_system(&self) -> &str {
        &self.file_system
    }
    pub fn clear_file_system(&mut self) {
        self.file_system.clear();
    }

    // Param is passed by value, moved
    pub fn set_file_system(&mut self, v: ::std::string::String) {
        self.file_system = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_system(&mut self) -> &mut ::std::string::String {
        &mut self.file_system
    }

    // Take field
    pub fn take_file_system(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.file_system, ::std::string::String::new())
    }

    // string name = 4;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string flags = 5;


    pub fn get_flags(&self) -> &str {
        &self.flags
    }
    pub fn clear_flags(&mut self) {
        self.flags.clear();
    }

    // Param is passed by value, moved
    pub fn set_flags(&mut self, v: ::std::string::String) {
        self.flags = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_flags(&mut self) -> &mut ::std::string::String {
        &mut self.flags
    }

    // Take field
    pub fn take_flags(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.flags, ::std::string::String::new())
    }
}

impl ::protobuf::Message for StoragePartition {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.number = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.size = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.file_system)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.flags)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.number != 0 {
            my_size += ::protobuf::rt::value_size(1, self.number, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.size != 0 {
            my_size += ::protobuf::rt::value_size(2, self.size, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.file_system.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.file_system);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.name);
        }
        if !self.flags.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.flags);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.number != 0 {
            os.write_uint32(1, self.number)?;
        }
        if self.size != 0 {
            os.write_uint32(2, self.size)?;
        }
        if !self.file_system.is_empty() {
            os.write_string(3, &self.file_system)?;
        }
        if !self.name.is_empty() {
            os.write_string(4, &self.name)?;
        }
        if !self.flags.is_empty() {
            os.write_string(5, &self.flags)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StoragePartition {
        StoragePartition::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "number",
                    |m: &StoragePartition| { &m.number },
                    |m: &mut StoragePartition| { &mut m.number },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "size",
                    |m: &StoragePartition| { &m.size },
                    |m: &mut StoragePartition| { &mut m.size },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "file_system",
                    |m: &StoragePartition| { &m.file_system },
                    |m: &mut StoragePartition| { &mut m.file_system },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &StoragePartition| { &m.name },
                    |m: &mut StoragePartition| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "flags",
                    |m: &StoragePartition| { &m.flags },
                    |m: &mut StoragePartition| { &mut m.flags },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<StoragePartition>(
                    "StoragePartition",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StoragePartition {
        static mut instance: ::protobuf::lazy::Lazy<StoragePartition> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StoragePartition,
        };
        unsafe {
            instance.get(StoragePartition::new)
        }
    }
}

impl ::protobuf::Clear for StoragePartition {
    fn clear(&mut self) {
        self.number = 0;
        self.size = 0;
        self.file_system.clear();
        self.name.clear();
        self.flags.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StoragePartition {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StoragePartition {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NVMESmartLog {
    // message fields
    pub serial_number: ::std::string::String,
    pub nvme_version: ::std::string::String,
    pub critical_warning: u32,
    pub endurance_critical_warning: u32,
    pub available_spare: u32,
    pub available_spare_threshold: u32,
    pub percentage_used: u32,
    pub data_units_read: u32,
    pub data_units_written: u64,
    pub host_read_commands: u64,
    pub host_write_commands: u64,
    pub controller_busy_time: u64,
    pub power_cycles: u32,
    pub power_on_hours: u32,
    pub unsafe_shutdowns: u32,
    pub media_errors: u32,
    pub num_err_log_entries: u32,
    pub warning_temperature_threshold: u32,
    pub critical_composite_temperature_threshold: u32,
    pub warning_temperature_time: u32,
    pub critical_composite_temperature_time: u32,
    pub temperature_sensor: ::std::vec::Vec<u32>,
    pub thermal_management_trans_count: ::std::vec::Vec<u32>,
    pub thermal_management_total_time: ::std::vec::Vec<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NVMESmartLog {
    fn default() -> &'a NVMESmartLog {
        <NVMESmartLog as ::protobuf::Message>::default_instance()
    }
}

impl NVMESmartLog {
    pub fn new() -> NVMESmartLog {
        ::std::default::Default::default()
    }

    // string serial_number = 1;


    pub fn get_serial_number(&self) -> &str {
        &self.serial_number
    }
    pub fn clear_serial_number(&mut self) {
        self.serial_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        &mut self.serial_number
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.serial_number, ::std::string::String::new())
    }

    // string nvme_version = 2;


    pub fn get_nvme_version(&self) -> &str {
        &self.nvme_version
    }
    pub fn clear_nvme_version(&mut self) {
        self.nvme_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_nvme_version(&mut self, v: ::std::string::String) {
        self.nvme_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nvme_version(&mut self) -> &mut ::std::string::String {
        &mut self.nvme_version
    }

    // Take field
    pub fn take_nvme_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.nvme_version, ::std::string::String::new())
    }

    // uint32 critical_warning = 3;


    pub fn get_critical_warning(&self) -> u32 {
        self.critical_warning
    }
    pub fn clear_critical_warning(&mut self) {
        self.critical_warning = 0;
    }

    // Param is passed by value, moved
    pub fn set_critical_warning(&mut self, v: u32) {
        self.critical_warning = v;
    }

    // uint32 endurance_critical_warning = 4;


    pub fn get_endurance_critical_warning(&self) -> u32 {
        self.endurance_critical_warning
    }
    pub fn clear_endurance_critical_warning(&mut self) {
        self.endurance_critical_warning = 0;
    }

    // Param is passed by value, moved
    pub fn set_endurance_critical_warning(&mut self, v: u32) {
        self.endurance_critical_warning = v;
    }

    // uint32 available_spare = 5;


    pub fn get_available_spare(&self) -> u32 {
        self.available_spare
    }
    pub fn clear_available_spare(&mut self) {
        self.available_spare = 0;
    }

    // Param is passed by value, moved
    pub fn set_available_spare(&mut self, v: u32) {
        self.available_spare = v;
    }

    // uint32 available_spare_threshold = 6;


    pub fn get_available_spare_threshold(&self) -> u32 {
        self.available_spare_threshold
    }
    pub fn clear_available_spare_threshold(&mut self) {
        self.available_spare_threshold = 0;
    }

    // Param is passed by value, moved
    pub fn set_available_spare_threshold(&mut self, v: u32) {
        self.available_spare_threshold = v;
    }

    // uint32 percentage_used = 7;


    pub fn get_percentage_used(&self) -> u32 {
        self.percentage_used
    }
    pub fn clear_percentage_used(&mut self) {
        self.percentage_used = 0;
    }

    // Param is passed by value, moved
    pub fn set_percentage_used(&mut self, v: u32) {
        self.percentage_used = v;
    }

    // uint32 data_units_read = 8;


    pub fn get_data_units_read(&self) -> u32 {
        self.data_units_read
    }
    pub fn clear_data_units_read(&mut self) {
        self.data_units_read = 0;
    }

    // Param is passed by value, moved
    pub fn set_data_units_read(&mut self, v: u32) {
        self.data_units_read = v;
    }

    // uint64 data_units_written = 9;


    pub fn get_data_units_written(&self) -> u64 {
        self.data_units_written
    }
    pub fn clear_data_units_written(&mut self) {
        self.data_units_written = 0;
    }

    // Param is passed by value, moved
    pub fn set_data_units_written(&mut self, v: u64) {
        self.data_units_written = v;
    }

    // uint64 host_read_commands = 10;


    pub fn get_host_read_commands(&self) -> u64 {
        self.host_read_commands
    }
    pub fn clear_host_read_commands(&mut self) {
        self.host_read_commands = 0;
    }

    // Param is passed by value, moved
    pub fn set_host_read_commands(&mut self, v: u64) {
        self.host_read_commands = v;
    }

    // uint64 host_write_commands = 11;


    pub fn get_host_write_commands(&self) -> u64 {
        self.host_write_commands
    }
    pub fn clear_host_write_commands(&mut self) {
        self.host_write_commands = 0;
    }

    // Param is passed by value, moved
    pub fn set_host_write_commands(&mut self, v: u64) {
        self.host_write_commands = v;
    }

    // uint64 controller_busy_time = 12;


    pub fn get_controller_busy_time(&self) -> u64 {
        self.controller_busy_time
    }
    pub fn clear_controller_busy_time(&mut self) {
        self.controller_busy_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_controller_busy_time(&mut self, v: u64) {
        self.controller_busy_time = v;
    }

    // uint32 power_cycles = 13;


    pub fn get_power_cycles(&self) -> u32 {
        self.power_cycles
    }
    pub fn clear_power_cycles(&mut self) {
        self.power_cycles = 0;
    }

    // Param is passed by value, moved
    pub fn set_power_cycles(&mut self, v: u32) {
        self.power_cycles = v;
    }

    // uint32 power_on_hours = 14;


    pub fn get_power_on_hours(&self) -> u32 {
        self.power_on_hours
    }
    pub fn clear_power_on_hours(&mut self) {
        self.power_on_hours = 0;
    }

    // Param is passed by value, moved
    pub fn set_power_on_hours(&mut self, v: u32) {
        self.power_on_hours = v;
    }

    // uint32 unsafe_shutdowns = 15;


    pub fn get_unsafe_shutdowns(&self) -> u32 {
        self.unsafe_shutdowns
    }
    pub fn clear_unsafe_shutdowns(&mut self) {
        self.unsafe_shutdowns = 0;
    }

    // Param is passed by value, moved
    pub fn set_unsafe_shutdowns(&mut self, v: u32) {
        self.unsafe_shutdowns = v;
    }

    // uint32 media_errors = 16;


    pub fn get_media_errors(&self) -> u32 {
        self.media_errors
    }
    pub fn clear_media_errors(&mut self) {
        self.media_errors = 0;
    }

    // Param is passed by value, moved
    pub fn set_media_errors(&mut self, v: u32) {
        self.media_errors = v;
    }

    // uint32 num_err_log_entries = 17;


    pub fn get_num_err_log_entries(&self) -> u32 {
        self.num_err_log_entries
    }
    pub fn clear_num_err_log_entries(&mut self) {
        self.num_err_log_entries = 0;
    }

    // Param is passed by value, moved
    pub fn set_num_err_log_entries(&mut self, v: u32) {
        self.num_err_log_entries = v;
    }

    // uint32 warning_temperature_threshold = 18;


    pub fn get_warning_temperature_threshold(&self) -> u32 {
        self.warning_temperature_threshold
    }
    pub fn clear_warning_temperature_threshold(&mut self) {
        self.warning_temperature_threshold = 0;
    }

    // Param is passed by value, moved
    pub fn set_warning_temperature_threshold(&mut self, v: u32) {
        self.warning_temperature_threshold = v;
    }

    // uint32 critical_composite_temperature_threshold = 19;


    pub fn get_critical_composite_temperature_threshold(&self) -> u32 {
        self.critical_composite_temperature_threshold
    }
    pub fn clear_critical_composite_temperature_threshold(&mut self) {
        self.critical_composite_temperature_threshold = 0;
    }

    // Param is passed by value, moved
    pub fn set_critical_composite_temperature_threshold(&mut self, v: u32) {
        self.critical_composite_temperature_threshold = v;
    }

    // uint32 warning_temperature_time = 20;


    pub fn get_warning_temperature_time(&self) -> u32 {
        self.warning_temperature_time
    }
    pub fn clear_warning_temperature_time(&mut self) {
        self.warning_temperature_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_warning_temperature_time(&mut self, v: u32) {
        self.warning_temperature_time = v;
    }

    // uint32 critical_composite_temperature_time = 21;


    pub fn get_critical_composite_temperature_time(&self) -> u32 {
        self.critical_composite_temperature_time
    }
    pub fn clear_critical_composite_temperature_time(&mut self) {
        self.critical_composite_temperature_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_critical_composite_temperature_time(&mut self, v: u32) {
        self.critical_composite_temperature_time = v;
    }

    // repeated uint32 temperature_sensor = 22;


    pub fn get_temperature_sensor(&self) -> &[u32] {
        &self.temperature_sensor
    }
    pub fn clear_temperature_sensor(&mut self) {
        self.temperature_sensor.clear();
    }

    // Param is passed by value, moved
    pub fn set_temperature_sensor(&mut self, v: ::std::vec::Vec<u32>) {
        self.temperature_sensor = v;
    }

    // Mutable pointer to the field.
    pub fn mut_temperature_sensor(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.temperature_sensor
    }

    // Take field
    pub fn take_temperature_sensor(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.temperature_sensor, ::std::vec::Vec::new())
    }

    // repeated uint32 thermal_management_trans_count = 23;


    pub fn get_thermal_management_trans_count(&self) -> &[u32] {
        &self.thermal_management_trans_count
    }
    pub fn clear_thermal_management_trans_count(&mut self) {
        self.thermal_management_trans_count.clear();
    }

    // Param is passed by value, moved
    pub fn set_thermal_management_trans_count(&mut self, v: ::std::vec::Vec<u32>) {
        self.thermal_management_trans_count = v;
    }

    // Mutable pointer to the field.
    pub fn mut_thermal_management_trans_count(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.thermal_management_trans_count
    }

    // Take field
    pub fn take_thermal_management_trans_count(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.thermal_management_trans_count, ::std::vec::Vec::new())
    }

    // repeated uint32 thermal_management_total_time = 24;


    pub fn get_thermal_management_total_time(&self) -> &[u32] {
        &self.thermal_management_total_time
    }
    pub fn clear_thermal_management_total_time(&mut self) {
        self.thermal_management_total_time.clear();
    }

    // Param is passed by value, moved
    pub fn set_thermal_management_total_time(&mut self, v: ::std::vec::Vec<u32>) {
        self.thermal_management_total_time = v;
    }

    // Mutable pointer to the field.
    pub fn mut_thermal_management_total_time(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.thermal_management_total_time
    }

    // Take field
    pub fn take_thermal_management_total_time(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.thermal_management_total_time, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for NVMESmartLog {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.serial_number)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.nvme_version)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.critical_warning = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.endurance_critical_warning = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.available_spare = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.available_spare_threshold = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.percentage_used = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.data_units_read = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.data_units_written = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.host_read_commands = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.host_write_commands = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.controller_busy_time = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.power_cycles = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.power_on_hours = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.unsafe_shutdowns = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.media_errors = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.num_err_log_entries = tmp;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.warning_temperature_threshold = tmp;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.critical_composite_temperature_threshold = tmp;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.warning_temperature_time = tmp;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.critical_composite_temperature_time = tmp;
                },
                22 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.temperature_sensor)?;
                },
                23 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.thermal_management_trans_count)?;
                },
                24 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.thermal_management_total_time)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.serial_number.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.serial_number);
        }
        if !self.nvme_version.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.nvme_version);
        }
        if self.critical_warning != 0 {
            my_size += ::protobuf::rt::value_size(3, self.critical_warning, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.endurance_critical_warning != 0 {
            my_size += ::protobuf::rt::value_size(4, self.endurance_critical_warning, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.available_spare != 0 {
            my_size += ::protobuf::rt::value_size(5, self.available_spare, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.available_spare_threshold != 0 {
            my_size += ::protobuf::rt::value_size(6, self.available_spare_threshold, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.percentage_used != 0 {
            my_size += ::protobuf::rt::value_size(7, self.percentage_used, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.data_units_read != 0 {
            my_size += ::protobuf::rt::value_size(8, self.data_units_read, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.data_units_written != 0 {
            my_size += ::protobuf::rt::value_size(9, self.data_units_written, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.host_read_commands != 0 {
            my_size += ::protobuf::rt::value_size(10, self.host_read_commands, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.host_write_commands != 0 {
            my_size += ::protobuf::rt::value_size(11, self.host_write_commands, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.controller_busy_time != 0 {
            my_size += ::protobuf::rt::value_size(12, self.controller_busy_time, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.power_cycles != 0 {
            my_size += ::protobuf::rt::value_size(13, self.power_cycles, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.power_on_hours != 0 {
            my_size += ::protobuf::rt::value_size(14, self.power_on_hours, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.unsafe_shutdowns != 0 {
            my_size += ::protobuf::rt::value_size(15, self.unsafe_shutdowns, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.media_errors != 0 {
            my_size += ::protobuf::rt::value_size(16, self.media_errors, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.num_err_log_entries != 0 {
            my_size += ::protobuf::rt::value_size(17, self.num_err_log_entries, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.warning_temperature_threshold != 0 {
            my_size += ::protobuf::rt::value_size(18, self.warning_temperature_threshold, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.critical_composite_temperature_threshold != 0 {
            my_size += ::protobuf::rt::value_size(19, self.critical_composite_temperature_threshold, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.warning_temperature_time != 0 {
            my_size += ::protobuf::rt::value_size(20, self.warning_temperature_time, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.critical_composite_temperature_time != 0 {
            my_size += ::protobuf::rt::value_size(21, self.critical_composite_temperature_time, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.temperature_sensor {
            my_size += ::protobuf::rt::value_size(22, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.thermal_management_trans_count {
            my_size += ::protobuf::rt::value_size(23, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.thermal_management_total_time {
            my_size += ::protobuf::rt::value_size(24, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.serial_number.is_empty() {
            os.write_string(1, &self.serial_number)?;
        }
        if !self.nvme_version.is_empty() {
            os.write_string(2, &self.nvme_version)?;
        }
        if self.critical_warning != 0 {
            os.write_uint32(3, self.critical_warning)?;
        }
        if self.endurance_critical_warning != 0 {
            os.write_uint32(4, self.endurance_critical_warning)?;
        }
        if self.available_spare != 0 {
            os.write_uint32(5, self.available_spare)?;
        }
        if self.available_spare_threshold != 0 {
            os.write_uint32(6, self.available_spare_threshold)?;
        }
        if self.percentage_used != 0 {
            os.write_uint32(7, self.percentage_used)?;
        }
        if self.data_units_read != 0 {
            os.write_uint32(8, self.data_units_read)?;
        }
        if self.data_units_written != 0 {
            os.write_uint64(9, self.data_units_written)?;
        }
        if self.host_read_commands != 0 {
            os.write_uint64(10, self.host_read_commands)?;
        }
        if self.host_write_commands != 0 {
            os.write_uint64(11, self.host_write_commands)?;
        }
        if self.controller_busy_time != 0 {
            os.write_uint64(12, self.controller_busy_time)?;
        }
        if self.power_cycles != 0 {
            os.write_uint32(13, self.power_cycles)?;
        }
        if self.power_on_hours != 0 {
            os.write_uint32(14, self.power_on_hours)?;
        }
        if self.unsafe_shutdowns != 0 {
            os.write_uint32(15, self.unsafe_shutdowns)?;
        }
        if self.media_errors != 0 {
            os.write_uint32(16, self.media_errors)?;
        }
        if self.num_err_log_entries != 0 {
            os.write_uint32(17, self.num_err_log_entries)?;
        }
        if self.warning_temperature_threshold != 0 {
            os.write_uint32(18, self.warning_temperature_threshold)?;
        }
        if self.critical_composite_temperature_threshold != 0 {
            os.write_uint32(19, self.critical_composite_temperature_threshold)?;
        }
        if self.warning_temperature_time != 0 {
            os.write_uint32(20, self.warning_temperature_time)?;
        }
        if self.critical_composite_temperature_time != 0 {
            os.write_uint32(21, self.critical_composite_temperature_time)?;
        }
        for v in &self.temperature_sensor {
            os.write_uint32(22, *v)?;
        };
        for v in &self.thermal_management_trans_count {
            os.write_uint32(23, *v)?;
        };
        for v in &self.thermal_management_total_time {
            os.write_uint32(24, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NVMESmartLog {
        NVMESmartLog::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "serial_number",
                    |m: &NVMESmartLog| { &m.serial_number },
                    |m: &mut NVMESmartLog| { &mut m.serial_number },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "nvme_version",
                    |m: &NVMESmartLog| { &m.nvme_version },
                    |m: &mut NVMESmartLog| { &mut m.nvme_version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "critical_warning",
                    |m: &NVMESmartLog| { &m.critical_warning },
                    |m: &mut NVMESmartLog| { &mut m.critical_warning },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "endurance_critical_warning",
                    |m: &NVMESmartLog| { &m.endurance_critical_warning },
                    |m: &mut NVMESmartLog| { &mut m.endurance_critical_warning },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "available_spare",
                    |m: &NVMESmartLog| { &m.available_spare },
                    |m: &mut NVMESmartLog| { &mut m.available_spare },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "available_spare_threshold",
                    |m: &NVMESmartLog| { &m.available_spare_threshold },
                    |m: &mut NVMESmartLog| { &mut m.available_spare_threshold },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "percentage_used",
                    |m: &NVMESmartLog| { &m.percentage_used },
                    |m: &mut NVMESmartLog| { &mut m.percentage_used },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "data_units_read",
                    |m: &NVMESmartLog| { &m.data_units_read },
                    |m: &mut NVMESmartLog| { &mut m.data_units_read },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "data_units_written",
                    |m: &NVMESmartLog| { &m.data_units_written },
                    |m: &mut NVMESmartLog| { &mut m.data_units_written },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "host_read_commands",
                    |m: &NVMESmartLog| { &m.host_read_commands },
                    |m: &mut NVMESmartLog| { &mut m.host_read_commands },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "host_write_commands",
                    |m: &NVMESmartLog| { &m.host_write_commands },
                    |m: &mut NVMESmartLog| { &mut m.host_write_commands },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "controller_busy_time",
                    |m: &NVMESmartLog| { &m.controller_busy_time },
                    |m: &mut NVMESmartLog| { &mut m.controller_busy_time },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "power_cycles",
                    |m: &NVMESmartLog| { &m.power_cycles },
                    |m: &mut NVMESmartLog| { &mut m.power_cycles },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "power_on_hours",
                    |m: &NVMESmartLog| { &m.power_on_hours },
                    |m: &mut NVMESmartLog| { &mut m.power_on_hours },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "unsafe_shutdowns",
                    |m: &NVMESmartLog| { &m.unsafe_shutdowns },
                    |m: &mut NVMESmartLog| { &mut m.unsafe_shutdowns },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "media_errors",
                    |m: &NVMESmartLog| { &m.media_errors },
                    |m: &mut NVMESmartLog| { &mut m.media_errors },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "num_err_log_entries",
                    |m: &NVMESmartLog| { &m.num_err_log_entries },
                    |m: &mut NVMESmartLog| { &mut m.num_err_log_entries },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "warning_temperature_threshold",
                    |m: &NVMESmartLog| { &m.warning_temperature_threshold },
                    |m: &mut NVMESmartLog| { &mut m.warning_temperature_threshold },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "critical_composite_temperature_threshold",
                    |m: &NVMESmartLog| { &m.critical_composite_temperature_threshold },
                    |m: &mut NVMESmartLog| { &mut m.critical_composite_temperature_threshold },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "warning_temperature_time",
                    |m: &NVMESmartLog| { &m.warning_temperature_time },
                    |m: &mut NVMESmartLog| { &mut m.warning_temperature_time },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "critical_composite_temperature_time",
                    |m: &NVMESmartLog| { &m.critical_composite_temperature_time },
                    |m: &mut NVMESmartLog| { &mut m.critical_composite_temperature_time },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "temperature_sensor",
                    |m: &NVMESmartLog| { &m.temperature_sensor },
                    |m: &mut NVMESmartLog| { &mut m.temperature_sensor },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "thermal_management_trans_count",
                    |m: &NVMESmartLog| { &m.thermal_management_trans_count },
                    |m: &mut NVMESmartLog| { &mut m.thermal_management_trans_count },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "thermal_management_total_time",
                    |m: &NVMESmartLog| { &m.thermal_management_total_time },
                    |m: &mut NVMESmartLog| { &mut m.thermal_management_total_time },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<NVMESmartLog>(
                    "NVMESmartLog",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static NVMESmartLog {
        static mut instance: ::protobuf::lazy::Lazy<NVMESmartLog> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NVMESmartLog,
        };
        unsafe {
            instance.get(NVMESmartLog::new)
        }
    }
}

impl ::protobuf::Clear for NVMESmartLog {
    fn clear(&mut self) {
        self.serial_number.clear();
        self.nvme_version.clear();
        self.critical_warning = 0;
        self.endurance_critical_warning = 0;
        self.available_spare = 0;
        self.available_spare_threshold = 0;
        self.percentage_used = 0;
        self.data_units_read = 0;
        self.data_units_written = 0;
        self.host_read_commands = 0;
        self.host_write_commands = 0;
        self.controller_busy_time = 0;
        self.power_cycles = 0;
        self.power_on_hours = 0;
        self.unsafe_shutdowns = 0;
        self.media_errors = 0;
        self.num_err_log_entries = 0;
        self.warning_temperature_threshold = 0;
        self.critical_composite_temperature_threshold = 0;
        self.warning_temperature_time = 0;
        self.critical_composite_temperature_time = 0;
        self.temperature_sensor.clear();
        self.thermal_management_trans_count.clear();
        self.thermal_management_total_time.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NVMESmartLog {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NVMESmartLog {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!hp/xy/sunrise_v1/hw/storage.proto\x12\x13hp.xy.sunrise_v1.hw\x1a\x1ch\
    p/xy/sunrise_v1/state.proto\"\xb1\x02\n\x13NVMEStoragePhysical\x12/\n\
    \x05state\x18\x01\x20\x01(\x0e2\x19.hp.xy.sunrise_v1.HWStateR\x05state\
    \x12#\n\rserial_number\x18\x02\x20\x01(\tR\x0cserialNumber\x12\x14\n\x05\
    model\x18\x03\x20\x01(\tR\x05model\x12+\n\x11firmware_revision\x18\x04\
    \x20\x01(\tR\x10firmwareRevision\x12\x1b\n\tvendor_id\x18\x05\x20\x01(\t\
    R\x08vendorId\x12\"\n\rsub_system_id\x18\x07\x20\x01(\tR\x0bsubSystemId\
    \x12%\n\x0etotal_capacity\x18\x08\x20\x01(\tR\rtotalCapacity\x12\x19\n\
    \x08bus_info\x18\t\x20\x01(\tR\x07busInfo\"\xd9\x01\n\x12NVMEStorageLogi\
    cal\x12#\n\rserial_number\x18\x01\x20\x01(\tR\x0cserialNumber\x12\x17\n\
    \x07node_id\x18\x02\x20\x01(\tR\x06nodeId\x12#\n\rused_capacity\x18\x03\
    \x20\x01(\rR\x0cusedCapacity\x12\x19\n\x08lba_size\x18\x04\x20\x01(\rR\
    \x07lbaSize\x12E\n\npartitions\x18\x05\x20\x03(\x0b2%.hp.xy.sunrise_v1.h\
    w.StoragePartitionR\npartitions\"\x89\x01\n\x10StoragePartition\x12\x16\
    \n\x06number\x18\x01\x20\x01(\rR\x06number\x12\x12\n\x04size\x18\x02\x20\
    \x01(\rR\x04size\x12\x1f\n\x0bfile_system\x18\x03\x20\x01(\tR\nfileSyste\
    m\x12\x12\n\x04name\x18\x04\x20\x01(\tR\x04name\x12\x14\n\x05flags\x18\
    \x05\x20\x01(\tR\x05flags\"\xd6\t\n\x0cNVMESmartLog\x12#\n\rserial_numbe\
    r\x18\x01\x20\x01(\tR\x0cserialNumber\x12!\n\x0cnvme_version\x18\x02\x20\
    \x01(\tR\x0bnvmeVersion\x12)\n\x10critical_warning\x18\x03\x20\x01(\rR\
    \x0fcriticalWarning\x12<\n\x1aendurance_critical_warning\x18\x04\x20\x01\
    (\rR\x18enduranceCriticalWarning\x12'\n\x0favailable_spare\x18\x05\x20\
    \x01(\rR\x0eavailableSpare\x12:\n\x19available_spare_threshold\x18\x06\
    \x20\x01(\rR\x17availableSpareThreshold\x12'\n\x0fpercentage_used\x18\
    \x07\x20\x01(\rR\x0epercentageUsed\x12&\n\x0fdata_units_read\x18\x08\x20\
    \x01(\rR\rdataUnitsRead\x12,\n\x12data_units_written\x18\t\x20\x01(\x04R\
    \x10dataUnitsWritten\x12,\n\x12host_read_commands\x18\n\x20\x01(\x04R\
    \x10hostReadCommands\x12.\n\x13host_write_commands\x18\x0b\x20\x01(\x04R\
    \x11hostWriteCommands\x120\n\x14controller_busy_time\x18\x0c\x20\x01(\
    \x04R\x12controllerBusyTime\x12!\n\x0cpower_cycles\x18\r\x20\x01(\rR\x0b\
    powerCycles\x12$\n\x0epower_on_hours\x18\x0e\x20\x01(\rR\x0cpowerOnHours\
    \x12)\n\x10unsafe_shutdowns\x18\x0f\x20\x01(\rR\x0funsafeShutdowns\x12!\
    \n\x0cmedia_errors\x18\x10\x20\x01(\rR\x0bmediaErrors\x12-\n\x13num_err_\
    log_entries\x18\x11\x20\x01(\rR\x10numErrLogEntries\x12B\n\x1dwarning_te\
    mperature_threshold\x18\x12\x20\x01(\rR\x1bwarningTemperatureThreshold\
    \x12W\n(critical_composite_temperature_threshold\x18\x13\x20\x01(\rR%cri\
    ticalCompositeTemperatureThreshold\x128\n\x18warning_temperature_time\
    \x18\x14\x20\x01(\rR\x16warningTemperatureTime\x12M\n#critical_composite\
    _temperature_time\x18\x15\x20\x01(\rR\x20criticalCompositeTemperatureTim\
    e\x12-\n\x12temperature_sensor\x18\x16\x20\x03(\rR\x11temperatureSensor\
    \x12C\n\x1ethermal_management_trans_count\x18\x17\x20\x03(\rR\x1bthermal\
    ManagementTransCount\x12A\n\x1dthermal_management_total_time\x18\x18\x20\
    \x03(\rR\x1athermalManagementTotalTimeJ\xb83\n\x07\x12\x05\0\0\xf3\x01\
    \x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x1c\n\
    \t\n\x02\x03\0\x12\x03\x04\0&\n\n\n\x02\x04\0\x12\x04\x07\0_\x01\n\n\n\
    \x03\x04\0\x01\x12\x03\x07\x08\x1b\n\xa0\x02\n\x04\x04\0\x02\0\x12\x03\
    \x0f\x04\x16\x1a\x92\x02*\r\n\x20HW\x20State\r\n\x20\r\n\x20HW_STATE_ADD\
    ED\x20-\x20The\x20HW\x20component\x20was\x20added\x20or\x20first\x20dete\
    cted\x20(all\x20data\x20fields\x20are\x20populated)\r\n\x20HW_STATE_REMO\
    VED\x20-\x20The\x20HW\x20component\x20was\x20removed\x20or\x20not\x20det\
    ected\x20anymore\x20(If\x20there\x20are\x20Primary\x20Keys\x20defined\
    \x20send\x20them\x20only,\x20otherwise\x20populate\x20all\x20data\x20fie\
    lds)\r\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x0f\x04\x0b\n\x0c\n\x05\x04\
    \0\x02\0\x01\x12\x03\x0f\x0c\x11\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0f\
    \x14\x15\n\xfe\x01\n\x04\x04\0\x02\x01\x12\x03\x1b\x04\x1d\x1a\xf0\x01*\
    \r\n\x20Drive\x20Serial\x20Number\x20(PRIMARY\x20KEY)\r\n\x20Serialnumbe\
    r\x20for\x20the\x20NVM\x20subsystem\x20that\x20is\x20assigned\x20by\x20t\
    he\x20vendor\r\n\x20\r\n\x20Example:\x20S4P4NF0M522988Y\r\n\x20\r\n\x20S\
    ource:\r\n\x20*\x20Windows:\x20NVME\x20interface\x20-\x20Identify\x20Con\
    troller\r\n\x20*\x20Linux:\x20nvme\x20list\x20(nvme-cli\x20package)\r\n\
    \n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x1b\x04\n\n\x0c\n\x05\x04\0\x02\
    \x01\x01\x12\x03\x1b\x0b\x18\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x1b\
    \x1b\x1c\n\xe8\x01\n\x04\x04\0\x02\x02\x12\x03'\x04\x15\x1a\xda\x01*\r\n\
    \x20Drive\x20Model\r\n\x20Model\x20of\x20the\x20NVM\x20subsystem\x20that\
    \x20is\x20assigned\x20by\x20the\x20vendor.\r\n\x20\r\n\x20Example:\x20Sa\
    msung\x20SSD\x20970\x20EVO\x20Plus\x201TB\r\n\x20\r\n\x20Source:\r\n\x20\
    *\x20Windows:\x20NVME\x20API\x20-\x20Identify\x20Controller\r\n\x20*\x20\
    Linux:\x20nvme\x20list\x20(nvme-cli\x20package)\r\n\n\x0c\n\x05\x04\0\
    \x02\x02\x05\x12\x03'\x04\n\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03'\x0b\
    \x10\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03'\x13\x14\n\x9a\x01\n\x04\x04\
    \0\x02\x03\x12\x032\x04!\x1a\x8c\x01*\r\n\x20Drive\x20Firmware\x20Revisi\
    on\r\n\x20\r\n\x20Example:\r\n\x20\r\n\x20Source:\r\n\x20*\x20Windows:\
    \x20NVME\x20API\x20-\x20Identify\x20Controller\r\n\x20*\x20Linux:\x20nvm\
    e\x20list\x20(nvme-cli\x20package)\r\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\
    \x032\x04\n\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x032\x0b\x1c\n\x0c\n\x05\
    \x04\0\x02\x03\x03\x12\x032\x1f\x20\n\xa0\x01\n\x04\x04\0\x02\x04\x12\
    \x03=\x04\x19\x1a\x92\x01*\r\n\x20Vendor\x20ID\r\n\x20\r\n\x20Example:\
    \x200x144d\r\n\x20\r\n\x20Source:\r\n\x20*\x20Windows:\x20NVME\x20API\
    \x20-\x20Identify\x20Controller\r\n\x20*\x20Linux:\x20nvme\x20id-ctrl\
    \x20<node_id>\x20(nvme-cli\x20package)\r\n\n\x0c\n\x05\x04\0\x02\x04\x05\
    \x12\x03=\x04\n\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03=\x0b\x14\n\x0c\n\
    \x05\x04\0\x02\x04\x03\x12\x03=\x17\x18\n\xa4\x01\n\x04\x04\0\x02\x05\
    \x12\x03H\x04\x1d\x1a\x96\x01*\r\n\x20Sub-System\x20Id\r\n\x20\r\n\x20Ex\
    ample:\x200x144d\r\n\x20\r\n\x20Source:\r\n\x20*\x20Windows:\x20NVME\x20\
    API\x20-\x20Identify\x20Controller\r\n\x20*\x20Linux:\x20nvme\x20id-ctrl\
    \x20<node_id>\x20(nvme-cli\x20package)\r\n\n\x0c\n\x05\x04\0\x02\x05\x05\
    \x12\x03H\x04\n\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03H\x0b\x18\n\x0c\n\
    \x05\x04\0\x02\x05\x03\x12\x03H\x1b\x1c\n\x87\x01\n\x04\x04\0\x02\x06\
    \x12\x03S\x04\x1e\x1az*\r\n\x20Drive\x20Capacity\x20(in\x20GBs)\r\n\x20\
    \r\n\x20Example:\x20931\x20(GB)\r\n\x20\r\n\x20Source:\r\n\x20*\x20Windo\
    ws:\x20TBD\r\n\x20*\x20Linux:\x20nvme\x20list\x20(nvme-cli\x20package)\r\
    \n\n\x0c\n\x05\x04\0\x02\x06\x05\x12\x03S\x04\n\n\x0c\n\x05\x04\0\x02\
    \x06\x01\x12\x03S\x0b\x19\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03S\x1c\x1d\
    \nn\n\x04\x04\0\x02\x07\x12\x03^\x04\x18\x1aa*\r\n\x20BUS\x20Information\
    \r\n\x20\r\n\x20Example:\x20pci@0000:04:00.0\r\n\x20\r\n\x20Source:\r\n\
    \x20*\x20Windows:\x20TBD\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\
    \x02\x07\x05\x12\x03^\x04\n\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03^\x0b\
    \x13\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03^\x16\x17\n\x0b\n\x02\x04\x01\
    \x12\x05a\0\x98\x01\x01\n\n\n\x03\x04\x01\x01\x12\x03a\x08\x1a\n\xfe\x01\
    \n\x04\x04\x01\x02\0\x12\x03m\x04\x1d\x1a\xf0\x01*\r\n\x20Drive\x20Seria\
    l\x20Number\x20(PRIMARY\x20KEY)\r\n\x20Serialnumber\x20for\x20the\x20NVM\
    \x20subsystem\x20that\x20is\x20assigned\x20by\x20the\x20vendor\r\n\x20\r\
    \n\x20Example:\x20S4P4NF0M522988Y\r\n\x20\r\n\x20Source:\r\n\x20*\x20Win\
    dows:\x20NVME\x20interface\x20-\x20Identify\x20Controller\r\n\x20*\x20Li\
    nux:\x20nvme\x20list\x20(nvme-cli\x20package)\r\n\n\x0c\n\x05\x04\x01\
    \x02\0\x05\x12\x03m\x04\n\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03m\x0b\x18\
    \n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03m\x1b\x1c\n\x90\x01\n\x04\x04\x01\
    \x02\x01\x12\x03x\x04\x17\x1a\x82\x01*\r\n\x20Drive\x20Node\x20Id\x20(PR\
    IMARY\x20KEY)\r\n\x20\r\n\x20Example:\x20/dev/nvme0n1\r\n\x20\r\n\x20Sou\
    rce:\r\n\x20*\x20Windows:\x20TBD\r\n\x20*\x20Linux:\x20nvme\x20list\x20(\
    nvme-cli\x20package)\r\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03x\x04\n\
    \n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03x\x0b\x12\n\x0c\n\x05\x04\x01\
    \x02\x01\x03\x12\x03x\x15\x16\n\xae\x01\n\x04\x04\x01\x02\x02\x12\x04\
    \x83\x01\x04\x1d\x1a\x9f\x01*\r\n\x20Used\x20Drive\x20Capacity\x20(in\
    \x20GBs,\x20rounded\x20up\x20to\x20the\x20nearest\x20Giga)\r\n\x20\r\n\
    \x20Example:\x20102\x20(GB)\r\n\x20\r\n\x20Source:\r\n\x20*\x20Windows:\
    \x20TBD\r\n\x20*\x20Linux:\x20nvme\x20list\x20(nvme-cli\x20package)\r\n\
    \n\r\n\x05\x04\x01\x02\x02\x05\x12\x04\x83\x01\x04\n\n\r\n\x05\x04\x01\
    \x02\x02\x01\x12\x04\x83\x01\x0b\x18\n\r\n\x05\x04\x01\x02\x02\x03\x12\
    \x04\x83\x01\x1b\x1c\n\xae\x01\n\x04\x04\x01\x02\x03\x12\x04\x8e\x01\x04\
    \x18\x1a\x9f\x01*\r\n\x20Used\x20Drive\x20Capacity\x20(in\x20GBs,\x20rou\
    nded\x20up\x20to\x20the\x20nearest\x20Giga)\r\n\x20\r\n\x20Example:\x201\
    02\x20(GB)\r\n\x20\r\n\x20Source:\r\n\x20*\x20Windows:\x20TBD\r\n\x20*\
    \x20Linux:\x20nvme\x20list\x20(nvme-cli\x20package)\r\n\n\r\n\x05\x04\
    \x01\x02\x03\x05\x12\x04\x8e\x01\x04\n\n\r\n\x05\x04\x01\x02\x03\x01\x12\
    \x04\x8e\x01\x0b\x13\n\r\n\x05\x04\x01\x02\x03\x03\x12\x04\x8e\x01\x16\
    \x17\na\n\x04\x04\x01\x02\x04\x12\x04\x97\x01\x04-\x1aS*\r\n\x20List\x20\
    with\x20partitions\x20information\r\n\x20\r\n\x20Source:\r\n\x20*\x20Win\
    dows:\x20TBD\r\n\x20*\x20Linux:\x20TBD\r\n\n\r\n\x05\x04\x01\x02\x04\x04\
    \x12\x04\x97\x01\x04\x0c\n\r\n\x05\x04\x01\x02\x04\x06\x12\x04\x97\x01\r\
    \x1d\n\r\n\x05\x04\x01\x02\x04\x01\x12\x04\x97\x01\x1e(\n\r\n\x05\x04\
    \x01\x02\x04\x03\x12\x04\x97\x01+,\n\x0c\n\x02\x04\x02\x12\x06\x9a\x01\0\
    \xa0\x01\x01\n\x0b\n\x03\x04\x02\x01\x12\x04\x9a\x01\x08\x18\n\x0c\n\x04\
    \x04\x02\x02\0\x12\x04\x9b\x01\x04\x16\n\r\n\x05\x04\x02\x02\0\x05\x12\
    \x04\x9b\x01\x04\n\n\r\n\x05\x04\x02\x02\0\x01\x12\x04\x9b\x01\x0b\x11\n\
    \r\n\x05\x04\x02\x02\0\x03\x12\x04\x9b\x01\x14\x15\n\x16\n\x04\x04\x02\
    \x02\x01\x12\x04\x9c\x01\x04\x14\"\x08\x20in\x20MB\r\n\n\r\n\x05\x04\x02\
    \x02\x01\x05\x12\x04\x9c\x01\x04\n\n\r\n\x05\x04\x02\x02\x01\x01\x12\x04\
    \x9c\x01\x0b\x0f\n\r\n\x05\x04\x02\x02\x01\x03\x12\x04\x9c\x01\x12\x13\n\
    \x0c\n\x04\x04\x02\x02\x02\x12\x04\x9d\x01\x04\x1b\n\r\n\x05\x04\x02\x02\
    \x02\x05\x12\x04\x9d\x01\x04\n\n\r\n\x05\x04\x02\x02\x02\x01\x12\x04\x9d\
    \x01\x0b\x16\n\r\n\x05\x04\x02\x02\x02\x03\x12\x04\x9d\x01\x19\x1a\n\x0c\
    \n\x04\x04\x02\x02\x03\x12\x04\x9e\x01\x04\x14\n\r\n\x05\x04\x02\x02\x03\
    \x05\x12\x04\x9e\x01\x04\n\n\r\n\x05\x04\x02\x02\x03\x01\x12\x04\x9e\x01\
    \x0b\x0f\n\r\n\x05\x04\x02\x02\x03\x03\x12\x04\x9e\x01\x12\x13\n%\n\x04\
    \x04\x02\x02\x04\x12\x04\x9f\x01\x04\x15\"\x17\x20swap,\x20boot,\x20msft\
    data\r\n\n\r\n\x05\x04\x02\x02\x04\x05\x12\x04\x9f\x01\x04\n\n\r\n\x05\
    \x04\x02\x02\x04\x01\x12\x04\x9f\x01\x0b\x10\n\r\n\x05\x04\x02\x02\x04\
    \x03\x12\x04\x9f\x01\x13\x14\n\xa2\n\n\x02\x04\x03\x12\x06\xc1\x01\0\xf3\
    \x01\x01\x1a\x93\n*\r\n\x20NVME\x20SMART\x20Log\r\n\x20\r\n\x20Example\
    \x20of\x20Smart\x20Log\r\n\x20>\x20nvme\x20smart-log\x20/dev/nvme0n1\r\n\
    \x20\x20\x20\x20\x20Smart\x20Log\x20for\x20NVME\x20device:nvme0n1\x20nam\
    espace-id:ffffffff\r\n\x20\x20\x20\x20\x20critical_warning\t\t\t\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20:\x200\r\n\x20\
    \x20\x20\x20\x20temperature\t\t\t\t\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20:\x2043\x20C\r\n\x20\x20\x20\x20\x20availabl\
    e_spare\t\t\t\t\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20:\x20100%\
    \r\n\x20\x20\x20\x20\x20available_spare_threshold\t\t\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20:\x205%\r\n\x20\x20\x20\x20\x20percentag\
    e_used\t\t\t\t\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20:\x200%\r\
    \n\x20\x20\x20\x20\x20endurance\x20group\x20critical\x20warning\x20summa\
    ry\x20\x20:\x200\r\n\x20\x20\x20\x20\x20data_units_read\t\t\t\t\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20:\x201,272,801\r\n\x20\x20\x20\
    \x20\x20data_units_written\t\t\t\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20:\x201,487,259\r\n\x20\x20\x20\x20\x20host_read_commands\t\t\t\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20:\x208,453,724\r\n\x20\
    \x20\x20\x20\x20host_write_commands\t\t\t\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20:\x208,829,396\r\n\x20\x20\x20\x20\x20controller_bus\
    y_time\t\t\t\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20:\x2041\r\n\
    \x20\x20\x20\x20\x20power_cycles\t\t\t\t\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20:\x20203\r\n\x20\x20\x20\x20\x20power_on\
    _hours\t\t\t\t\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20:\x2039\r\
    \n\x20\x20\x20\x20\x20unsafe_shutdowns\t\t\t\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20:\x2087\r\n\x20\x20\x20\x20\x20media\
    _errors\t\t\t\t\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20:\x200\r\n\x20\x20\x20\x20\x20num_err_log_entries\t\t\t\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20:\x20280\r\n\x20\x20\x20\x20\x20\
    Warning\x20Temperature\x20Time\t\t\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20:\x200\r\n\x20\x20\x20\x20\x20Critical\x20Composite\x20Tempe\
    rature\x20Time\t\x20\x20\x20\x20:\x200\r\n\x20\x20\x20\x20\x20Temperatur\
    e\x20Sensor\x201\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20:\x2043\x20C\r\n\x20\x20\x20\x20\x20Temp\
    erature\x20Sensor\x202\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20:\x2040\x20C\r\n\x20\x20\x20\x20\
    \x20Thermal\x20Management\x20T1\x20Trans\x20Count\t\x20\x20\x20\x20\x20\
    \x20\x20\x20:\x200\r\n\x20\x20\x20\x20\x20Thermal\x20Management\x20T2\
    \x20Trans\x20Count\t\x20\x20\x20\x20\x20\x20\x20\x20:\x200\r\n\x20\x20\
    \x20\x20\x20Thermal\x20Management\x20T1\x20Total\x20Time\t\x20\x20\x20\
    \x20\x20\x20\x20\x20:\x200\r\n\x20\x20\x20\x20\x20Thermal\x20Management\
    \x20T2\x20Total\x20Time\t\x20\x20\x20\x20\x20\x20\x20\x20:\x200\r\n\n\
    \x0b\n\x03\x04\x03\x01\x12\x04\xc1\x01\x08\x14\n\xf1\x01\n\x04\x04\x03\
    \x02\0\x12\x04\xcc\x01\x04\x1d\x1a\xe2\x01*\r\n\x20Drive\x20Serial\x20Nu\
    mber\r\n\x20Serialnumber\x20for\x20the\x20NVM\x20subsystem\x20that\x20is\
    \x20assigned\x20by\x20the\x20vendor\r\n\x20\r\n\x20Example:\x20S4P4NF0M5\
    22988Y\r\n\x20\r\n\x20Source:\r\n\x20*\x20Windows:\x20NVME\x20interface\
    \x20-\x20Identify\x20Controller\r\n\x20*\x20Linux:\x20nvme\x20list\x20(n\
    vme-cli\x20package)\r\n\n\r\n\x05\x04\x03\x02\0\x05\x12\x04\xcc\x01\x04\
    \n\n\r\n\x05\x04\x03\x02\0\x01\x12\x04\xcc\x01\x0b\x18\n\r\n\x05\x04\x03\
    \x02\0\x03\x12\x04\xcc\x01\x1b\x1c\n\xb5\x01\n\x04\x04\x03\x02\x01\x12\
    \x04\xd7\x01\x04\x1c\x1a\xa6\x01*\r\n\x20NVME\x20Specification\x20versio\
    n\r\n\x20\r\n\x20Example:\x201.3\r\n\x20\r\n\x20Source:\r\n\x20*\x20Wind\
    ows:\x20NVME\x20interface\x20-\x20Identify\x20Controller\r\n\x20*\x20Lin\
    ux:\x20nvme\x20id-ctrl\x20<node_id>\x20(nvme-cli\x20package)\r\n\n\r\n\
    \x05\x04\x03\x02\x01\x05\x12\x04\xd7\x01\x04\n\n\r\n\x05\x04\x03\x02\x01\
    \x01\x12\x04\xd7\x01\x0b\x17\n\r\n\x05\x04\x03\x02\x01\x03\x12\x04\xd7\
    \x01\x1a\x1b\n\x0c\n\x04\x04\x03\x02\x02\x12\x04\xd9\x01\x04\x20\n\r\n\
    \x05\x04\x03\x02\x02\x05\x12\x04\xd9\x01\x04\n\n\r\n\x05\x04\x03\x02\x02\
    \x01\x12\x04\xd9\x01\x0b\x1b\n\r\n\x05\x04\x03\x02\x02\x03\x12\x04\xd9\
    \x01\x1e\x1f\n\x0c\n\x04\x04\x03\x02\x03\x12\x04\xda\x01\x04*\n\r\n\x05\
    \x04\x03\x02\x03\x05\x12\x04\xda\x01\x04\n\n\r\n\x05\x04\x03\x02\x03\x01\
    \x12\x04\xda\x01\x0b%\n\r\n\x05\x04\x03\x02\x03\x03\x12\x04\xda\x01()\n\
    \x0c\n\x04\x04\x03\x02\x04\x12\x04\xdc\x01\x04\x1f\n\r\n\x05\x04\x03\x02\
    \x04\x05\x12\x04\xdc\x01\x04\n\n\r\n\x05\x04\x03\x02\x04\x01\x12\x04\xdc\
    \x01\x0b\x1a\n\r\n\x05\x04\x03\x02\x04\x03\x12\x04\xdc\x01\x1d\x1e\n\x0c\
    \n\x04\x04\x03\x02\x05\x12\x04\xdd\x01\x04)\n\r\n\x05\x04\x03\x02\x05\
    \x05\x12\x04\xdd\x01\x04\n\n\r\n\x05\x04\x03\x02\x05\x01\x12\x04\xdd\x01\
    \x0b$\n\r\n\x05\x04\x03\x02\x05\x03\x12\x04\xdd\x01'(\n\x0c\n\x04\x04\
    \x03\x02\x06\x12\x04\xde\x01\x04\x1f\n\r\n\x05\x04\x03\x02\x06\x05\x12\
    \x04\xde\x01\x04\n\n\r\n\x05\x04\x03\x02\x06\x01\x12\x04\xde\x01\x0b\x1a\
    \n\r\n\x05\x04\x03\x02\x06\x03\x12\x04\xde\x01\x1d\x1e\n\x0c\n\x04\x04\
    \x03\x02\x07\x12\x04\xe0\x01\x04\x1f\n\r\n\x05\x04\x03\x02\x07\x05\x12\
    \x04\xe0\x01\x04\n\n\r\n\x05\x04\x03\x02\x07\x01\x12\x04\xe0\x01\x0b\x1a\
    \n\r\n\x05\x04\x03\x02\x07\x03\x12\x04\xe0\x01\x1d\x1e\n\x0c\n\x04\x04\
    \x03\x02\x08\x12\x04\xe1\x01\x04\"\n\r\n\x05\x04\x03\x02\x08\x05\x12\x04\
    \xe1\x01\x04\n\n\r\n\x05\x04\x03\x02\x08\x01\x12\x04\xe1\x01\x0b\x1d\n\r\
    \n\x05\x04\x03\x02\x08\x03\x12\x04\xe1\x01\x20!\n\x0c\n\x04\x04\x03\x02\
    \t\x12\x04\xe2\x01\x04#\n\r\n\x05\x04\x03\x02\t\x05\x12\x04\xe2\x01\x04\
    \n\n\r\n\x05\x04\x03\x02\t\x01\x12\x04\xe2\x01\x0b\x1d\n\r\n\x05\x04\x03\
    \x02\t\x03\x12\x04\xe2\x01\x20\"\n\x0c\n\x04\x04\x03\x02\n\x12\x04\xe3\
    \x01\x04$\n\r\n\x05\x04\x03\x02\n\x05\x12\x04\xe3\x01\x04\n\n\r\n\x05\
    \x04\x03\x02\n\x01\x12\x04\xe3\x01\x0b\x1e\n\r\n\x05\x04\x03\x02\n\x03\
    \x12\x04\xe3\x01!#\n\x0c\n\x04\x04\x03\x02\x0b\x12\x04\xe4\x01\x04%\n\r\
    \n\x05\x04\x03\x02\x0b\x05\x12\x04\xe4\x01\x04\n\n\r\n\x05\x04\x03\x02\
    \x0b\x01\x12\x04\xe4\x01\x0b\x1f\n\r\n\x05\x04\x03\x02\x0b\x03\x12\x04\
    \xe4\x01\"$\n\x0c\n\x04\x04\x03\x02\x0c\x12\x04\xe5\x01\x04\x1d\n\r\n\
    \x05\x04\x03\x02\x0c\x05\x12\x04\xe5\x01\x04\n\n\r\n\x05\x04\x03\x02\x0c\
    \x01\x12\x04\xe5\x01\x0b\x17\n\r\n\x05\x04\x03\x02\x0c\x03\x12\x04\xe5\
    \x01\x1a\x1c\n\x0c\n\x04\x04\x03\x02\r\x12\x04\xe6\x01\x04\x1f\n\r\n\x05\
    \x04\x03\x02\r\x05\x12\x04\xe6\x01\x04\n\n\r\n\x05\x04\x03\x02\r\x01\x12\
    \x04\xe6\x01\x0b\x19\n\r\n\x05\x04\x03\x02\r\x03\x12\x04\xe6\x01\x1c\x1e\
    \n\x0c\n\x04\x04\x03\x02\x0e\x12\x04\xe7\x01\x04!\n\r\n\x05\x04\x03\x02\
    \x0e\x05\x12\x04\xe7\x01\x04\n\n\r\n\x05\x04\x03\x02\x0e\x01\x12\x04\xe7\
    \x01\x0b\x1b\n\r\n\x05\x04\x03\x02\x0e\x03\x12\x04\xe7\x01\x1e\x20\n\x0c\
    \n\x04\x04\x03\x02\x0f\x12\x04\xe8\x01\x04\x1d\n\r\n\x05\x04\x03\x02\x0f\
    \x05\x12\x04\xe8\x01\x04\n\n\r\n\x05\x04\x03\x02\x0f\x01\x12\x04\xe8\x01\
    \x0b\x17\n\r\n\x05\x04\x03\x02\x0f\x03\x12\x04\xe8\x01\x1a\x1c\n\x0c\n\
    \x04\x04\x03\x02\x10\x12\x04\xe9\x01\x04$\n\r\n\x05\x04\x03\x02\x10\x05\
    \x12\x04\xe9\x01\x04\n\n\r\n\x05\x04\x03\x02\x10\x01\x12\x04\xe9\x01\x0b\
    \x1e\n\r\n\x05\x04\x03\x02\x10\x03\x12\x04\xe9\x01!#\n\x0c\n\x04\x04\x03\
    \x02\x11\x12\x04\xeb\x01\x04.\n\r\n\x05\x04\x03\x02\x11\x05\x12\x04\xeb\
    \x01\x04\n\n\r\n\x05\x04\x03\x02\x11\x01\x12\x04\xeb\x01\x0b(\n\r\n\x05\
    \x04\x03\x02\x11\x03\x12\x04\xeb\x01+-\n\x0c\n\x04\x04\x03\x02\x12\x12\
    \x04\xec\x01\x049\n\r\n\x05\x04\x03\x02\x12\x05\x12\x04\xec\x01\x04\n\n\
    \r\n\x05\x04\x03\x02\x12\x01\x12\x04\xec\x01\x0b3\n\r\n\x05\x04\x03\x02\
    \x12\x03\x12\x04\xec\x0168\n\x0c\n\x04\x04\x03\x02\x13\x12\x04\xed\x01\
    \x04)\n\r\n\x05\x04\x03\x02\x13\x05\x12\x04\xed\x01\x04\n\n\r\n\x05\x04\
    \x03\x02\x13\x01\x12\x04\xed\x01\x0b#\n\r\n\x05\x04\x03\x02\x13\x03\x12\
    \x04\xed\x01&(\n\x0c\n\x04\x04\x03\x02\x14\x12\x04\xee\x01\x044\n\r\n\
    \x05\x04\x03\x02\x14\x05\x12\x04\xee\x01\x04\n\n\r\n\x05\x04\x03\x02\x14\
    \x01\x12\x04\xee\x01\x0b.\n\r\n\x05\x04\x03\x02\x14\x03\x12\x04\xee\x011\
    3\n\x0c\n\x04\x04\x03\x02\x15\x12\x04\xef\x01\x04,\n\r\n\x05\x04\x03\x02\
    \x15\x04\x12\x04\xef\x01\x04\x0c\n\r\n\x05\x04\x03\x02\x15\x05\x12\x04\
    \xef\x01\r\x13\n\r\n\x05\x04\x03\x02\x15\x01\x12\x04\xef\x01\x14&\n\r\n\
    \x05\x04\x03\x02\x15\x03\x12\x04\xef\x01)+\n\x0c\n\x04\x04\x03\x02\x16\
    \x12\x04\xf0\x01\x048\n\r\n\x05\x04\x03\x02\x16\x04\x12\x04\xf0\x01\x04\
    \x0c\n\r\n\x05\x04\x03\x02\x16\x05\x12\x04\xf0\x01\r\x13\n\r\n\x05\x04\
    \x03\x02\x16\x01\x12\x04\xf0\x01\x142\n\r\n\x05\x04\x03\x02\x16\x03\x12\
    \x04\xf0\x0157\n\x0c\n\x04\x04\x03\x02\x17\x12\x04\xf1\x01\x047\n\r\n\
    \x05\x04\x03\x02\x17\x04\x12\x04\xf1\x01\x04\x0c\n\r\n\x05\x04\x03\x02\
    \x17\x05\x12\x04\xf1\x01\r\x13\n\r\n\x05\x04\x03\x02\x17\x01\x12\x04\xf1\
    \x01\x141\n\r\n\x05\x04\x03\x02\x17\x03\x12\x04\xf1\x0146b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
