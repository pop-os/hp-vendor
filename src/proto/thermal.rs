// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `hp/xy/sunrise_v1/hw/thermal.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct ThermalContextSample {
    // message fields
    pub sensor_name: ::std::string::String,
    pub sensor_index: ::std::string::String,
    pub sensor_value: ::std::string::String,
    pub sensor_value_unit: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ThermalContextSample {
    fn default() -> &'a ThermalContextSample {
        <ThermalContextSample as ::protobuf::Message>::default_instance()
    }
}

impl ThermalContextSample {
    pub fn new() -> ThermalContextSample {
        ::std::default::Default::default()
    }

    // string sensor_name = 1;


    pub fn get_sensor_name(&self) -> &str {
        &self.sensor_name
    }
    pub fn clear_sensor_name(&mut self) {
        self.sensor_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_sensor_name(&mut self, v: ::std::string::String) {
        self.sensor_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sensor_name(&mut self) -> &mut ::std::string::String {
        &mut self.sensor_name
    }

    // Take field
    pub fn take_sensor_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sensor_name, ::std::string::String::new())
    }

    // string sensor_index = 2;


    pub fn get_sensor_index(&self) -> &str {
        &self.sensor_index
    }
    pub fn clear_sensor_index(&mut self) {
        self.sensor_index.clear();
    }

    // Param is passed by value, moved
    pub fn set_sensor_index(&mut self, v: ::std::string::String) {
        self.sensor_index = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sensor_index(&mut self) -> &mut ::std::string::String {
        &mut self.sensor_index
    }

    // Take field
    pub fn take_sensor_index(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sensor_index, ::std::string::String::new())
    }

    // string sensor_value = 3;


    pub fn get_sensor_value(&self) -> &str {
        &self.sensor_value
    }
    pub fn clear_sensor_value(&mut self) {
        self.sensor_value.clear();
    }

    // Param is passed by value, moved
    pub fn set_sensor_value(&mut self, v: ::std::string::String) {
        self.sensor_value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sensor_value(&mut self) -> &mut ::std::string::String {
        &mut self.sensor_value
    }

    // Take field
    pub fn take_sensor_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sensor_value, ::std::string::String::new())
    }

    // string sensor_value_unit = 4;


    pub fn get_sensor_value_unit(&self) -> &str {
        &self.sensor_value_unit
    }
    pub fn clear_sensor_value_unit(&mut self) {
        self.sensor_value_unit.clear();
    }

    // Param is passed by value, moved
    pub fn set_sensor_value_unit(&mut self, v: ::std::string::String) {
        self.sensor_value_unit = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sensor_value_unit(&mut self) -> &mut ::std::string::String {
        &mut self.sensor_value_unit
    }

    // Take field
    pub fn take_sensor_value_unit(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sensor_value_unit, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ThermalContextSample {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sensor_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sensor_index)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sensor_value)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sensor_value_unit)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.sensor_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.sensor_name);
        }
        if !self.sensor_index.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.sensor_index);
        }
        if !self.sensor_value.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.sensor_value);
        }
        if !self.sensor_value_unit.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.sensor_value_unit);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.sensor_name.is_empty() {
            os.write_string(1, &self.sensor_name)?;
        }
        if !self.sensor_index.is_empty() {
            os.write_string(2, &self.sensor_index)?;
        }
        if !self.sensor_value.is_empty() {
            os.write_string(3, &self.sensor_value)?;
        }
        if !self.sensor_value_unit.is_empty() {
            os.write_string(4, &self.sensor_value_unit)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ThermalContextSample {
        ThermalContextSample::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "sensor_name",
                    |m: &ThermalContextSample| { &m.sensor_name },
                    |m: &mut ThermalContextSample| { &mut m.sensor_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "sensor_index",
                    |m: &ThermalContextSample| { &m.sensor_index },
                    |m: &mut ThermalContextSample| { &mut m.sensor_index },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "sensor_value",
                    |m: &ThermalContextSample| { &m.sensor_value },
                    |m: &mut ThermalContextSample| { &mut m.sensor_value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "sensor_value_unit",
                    |m: &ThermalContextSample| { &m.sensor_value_unit },
                    |m: &mut ThermalContextSample| { &mut m.sensor_value_unit },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ThermalContextSample>(
                    "ThermalContextSample",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ThermalContextSample {
        static mut instance: ::protobuf::lazy::Lazy<ThermalContextSample> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ThermalContextSample,
        };
        unsafe {
            instance.get(ThermalContextSample::new)
        }
    }
}

impl ::protobuf::Clear for ThermalContextSample {
    fn clear(&mut self) {
        self.sensor_name.clear();
        self.sensor_index.clear();
        self.sensor_value.clear();
        self.sensor_value_unit.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ThermalContextSample {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ThermalContextSample {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ThermalContext {
    // message fields
    pub time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub trigger_event: ::std::string::String,
    pub samples: ::protobuf::RepeatedField<ThermalContextSample>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ThermalContext {
    fn default() -> &'a ThermalContext {
        <ThermalContext as ::protobuf::Message>::default_instance()
    }
}

impl ThermalContext {
    pub fn new() -> ThermalContext {
        ::std::default::Default::default()
    }

    // .google.protobuf.Timestamp time = 1;


    pub fn get_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.time.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_time(&mut self) {
        self.time.clear();
    }

    pub fn has_time(&self) -> bool {
        self.time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.time.is_none() {
            self.time.set_default();
        }
        self.time.as_mut().unwrap()
    }

    // Take field
    pub fn take_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // string trigger_event = 2;


    pub fn get_trigger_event(&self) -> &str {
        &self.trigger_event
    }
    pub fn clear_trigger_event(&mut self) {
        self.trigger_event.clear();
    }

    // Param is passed by value, moved
    pub fn set_trigger_event(&mut self, v: ::std::string::String) {
        self.trigger_event = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trigger_event(&mut self) -> &mut ::std::string::String {
        &mut self.trigger_event
    }

    // Take field
    pub fn take_trigger_event(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.trigger_event, ::std::string::String::new())
    }

    // repeated .hp.xy.sunrise_v1.hw.ThermalContextSample samples = 3;


    pub fn get_samples(&self) -> &[ThermalContextSample] {
        &self.samples
    }
    pub fn clear_samples(&mut self) {
        self.samples.clear();
    }

    // Param is passed by value, moved
    pub fn set_samples(&mut self, v: ::protobuf::RepeatedField<ThermalContextSample>) {
        self.samples = v;
    }

    // Mutable pointer to the field.
    pub fn mut_samples(&mut self) -> &mut ::protobuf::RepeatedField<ThermalContextSample> {
        &mut self.samples
    }

    // Take field
    pub fn take_samples(&mut self) -> ::protobuf::RepeatedField<ThermalContextSample> {
        ::std::mem::replace(&mut self.samples, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ThermalContext {
    fn is_initialized(&self) -> bool {
        for v in &self.time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.samples {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.time)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.trigger_event)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.samples)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.trigger_event.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.trigger_event);
        }
        for value in &self.samples {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.time.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.trigger_event.is_empty() {
            os.write_string(2, &self.trigger_event)?;
        }
        for v in &self.samples {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ThermalContext {
        ThermalContext::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "time",
                    |m: &ThermalContext| { &m.time },
                    |m: &mut ThermalContext| { &mut m.time },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "trigger_event",
                    |m: &ThermalContext| { &m.trigger_event },
                    |m: &mut ThermalContext| { &mut m.trigger_event },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ThermalContextSample>>(
                    "samples",
                    |m: &ThermalContext| { &m.samples },
                    |m: &mut ThermalContext| { &mut m.samples },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ThermalContext>(
                    "ThermalContext",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ThermalContext {
        static mut instance: ::protobuf::lazy::Lazy<ThermalContext> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ThermalContext,
        };
        unsafe {
            instance.get(ThermalContext::new)
        }
    }
}

impl ::protobuf::Clear for ThermalContext {
    fn clear(&mut self) {
        self.time.clear();
        self.trigger_event.clear();
        self.samples.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ThermalContext {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ThermalContext {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!hp/xy/sunrise_v1/hw/thermal.proto\x12\x13hp.xy.sunrise_v1.hw\x1a\x1fg\
    oogle/protobuf/timestamp.proto\"\xa9\x01\n\x14ThermalContextSample\x12\
    \x1f\n\x0bsensor_name\x18\x01\x20\x01(\tR\nsensorName\x12!\n\x0csensor_i\
    ndex\x18\x02\x20\x01(\tR\x0bsensorIndex\x12!\n\x0csensor_value\x18\x03\
    \x20\x01(\tR\x0bsensorValue\x12*\n\x11sensor_value_unit\x18\x04\x20\x01(\
    \tR\x0fsensorValueUnit\"\xaa\x01\n\x0eThermalContext\x12.\n\x04time\x18\
    \x01\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x04time\x12#\n\rtrigge\
    r_event\x18\x02\x20\x01(\tR\x0ctriggerEvent\x12C\n\x07samples\x18\x03\
    \x20\x03(\x0b2).hp.xy.sunrise_v1.hw.ThermalContextSampleR\x07samplesJ\
    \xc5\r\n\x06\x12\x04\0\0T\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\
    \x01\x02\x12\x03\x02\0\x1c\n\t\n\x02\x03\0\x12\x03\x04\0)\n\xbd\x03\n\
    \x02\x04\0\x12\x04\x0e\07\x01\x1a\xb0\x03*\n\x20Samples\x20of\x20the\x20\
    sensors\x20that\x20have\x20any\x20correlation/causation\x20effect\x20in\
    \x20temperature\x20and\x20cooling.\n\x20\n\x20These\x20sensors\x20are:\
    \x20\n\x20\x20*\x20Temperature\x20readings\x20from\x20the\x20sensors\x20\
    spread\x20on\x20the\x20components\x20of\x20the\x20PC\x20(Processor,\x20G\
    PU,\x20Battery,\x20Storage,\x20Wifi\x20card,\x20etc.)\x20as\x20well\x20a\
    s\x20the\x20base\x20board\n\x20\x20*\x20Cooling\x20device\x20velocity\
    \x20sensor\x20(when\x20possible,\x20collect\x20requested\x20vs.\x20actua\
    l\x20velocity)\n\x20\x20*\x20Power\x20sensor\x20(which\x20could\x20be\
    \x20System\x20power\x20or\x20Compoenent\x20power)\n\n\n\n\x03\x04\0\x01\
    \x12\x03\x0e\x08\x1c\nh\n\x04\x04\0\x02\0\x12\x03\x18\x04\x1b\x1a[*\n\
    \x20Name\x20of\x20the\x20sensor\n\x20\n\x20Example:\x20nvme-pci-0400,\
    \x20amdgpu-pci-0500\n\x20\n\x20Source:\x20\n\x20*\x20Linux:\x20TBD\n\n\
    \x0c\n\x05\x04\0\x02\0\x05\x12\x03\x18\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\
    \x12\x03\x18\x0b\x16\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x18\x19\x1a\n\
    \x82\x01\n\x04\x04\0\x02\x01\x12\x03\"\x04\x1c\x1au*\n\x20Sensor\x20Inde\
    x\x20(only\x20used\x20when\x20the\x20same\x20name\x20has\x20more\x20than\
    \x20one\x20value)\n\x20\n\x20Example:\x200,\x201,\x202\n\x20\n\x20Source\
    :\x20\n\x20*\x20Linux:\x20TBD\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\"\
    \x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\"\x0b\x17\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03\"\x1a\x1b\nO\n\x04\x04\0\x02\x02\x12\x03,\x04\x1c\
    \x1aB*\n\x20The\x20actual\x20sensor\x20value\n\x20\n\x20Example:\x20\n\
    \x20\n\x20Source:\x20\n\x20*\x20Linux:\x20TBD\n\n\x0c\n\x05\x04\0\x02\
    \x02\x05\x12\x03,\x04\n\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03,\x0b\x17\n\
    \x0c\n\x05\x04\0\x02\x02\x03\x12\x03,\x1a\x1b\n\x9b\x01\n\x04\x04\0\x02\
    \x03\x12\x036\x04!\x1a\x8d\x01*\n\x20The\x20sensor\x20value\x20unit\n\
    \x20\n\x20Example:\x20C\x20(for\x20Celsius),\x20F\x20(for\x20Farenheit),\
    \x20W\x20(for\x20Watts),\x20RPM\x20or\x20PWM\x20(for\x20FAN),\x20etc.\n\
    \x20\n\x20Source:\x20\n\x20*\x20Linux:\x20TBD\n\n\x0c\n\x05\x04\0\x02\
    \x03\x05\x12\x036\x04\n\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x036\x0b\x1c\n\
    \x0c\n\x05\x04\0\x02\x03\x03\x12\x036\x1f\x20\n\xa8\x01\n\x02\x04\x01\
    \x12\x04@\0T\x012\x9b\x01*\n\x20Thermal\x20Context\x20it\x20is\x20the\
    \x20context\x20of\x20all\x20sensor\x20readings\x20that\x20correlate/caus\
    e\x20thermal\x20variations\n\x20\n\x20When\x20collected\x20all\x20Therma\
    l\x20Samples\x20should\x20be\x20read\n\x20\n\n\n\n\x03\x04\x01\x01\x12\
    \x03@\x08\x16\n0\n\x04\x04\x01\x02\0\x12\x03E\x04'\x1a#*\n\x20Time\x20wh\
    en\x20all\x20sensors\x20were\x20read\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\
    \x03E\x04\x1d\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03E\x1e\"\n\x0c\n\x05\
    \x04\x01\x02\0\x03\x12\x03E%&\n\xaa\x01\n\x04\x04\x01\x02\x01\x12\x03N\
    \x04\x1d\x1a\x9c\x01*\n\x20Trigger\x20Event\n\x20Event\x20that\x20trigge\
    rs\x20the\x20sample\x20collections.\x20\n\x20List\x20of\x20current\x20tr\
    iggers:\x20\n\x20\x20\x20*\x20FAN\x20RPM\x20increased\x20beyond\x20X%\n\
    \x20\x20\x20*\x20FAN\x20RPM\x20decreased\x20below\x20Y%\n\n\x0c\n\x05\
    \x04\x01\x02\x01\x05\x12\x03N\x04\n\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\
    \x03N\x0b\x18\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03N\x1b\x1c\n(\n\x04\
    \x04\x01\x02\x02\x12\x03S\x04.\x1a\x1b*\n\x20List\x20of\x20sample\x20rea\
    dings\n\n\x0c\n\x05\x04\x01\x02\x02\x04\x12\x03S\x04\x0c\n\x0c\n\x05\x04\
    \x01\x02\x02\x06\x12\x03S\r!\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03S\")\
    \n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03S,-b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
