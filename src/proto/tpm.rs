// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `hp/xy/sunrise_v1/hw/tpm.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct TrustedPlatformModule {
    // message fields
    pub manufacturer_id: ::std::string::String,
    pub manufacturer_version: ::std::string::String,
    pub manufacturer_version_info: ::std::string::String,
    pub trusted_computing_group_version: ::std::string::String,
    pub physical_presence_version: ::std::string::String,
    pub tpm_activated: bool,
    pub tpm_enabled: bool,
    pub tpm_has_owner: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TrustedPlatformModule {
    fn default() -> &'a TrustedPlatformModule {
        <TrustedPlatformModule as ::protobuf::Message>::default_instance()
    }
}

impl TrustedPlatformModule {
    pub fn new() -> TrustedPlatformModule {
        ::std::default::Default::default()
    }

    // string manufacturer_id = 1;


    pub fn get_manufacturer_id(&self) -> &str {
        &self.manufacturer_id
    }
    pub fn clear_manufacturer_id(&mut self) {
        self.manufacturer_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_manufacturer_id(&mut self, v: ::std::string::String) {
        self.manufacturer_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_manufacturer_id(&mut self) -> &mut ::std::string::String {
        &mut self.manufacturer_id
    }

    // Take field
    pub fn take_manufacturer_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.manufacturer_id, ::std::string::String::new())
    }

    // string manufacturer_version = 2;


    pub fn get_manufacturer_version(&self) -> &str {
        &self.manufacturer_version
    }
    pub fn clear_manufacturer_version(&mut self) {
        self.manufacturer_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_manufacturer_version(&mut self, v: ::std::string::String) {
        self.manufacturer_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_manufacturer_version(&mut self) -> &mut ::std::string::String {
        &mut self.manufacturer_version
    }

    // Take field
    pub fn take_manufacturer_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.manufacturer_version, ::std::string::String::new())
    }

    // string manufacturer_version_info = 3;


    pub fn get_manufacturer_version_info(&self) -> &str {
        &self.manufacturer_version_info
    }
    pub fn clear_manufacturer_version_info(&mut self) {
        self.manufacturer_version_info.clear();
    }

    // Param is passed by value, moved
    pub fn set_manufacturer_version_info(&mut self, v: ::std::string::String) {
        self.manufacturer_version_info = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_manufacturer_version_info(&mut self) -> &mut ::std::string::String {
        &mut self.manufacturer_version_info
    }

    // Take field
    pub fn take_manufacturer_version_info(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.manufacturer_version_info, ::std::string::String::new())
    }

    // string trusted_computing_group_version = 4;


    pub fn get_trusted_computing_group_version(&self) -> &str {
        &self.trusted_computing_group_version
    }
    pub fn clear_trusted_computing_group_version(&mut self) {
        self.trusted_computing_group_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_trusted_computing_group_version(&mut self, v: ::std::string::String) {
        self.trusted_computing_group_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trusted_computing_group_version(&mut self) -> &mut ::std::string::String {
        &mut self.trusted_computing_group_version
    }

    // Take field
    pub fn take_trusted_computing_group_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.trusted_computing_group_version, ::std::string::String::new())
    }

    // string physical_presence_version = 5;


    pub fn get_physical_presence_version(&self) -> &str {
        &self.physical_presence_version
    }
    pub fn clear_physical_presence_version(&mut self) {
        self.physical_presence_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_physical_presence_version(&mut self, v: ::std::string::String) {
        self.physical_presence_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_physical_presence_version(&mut self) -> &mut ::std::string::String {
        &mut self.physical_presence_version
    }

    // Take field
    pub fn take_physical_presence_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.physical_presence_version, ::std::string::String::new())
    }

    // bool tpm_activated = 6;


    pub fn get_tpm_activated(&self) -> bool {
        self.tpm_activated
    }
    pub fn clear_tpm_activated(&mut self) {
        self.tpm_activated = false;
    }

    // Param is passed by value, moved
    pub fn set_tpm_activated(&mut self, v: bool) {
        self.tpm_activated = v;
    }

    // bool tpm_enabled = 7;


    pub fn get_tpm_enabled(&self) -> bool {
        self.tpm_enabled
    }
    pub fn clear_tpm_enabled(&mut self) {
        self.tpm_enabled = false;
    }

    // Param is passed by value, moved
    pub fn set_tpm_enabled(&mut self, v: bool) {
        self.tpm_enabled = v;
    }

    // bool tpm_has_owner = 8;


    pub fn get_tpm_has_owner(&self) -> bool {
        self.tpm_has_owner
    }
    pub fn clear_tpm_has_owner(&mut self) {
        self.tpm_has_owner = false;
    }

    // Param is passed by value, moved
    pub fn set_tpm_has_owner(&mut self, v: bool) {
        self.tpm_has_owner = v;
    }
}

impl ::protobuf::Message for TrustedPlatformModule {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.manufacturer_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.manufacturer_version)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.manufacturer_version_info)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.trusted_computing_group_version)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.physical_presence_version)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.tpm_activated = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.tpm_enabled = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.tpm_has_owner = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.manufacturer_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.manufacturer_id);
        }
        if !self.manufacturer_version.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.manufacturer_version);
        }
        if !self.manufacturer_version_info.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.manufacturer_version_info);
        }
        if !self.trusted_computing_group_version.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.trusted_computing_group_version);
        }
        if !self.physical_presence_version.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.physical_presence_version);
        }
        if self.tpm_activated != false {
            my_size += 2;
        }
        if self.tpm_enabled != false {
            my_size += 2;
        }
        if self.tpm_has_owner != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.manufacturer_id.is_empty() {
            os.write_string(1, &self.manufacturer_id)?;
        }
        if !self.manufacturer_version.is_empty() {
            os.write_string(2, &self.manufacturer_version)?;
        }
        if !self.manufacturer_version_info.is_empty() {
            os.write_string(3, &self.manufacturer_version_info)?;
        }
        if !self.trusted_computing_group_version.is_empty() {
            os.write_string(4, &self.trusted_computing_group_version)?;
        }
        if !self.physical_presence_version.is_empty() {
            os.write_string(5, &self.physical_presence_version)?;
        }
        if self.tpm_activated != false {
            os.write_bool(6, self.tpm_activated)?;
        }
        if self.tpm_enabled != false {
            os.write_bool(7, self.tpm_enabled)?;
        }
        if self.tpm_has_owner != false {
            os.write_bool(8, self.tpm_has_owner)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TrustedPlatformModule {
        TrustedPlatformModule::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "manufacturer_id",
                    |m: &TrustedPlatformModule| { &m.manufacturer_id },
                    |m: &mut TrustedPlatformModule| { &mut m.manufacturer_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "manufacturer_version",
                    |m: &TrustedPlatformModule| { &m.manufacturer_version },
                    |m: &mut TrustedPlatformModule| { &mut m.manufacturer_version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "manufacturer_version_info",
                    |m: &TrustedPlatformModule| { &m.manufacturer_version_info },
                    |m: &mut TrustedPlatformModule| { &mut m.manufacturer_version_info },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "trusted_computing_group_version",
                    |m: &TrustedPlatformModule| { &m.trusted_computing_group_version },
                    |m: &mut TrustedPlatformModule| { &mut m.trusted_computing_group_version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "physical_presence_version",
                    |m: &TrustedPlatformModule| { &m.physical_presence_version },
                    |m: &mut TrustedPlatformModule| { &mut m.physical_presence_version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "tpm_activated",
                    |m: &TrustedPlatformModule| { &m.tpm_activated },
                    |m: &mut TrustedPlatformModule| { &mut m.tpm_activated },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "tpm_enabled",
                    |m: &TrustedPlatformModule| { &m.tpm_enabled },
                    |m: &mut TrustedPlatformModule| { &mut m.tpm_enabled },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "tpm_has_owner",
                    |m: &TrustedPlatformModule| { &m.tpm_has_owner },
                    |m: &mut TrustedPlatformModule| { &mut m.tpm_has_owner },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TrustedPlatformModule>(
                    "TrustedPlatformModule",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TrustedPlatformModule {
        static mut instance: ::protobuf::lazy::Lazy<TrustedPlatformModule> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TrustedPlatformModule,
        };
        unsafe {
            instance.get(TrustedPlatformModule::new)
        }
    }
}

impl ::protobuf::Clear for TrustedPlatformModule {
    fn clear(&mut self) {
        self.manufacturer_id.clear();
        self.manufacturer_version.clear();
        self.manufacturer_version_info.clear();
        self.trusted_computing_group_version.clear();
        self.physical_presence_version.clear();
        self.tpm_activated = false;
        self.tpm_enabled = false;
        self.tpm_has_owner = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TrustedPlatformModule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TrustedPlatformModule {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dhp/xy/sunrise_v1/hw/tpm.proto\x12\x13hp.xy.sunrise_v1.hw\"\x9c\x03\
    \n\x15TrustedPlatformModule\x12'\n\x0fmanufacturer_id\x18\x01\x20\x01(\t\
    R\x0emanufacturerId\x121\n\x14manufacturer_version\x18\x02\x20\x01(\tR\
    \x13manufacturerVersion\x12:\n\x19manufacturer_version_info\x18\x03\x20\
    \x01(\tR\x17manufacturerVersionInfo\x12E\n\x1ftrusted_computing_group_ve\
    rsion\x18\x04\x20\x01(\tR\x1ctrustedComputingGroupVersion\x12:\n\x19phys\
    ical_presence_version\x18\x05\x20\x01(\tR\x17physicalPresenceVersion\x12\
    #\n\rtpm_activated\x18\x06\x20\x01(\x08R\x0ctpmActivated\x12\x1f\n\x0btp\
    m_enabled\x18\x07\x20\x01(\x08R\ntpmEnabled\x12\"\n\rtpm_has_owner\x18\
    \x08\x20\x01(\x08R\x0btpmHasOwnerJ\x98\x14\n\x06\x12\x04\0\0]\x01\n\x08\
    \n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x1c\n\n\n\x02\
    \x04\0\x12\x04\x04\0]\x01\n\n\n\x03\x04\0\x01\x12\x03\x04\x08\x1d\nu\n\
    \x04\x04\0\x02\0\x12\x03\r\x04\x1f\x1ah*\r\n\x20Manufacturer\x20Identifi\
    er\x20\r\n\r\n\x20Source:\x20\r\n\x20*\x20Windows:\x20WMI\x20-\x20Win32_\
    TPM\x20-\x20ManufacturerId\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\
    \0\x02\0\x05\x12\x03\r\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\r\x0b\
    \x1a\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\r\x1d\x1e\n\xbd\x03\n\x04\x04\0\
    \x02\x01\x12\x03\x1c\x04$\x1a\xaf\x03*\r\n\x20TPM\x20Manufacturer\x20Ver\
    sion\r\n\x20The\x20version\x20of\x20the\x20TPM,\x20as\x20specified\x20by\
    \x20the\x20manufacturer.\r\n\x20When\x20the\x20data\x20is\x20unavailable\
    ,\x20\"Not\x20Supported\"\x20is\x20returned.\r\n\r\n\x20Source:\r\n\x20*\
    \x20Windows:\x20\r\n\x20*\x20Linux:\x20TBD\r\n\x20\x20\x20\x20\x20if\x20\
    WMI\x20-\x20Win32_TPM.ManufacturerVersionFull20\x20has\x20a\x20value\x20\
    (which\x20is\x20not\x20null\x20or\x20empty\x20and\x20does\x20not\x20say\
    \x20\"Not\x20Supported\")\r\n\x20\x20\x20\x20\x20\x20\x20\x20\x20WMI\x20\
    -\x20Win32_TPM\x20-\x20ManufacturerVersionFull20\r\n\x20\x20\x20\x20\x20\
    else\x20\r\n\x20\x20\x20\x20\x20\x20\x20\x20\x20WMI\x20-\x20Win32_TPM\
    \x20-\x20ManufacturerVersion\r\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\
    \x1c\x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x1c\x0b\x1f\n\x0c\n\x05\
    \x04\0\x02\x01\x03\x12\x03\x1c\"#\n\x87\x02\n\x04\x04\0\x02\x02\x12\x03(\
    \x04)\x1a\xf9\x01*\r\n\x20Manufacturer\x20Version\x20Information\x20\r\n\
    \x20Other\x20manufacturer-specific\x20version\x20information\x20for\x20t\
    he\x20TPM.\r\n\x20\r\n\x20When\x20the\x20data\x20is\x20unavailable,\x20\
    \"Not\x20Supported\"\x20is\x20returned.\r\n\x20\r\n\x20Source:\r\n\x20*\
    \x20Windows:\x20WMI\x20-\x20Win32_TPM\x20-\x20ManufacturerVersionInfo\r\
    \n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03(\x04\
    \n\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03(\x0b$\n\x0c\n\x05\x04\0\x02\x02\
    \x03\x12\x03('(\n\xd4\x04\n\x04\x04\0\x02\x03\x12\x034\x04/\x1a\xc6\x04*\
    \r\n\x20TCG\x20Specification\x20Version\x20\r\n\x20The\x20version\x20of\
    \x20the\x20Trusted\x20Computing\x20Group\x20(TCG)\x20specification\x20th\
    at\x20the\x20TPM\x20supports.\x20This\x20value\x20includes\x20the\x20maj\
    or\x20and\x20minor\x20TCG\x20specification\x20version,\x20the\x20specifi\
    cation\x20revision\x20level,\x20and\x20the\x20errata\x20revision\x20leve\
    l.\x20All\x20values\x20are\x20in\x20hexadecimal.\x20For\x20example,\x20a\
    \x20version\x20information\x20of\x20\"1.2,\x202,\x200\"\x20indicates\x20\
    that\x20the\x20device\x20was\x20implemented\x20to\x20TCG\x20specificatio\
    n\x20version\x201.2,\x20revision\x20level\x202,\x20and\x20with\x20no\x20\
    errata.\r\n\x20\r\n\x20When\x20the\x20data\x20is\x20unavailable,\x20\"No\
    t\x20Supported\"\x20is\x20returned.\r\n\x20\r\n\x20Source:\r\n\x20*\x20W\
    indows:\x20WMI\x20-\x20Win32_TPM\x20-\x20SpecVersion\r\n\x20*\x20Linux:\
    \x20TBD\r\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x034\x04\n\n\x0c\n\x05\x04\
    \0\x02\x03\x01\x12\x034\x0b*\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x034-.\n\
    \x84\x02\n\x04\x04\0\x02\x04\x12\x03>\x04)\x1a\xf6\x01*\r\n\x20Physical\
    \x20Presence\x20Interface\x20Version\r\n\x20A\x20communication\x20mechan\
    ism\x20used\x20to\x20run\x20device\x20operations\x20that\x20require\x20p\
    hysical\x20presence,\x20that\x20the\x20computer\x20supports.\r\n\r\n\x20\
    Source:\x20\r\n\x20*\x20Windows:\x20WMI\x20-\x20Win32_Tpm\x20-\x20Physic\
    alPresenceVersionInfo\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\
    \x02\x04\x05\x12\x03>\x04\n\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03>\x0b$\
    \n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03>'(\n\xa5\x01\n\x04\x04\0\x02\x05\
    \x12\x03H\x04\x1b\x1a\x97\x01*\r\n\x20TPM\x20Activation\r\n\x20Indicates\
    \x20if\x20TPM\x20is\x20activated\x20or\x20deactivated\r\n\r\n\x20Source:\
    \x20\r\n\x20*\x20Windows:\x20WMI\x20-\x20Win32_Tpm\x20-\x20IsActivated_I\
    nitialValue\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\x05\x05\
    \x12\x03H\x04\x08\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03H\t\x16\n\x0c\n\
    \x05\x04\0\x02\x05\x03\x12\x03H\x19\x1a\n\x9e\x01\n\x04\x04\0\x02\x06\
    \x12\x03R\x04\x19\x1a\x90\x01*\r\n\x20TPM\x20Enablement\r\n\x20Indicates\
    \x20if\x20TPM\x20is\x20enabled\x20or\x20disabled\r\n\r\n\x20Source:\x20\
    \r\n\x20*\x20Windows:\x20WMI\x20-\x20Win32_Tpm\x20-\x20IsEnabled_Initial\
    Value\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\x06\x05\x12\
    \x03R\x04\x08\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03R\t\x14\n\x0c\n\x05\
    \x04\0\x02\x06\x03\x12\x03R\x17\x18\n\xa9\x01\n\x04\x04\0\x02\x07\x12\
    \x03\\\x04\x1b\x1a\x9b\x01*\r\n\x20TPM\x20Has\x20Owner\r\n\x20Indicates\
    \x20whether\x20the\x20TPM\x20(i.e.\x20device)\x20has\x20an\x20owner.\r\n\
    \r\n\x20Source:\x20\r\n\x20*\x20Windows:\x20WMI\x20-\x20Win32_TPM\x20-\
    \x20IsOwned_InitialValue\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\
    \x02\x07\x05\x12\x03\\\x04\x08\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03\\\t\
    \x16\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03\\\x19\x1ab\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
