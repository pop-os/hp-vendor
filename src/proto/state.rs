// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `hp/xy/sunrise_v1/state.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

// Note: you cannot use pattern matching for enums with allow_alias option
#[derive(Clone,Eq,Debug)]
pub enum HWState {
    HW_STATE_SAME, // 0
    HW_STATE_UNCHANGED, // 0
    HW_STATE_UNSPECIFIED, // 0
    HW_STATE_ADDED, // 1
    HW_STATE_FIRST_DETECTED, // 1
    HW_STATE_REMOVED, // 2
    HW_STATE_NOT_DETECTED, // 2
}

impl ::std::cmp::PartialEq for HWState {
    fn eq(&self, other: &Self) -> bool {
        self.value() == other.value()
    }
}

impl ::std::hash::Hash for HWState {
    fn hash<H : ::std::hash::Hasher>(&self, state: &mut H) {
        state.write_i32(self.value())
    }
}

impl ::protobuf::ProtobufEnum for HWState {
    fn value(&self) -> i32 {
        match *self {
            HWState::HW_STATE_SAME => 0,
            HWState::HW_STATE_UNCHANGED => 0,
            HWState::HW_STATE_UNSPECIFIED => 0,
            HWState::HW_STATE_ADDED => 1,
            HWState::HW_STATE_FIRST_DETECTED => 1,
            HWState::HW_STATE_REMOVED => 2,
            HWState::HW_STATE_NOT_DETECTED => 2,
        }
    }

    fn from_i32(value: i32) -> ::std::option::Option<HWState> {
        match value {
            0 => ::std::option::Option::Some(HWState::HW_STATE_SAME),
            1 => ::std::option::Option::Some(HWState::HW_STATE_ADDED),
            2 => ::std::option::Option::Some(HWState::HW_STATE_REMOVED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [HWState] = &[
            HWState::HW_STATE_SAME,
            HWState::HW_STATE_UNCHANGED,
            HWState::HW_STATE_UNSPECIFIED,
            HWState::HW_STATE_ADDED,
            HWState::HW_STATE_FIRST_DETECTED,
            HWState::HW_STATE_REMOVED,
            HWState::HW_STATE_NOT_DETECTED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("HWState", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for HWState {
}

impl ::std::default::Default for HWState {
    fn default() -> Self {
        HWState::HW_STATE_SAME
    }
}

impl ::protobuf::reflect::ProtobufValue for HWState {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

// Note: you cannot use pattern matching for enums with allow_alias option
#[derive(Clone,Eq,Debug)]
pub enum SWState {
    SW_STATE_SAME, // 0
    SW_STATE_UNCHANGED, // 0
    SW_STATE_UNSPECIFIED, // 0
    SW_STATE_INSTALLED, // 1
    SW_STATE_ADDED, // 1
    SW_STATE_FIRST_DETECTED, // 1
    SW_STATE_UNINSTALLED, // 2
    SW_STATE_REMOVED, // 2
    SW_STATE_NOT_DETECTED, // 2
    SW_STATE_UPDATED, // 3
    SW_STATE_UPGRADED, // 3
}

impl ::std::cmp::PartialEq for SWState {
    fn eq(&self, other: &Self) -> bool {
        self.value() == other.value()
    }
}

impl ::std::hash::Hash for SWState {
    fn hash<H : ::std::hash::Hasher>(&self, state: &mut H) {
        state.write_i32(self.value())
    }
}

impl ::protobuf::ProtobufEnum for SWState {
    fn value(&self) -> i32 {
        match *self {
            SWState::SW_STATE_SAME => 0,
            SWState::SW_STATE_UNCHANGED => 0,
            SWState::SW_STATE_UNSPECIFIED => 0,
            SWState::SW_STATE_INSTALLED => 1,
            SWState::SW_STATE_ADDED => 1,
            SWState::SW_STATE_FIRST_DETECTED => 1,
            SWState::SW_STATE_UNINSTALLED => 2,
            SWState::SW_STATE_REMOVED => 2,
            SWState::SW_STATE_NOT_DETECTED => 2,
            SWState::SW_STATE_UPDATED => 3,
            SWState::SW_STATE_UPGRADED => 3,
        }
    }

    fn from_i32(value: i32) -> ::std::option::Option<SWState> {
        match value {
            0 => ::std::option::Option::Some(SWState::SW_STATE_SAME),
            1 => ::std::option::Option::Some(SWState::SW_STATE_INSTALLED),
            2 => ::std::option::Option::Some(SWState::SW_STATE_UNINSTALLED),
            3 => ::std::option::Option::Some(SWState::SW_STATE_UPDATED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [SWState] = &[
            SWState::SW_STATE_SAME,
            SWState::SW_STATE_UNCHANGED,
            SWState::SW_STATE_UNSPECIFIED,
            SWState::SW_STATE_INSTALLED,
            SWState::SW_STATE_ADDED,
            SWState::SW_STATE_FIRST_DETECTED,
            SWState::SW_STATE_UNINSTALLED,
            SWState::SW_STATE_REMOVED,
            SWState::SW_STATE_NOT_DETECTED,
            SWState::SW_STATE_UPDATED,
            SWState::SW_STATE_UPGRADED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("SWState", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for SWState {
}

impl ::std::default::Default for SWState {
    fn default() -> Self {
        SWState::SW_STATE_SAME
    }
}

impl ::protobuf::reflect::ProtobufValue for SWState {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1chp/xy/sunrise_v1/state.proto\x12\x10hp.xy.sunrise_v1*\xb4\x01\n\
    \x07HWState\x12\x11\n\rHW_STATE_SAME\x10\0\x12\x16\n\x12HW_STATE_UNCHANG\
    ED\x10\0\x12\x18\n\x14HW_STATE_UNSPECIFIED\x10\0\x12\x12\n\x0eHW_STATE_A\
    DDED\x10\x01\x12\x1b\n\x17HW_STATE_FIRST_DETECTED\x10\x01\x12\x14\n\x10H\
    W_STATE_REMOVED\x10\x02\x12\x19\n\x15HW_STATE_NOT_DETECTED\x10\x02\x1a\
    \x02\x10\x01*\x93\x02\n\x07SWState\x12\x11\n\rSW_STATE_SAME\x10\0\x12\
    \x16\n\x12SW_STATE_UNCHANGED\x10\0\x12\x18\n\x14SW_STATE_UNSPECIFIED\x10\
    \0\x12\x16\n\x12SW_STATE_INSTALLED\x10\x01\x12\x12\n\x0eSW_STATE_ADDED\
    \x10\x01\x12\x1b\n\x17SW_STATE_FIRST_DETECTED\x10\x01\x12\x18\n\x14SW_ST\
    ATE_UNINSTALLED\x10\x02\x12\x14\n\x10SW_STATE_REMOVED\x10\x02\x12\x19\n\
    \x15SW_STATE_NOT_DETECTED\x10\x02\x12\x14\n\x10SW_STATE_UPDATED\x10\x03\
    \x12\x15\n\x11SW_STATE_UPGRADED\x10\x03\x1a\x02\x10\x01J\x83\x0c\n\x06\
    \x12\x04\0\00\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\
    \x03\x02\0\x19\nD\n\x02\x05\0\x12\x04\x07\0\x16\x01\x1a8*\r\n\x20HWState\
    \x20defines\x20the\x20possible\x20states\x20of\x20a\x20HW\x20device\r\n\
    \n\n\n\x03\x05\0\x01\x12\x03\x07\x05\x0c\n\n\n\x03\x05\0\x03\x12\x03\x08\
    \x04\x1e\n\x0b\n\x04\x05\0\x03\x02\x12\x03\x08\x04\x1e\n\x87\x01\n\x04\
    \x05\0\x02\0\x12\x03\x0b\x04\x16\x1az\x20SAME/UNCHANGED/UNSPECIFIED\x20m\
    eans\x20no\x20change,\x20the\x20memory/gpu/storage/etc.\x20was\x20not\
    \x20either\x20added\x20or\x20removed\x20(DEFAULT\x20state)\r\n\n\x0c\n\
    \x05\x05\0\x02\0\x01\x12\x03\x0b\x04\x11\n\x0c\n\x05\x05\0\x02\0\x02\x12\
    \x03\x0b\x14\x15\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x0c\x04\x1b\n\x0c\n\
    \x05\x05\0\x02\x01\x01\x12\x03\x0c\x04\x16\n\x0c\n\x05\x05\0\x02\x01\x02\
    \x12\x03\x0c\x19\x1a\n\x0b\n\x04\x05\0\x02\x02\x12\x03\r\x04\x1d\n\x0c\n\
    \x05\x05\0\x02\x02\x01\x12\x03\r\x04\x18\n\x0c\n\x05\x05\0\x02\x02\x02\
    \x12\x03\r\x1b\x1c\nJ\n\x04\x05\0\x02\x03\x12\x03\x10\x04\x17\x1a=\x20AD\
    DED/FIRST_DETECTED\x20means\x20that\x20the\x20device\x20was\x20just\x20a\
    dded\x20\r\n\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03\x10\x04\x12\n\x0c\n\
    \x05\x05\0\x02\x03\x02\x12\x03\x10\x15\x16\n\x0b\n\x04\x05\0\x02\x04\x12\
    \x03\x11\x04\x20\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03\x11\x04\x1b\n\x0c\
    \n\x05\x05\0\x02\x04\x02\x12\x03\x11\x1e\x1f\nF\n\x04\x05\0\x02\x05\x12\
    \x03\x14\x04\x19\x1a9\x20REMOVED/NOT_DETECTED\x20means\x20that\x20the\
    \x20device\x20was\x20removed\r\n\n\x0c\n\x05\x05\0\x02\x05\x01\x12\x03\
    \x14\x04\x14\n\x0c\n\x05\x05\0\x02\x05\x02\x12\x03\x14\x17\x18\n\x0b\n\
    \x04\x05\0\x02\x06\x12\x03\x15\x04\x1e\n\x0c\n\x05\x05\0\x02\x06\x01\x12\
    \x03\x15\x04\x19\n\x0c\n\x05\x05\0\x02\x06\x02\x12\x03\x15\x1c\x1d\n^\n\
    \x02\x05\x01\x12\x04\x1b\00\x01\x1aR*\r\n\x20SWState\x20defines\x20the\
    \x20possible\x20states\x20of\x20a\x20SW\x20(i.e.\x20Application,\x20Firm\
    ware,\x20OS)\r\n\n\n\n\x03\x05\x01\x01\x12\x03\x1b\x05\x0c\n\n\n\x03\x05\
    \x01\x03\x12\x03\x1c\x04\x1e\n\x0b\n\x04\x05\x01\x03\x02\x12\x03\x1c\x04\
    \x1e\nJ\n\x04\x05\x01\x02\0\x12\x03\x1f\x04\x16\x1a=\x20SAME/UNCHANGED/U\
    NSPECIFIED\x20means\x20no\x20change\x20(DEFAULT\x20state)\r\n\n\x0c\n\
    \x05\x05\x01\x02\0\x01\x12\x03\x1f\x04\x11\n\x0c\n\x05\x05\x01\x02\0\x02\
    \x12\x03\x1f\x14\x15\n\x0b\n\x04\x05\x01\x02\x01\x12\x03\x20\x04\x1b\n\
    \x0c\n\x05\x05\x01\x02\x01\x01\x12\x03\x20\x04\x16\n\x0c\n\x05\x05\x01\
    \x02\x01\x02\x12\x03\x20\x19\x1a\n\x0b\n\x04\x05\x01\x02\x02\x12\x03!\
    \x04\x1d\n\x0c\n\x05\x05\x01\x02\x02\x01\x12\x03!\x04\x18\n\x0c\n\x05\
    \x05\x01\x02\x02\x02\x12\x03!\x1b\x1c\nY\n\x04\x05\x01\x02\x03\x12\x03$\
    \x04\x1b\x1aL\x20INSTALLED/ADDED/FIRST_DETECTED\x20means\x20that\x20the\
    \x20application\x20was\x20just\x20added\x20\r\n\n\x0c\n\x05\x05\x01\x02\
    \x03\x01\x12\x03$\x04\x16\n\x0c\n\x05\x05\x01\x02\x03\x02\x12\x03$\x19\
    \x1a\n\x0b\n\x04\x05\x01\x02\x04\x12\x03%\x04\x17\n\x0c\n\x05\x05\x01\
    \x02\x04\x01\x12\x03%\x04\x12\n\x0c\n\x05\x05\x01\x02\x04\x02\x12\x03%\
    \x15\x16\n\x0b\n\x04\x05\x01\x02\x05\x12\x03&\x04\x20\n\x0c\n\x05\x05\
    \x01\x02\x05\x01\x12\x03&\x04\x1b\n\x0c\n\x05\x05\x01\x02\x05\x02\x12\
    \x03&\x1e\x1f\nW\n\x04\x05\x01\x02\x06\x12\x03)\x04\x1d\x1aJ\x20UNINSTAL\
    LED/REMOVED/NOT_DETECTED\x20means\x20that\x20the\x20application\x20was\
    \x20removed\r\n\n\x0c\n\x05\x05\x01\x02\x06\x01\x12\x03)\x04\x18\n\x0c\n\
    \x05\x05\x01\x02\x06\x02\x12\x03)\x1b\x1c\n\x0b\n\x04\x05\x01\x02\x07\
    \x12\x03*\x04\x19\n\x0c\n\x05\x05\x01\x02\x07\x01\x12\x03*\x04\x14\n\x0c\
    \n\x05\x05\x01\x02\x07\x02\x12\x03*\x17\x18\n\x0b\n\x04\x05\x01\x02\x08\
    \x12\x03+\x04\x1e\n\x0c\n\x05\x05\x01\x02\x08\x01\x12\x03+\x04\x19\n\x0c\
    \n\x05\x05\x01\x02\x08\x02\x12\x03+\x1c\x1d\nP\n\x04\x05\x01\x02\t\x12\
    \x03.\x04\x19\x1aC\x20UPDATED/UPGRADED\x20means\x20that\x20the\x20applic\
    ation\x20was\x20updated/upgraded\r\n\n\x0c\n\x05\x05\x01\x02\t\x01\x12\
    \x03.\x04\x14\n\x0c\n\x05\x05\x01\x02\t\x02\x12\x03.\x17\x18\n\x0b\n\x04\
    \x05\x01\x02\n\x12\x03/\x04\x1a\n\x0c\n\x05\x05\x01\x02\n\x01\x12\x03/\
    \x04\x15\n\x0c\n\x05\x05\x01\x02\n\x02\x12\x03/\x18\x19b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
