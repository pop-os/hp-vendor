// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `hp/xy/sunrise_v1/hw/battery.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct Battery {
    // message fields
    pub state: super::state::HWState,
    pub serial_number: ::std::string::String,
    pub ct_number: ::std::string::String,
    pub manufacturer: ::std::string::String,
    pub devicename: ::std::string::String,
    pub energy_design: f32,
    pub voltage_design: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Battery {
    fn default() -> &'a Battery {
        <Battery as ::protobuf::Message>::default_instance()
    }
}

impl Battery {
    pub fn new() -> Battery {
        ::std::default::Default::default()
    }

    // .hp.xy.sunrise_v1.HWState state = 1;


    pub fn get_state(&self) -> super::state::HWState {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = super::state::HWState::HW_STATE_SAME;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: super::state::HWState) {
        self.state = v;
    }

    // string serial_number = 2;


    pub fn get_serial_number(&self) -> &str {
        &self.serial_number
    }
    pub fn clear_serial_number(&mut self) {
        self.serial_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        &mut self.serial_number
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.serial_number, ::std::string::String::new())
    }

    // string ct_number = 3;


    pub fn get_ct_number(&self) -> &str {
        &self.ct_number
    }
    pub fn clear_ct_number(&mut self) {
        self.ct_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_ct_number(&mut self, v: ::std::string::String) {
        self.ct_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ct_number(&mut self) -> &mut ::std::string::String {
        &mut self.ct_number
    }

    // Take field
    pub fn take_ct_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ct_number, ::std::string::String::new())
    }

    // string manufacturer = 4;


    pub fn get_manufacturer(&self) -> &str {
        &self.manufacturer
    }
    pub fn clear_manufacturer(&mut self) {
        self.manufacturer.clear();
    }

    // Param is passed by value, moved
    pub fn set_manufacturer(&mut self, v: ::std::string::String) {
        self.manufacturer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_manufacturer(&mut self) -> &mut ::std::string::String {
        &mut self.manufacturer
    }

    // Take field
    pub fn take_manufacturer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.manufacturer, ::std::string::String::new())
    }

    // string devicename = 5;


    pub fn get_devicename(&self) -> &str {
        &self.devicename
    }
    pub fn clear_devicename(&mut self) {
        self.devicename.clear();
    }

    // Param is passed by value, moved
    pub fn set_devicename(&mut self, v: ::std::string::String) {
        self.devicename = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_devicename(&mut self) -> &mut ::std::string::String {
        &mut self.devicename
    }

    // Take field
    pub fn take_devicename(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.devicename, ::std::string::String::new())
    }

    // float energy_design = 6;


    pub fn get_energy_design(&self) -> f32 {
        self.energy_design
    }
    pub fn clear_energy_design(&mut self) {
        self.energy_design = 0.;
    }

    // Param is passed by value, moved
    pub fn set_energy_design(&mut self, v: f32) {
        self.energy_design = v;
    }

    // float voltage_design = 7;


    pub fn get_voltage_design(&self) -> f32 {
        self.voltage_design
    }
    pub fn clear_voltage_design(&mut self) {
        self.voltage_design = 0.;
    }

    // Param is passed by value, moved
    pub fn set_voltage_design(&mut self, v: f32) {
        self.voltage_design = v;
    }
}

impl ::protobuf::Message for Battery {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.serial_number)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ct_number)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.manufacturer)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.devicename)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.energy_design = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.voltage_design = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.state != super::state::HWState::HW_STATE_SAME {
            my_size += ::protobuf::rt::enum_size(1, self.state);
        }
        if !self.serial_number.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.serial_number);
        }
        if !self.ct_number.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.ct_number);
        }
        if !self.manufacturer.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.manufacturer);
        }
        if !self.devicename.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.devicename);
        }
        if self.energy_design != 0. {
            my_size += 5;
        }
        if self.voltage_design != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.state != super::state::HWState::HW_STATE_SAME {
            os.write_enum(1, self.state.value())?;
        }
        if !self.serial_number.is_empty() {
            os.write_string(2, &self.serial_number)?;
        }
        if !self.ct_number.is_empty() {
            os.write_string(3, &self.ct_number)?;
        }
        if !self.manufacturer.is_empty() {
            os.write_string(4, &self.manufacturer)?;
        }
        if !self.devicename.is_empty() {
            os.write_string(5, &self.devicename)?;
        }
        if self.energy_design != 0. {
            os.write_float(6, self.energy_design)?;
        }
        if self.voltage_design != 0. {
            os.write_float(7, self.voltage_design)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Battery {
        Battery::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::state::HWState>>(
                    "state",
                    |m: &Battery| { &m.state },
                    |m: &mut Battery| { &mut m.state },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "serial_number",
                    |m: &Battery| { &m.serial_number },
                    |m: &mut Battery| { &mut m.serial_number },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ct_number",
                    |m: &Battery| { &m.ct_number },
                    |m: &mut Battery| { &mut m.ct_number },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "manufacturer",
                    |m: &Battery| { &m.manufacturer },
                    |m: &mut Battery| { &mut m.manufacturer },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "devicename",
                    |m: &Battery| { &m.devicename },
                    |m: &mut Battery| { &mut m.devicename },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "energy_design",
                    |m: &Battery| { &m.energy_design },
                    |m: &mut Battery| { &mut m.energy_design },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "voltage_design",
                    |m: &Battery| { &m.voltage_design },
                    |m: &mut Battery| { &mut m.voltage_design },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Battery>(
                    "Battery",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Battery {
        static mut instance: ::protobuf::lazy::Lazy<Battery> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Battery,
        };
        unsafe {
            instance.get(Battery::new)
        }
    }
}

impl ::protobuf::Clear for Battery {
    fn clear(&mut self) {
        self.state = super::state::HWState::HW_STATE_SAME;
        self.serial_number.clear();
        self.ct_number.clear();
        self.manufacturer.clear();
        self.devicename.clear();
        self.energy_design = 0.;
        self.voltage_design = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Battery {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Battery {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BatteryUsage {
    // message fields
    pub serial_number: ::std::string::String,
    pub ct_number: ::std::string::String,
    pub time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub state: ::std::string::String,
    pub cycle_count: i32,
    pub energy_full: f32,
    pub energy_remaining: f32,
    pub energy_rate: i32,
    pub voltage: i32,
    pub time_to_empty: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub eletric_current: i32,
    pub temperature: i32,
    pub max_error: i32,
    pub status_register: i32,
    pub cell_voltage: ::std::vec::Vec<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BatteryUsage {
    fn default() -> &'a BatteryUsage {
        <BatteryUsage as ::protobuf::Message>::default_instance()
    }
}

impl BatteryUsage {
    pub fn new() -> BatteryUsage {
        ::std::default::Default::default()
    }

    // string serial_number = 1;


    pub fn get_serial_number(&self) -> &str {
        &self.serial_number
    }
    pub fn clear_serial_number(&mut self) {
        self.serial_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        &mut self.serial_number
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.serial_number, ::std::string::String::new())
    }

    // string ct_number = 2;


    pub fn get_ct_number(&self) -> &str {
        &self.ct_number
    }
    pub fn clear_ct_number(&mut self) {
        self.ct_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_ct_number(&mut self, v: ::std::string::String) {
        self.ct_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ct_number(&mut self) -> &mut ::std::string::String {
        &mut self.ct_number
    }

    // Take field
    pub fn take_ct_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ct_number, ::std::string::String::new())
    }

    // .google.protobuf.Timestamp time = 3;


    pub fn get_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.time.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_time(&mut self) {
        self.time.clear();
    }

    pub fn has_time(&self) -> bool {
        self.time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.time.is_none() {
            self.time.set_default();
        }
        self.time.as_mut().unwrap()
    }

    // Take field
    pub fn take_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // string state = 4;


    pub fn get_state(&self) -> &str {
        &self.state
    }
    pub fn clear_state(&mut self) {
        self.state.clear();
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: ::std::string::String) {
        self.state = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_state(&mut self) -> &mut ::std::string::String {
        &mut self.state
    }

    // Take field
    pub fn take_state(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.state, ::std::string::String::new())
    }

    // int32 cycle_count = 5;


    pub fn get_cycle_count(&self) -> i32 {
        self.cycle_count
    }
    pub fn clear_cycle_count(&mut self) {
        self.cycle_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_cycle_count(&mut self, v: i32) {
        self.cycle_count = v;
    }

    // float energy_full = 6;


    pub fn get_energy_full(&self) -> f32 {
        self.energy_full
    }
    pub fn clear_energy_full(&mut self) {
        self.energy_full = 0.;
    }

    // Param is passed by value, moved
    pub fn set_energy_full(&mut self, v: f32) {
        self.energy_full = v;
    }

    // float energy_remaining = 7;


    pub fn get_energy_remaining(&self) -> f32 {
        self.energy_remaining
    }
    pub fn clear_energy_remaining(&mut self) {
        self.energy_remaining = 0.;
    }

    // Param is passed by value, moved
    pub fn set_energy_remaining(&mut self, v: f32) {
        self.energy_remaining = v;
    }

    // int32 energy_rate = 8;


    pub fn get_energy_rate(&self) -> i32 {
        self.energy_rate
    }
    pub fn clear_energy_rate(&mut self) {
        self.energy_rate = 0;
    }

    // Param is passed by value, moved
    pub fn set_energy_rate(&mut self, v: i32) {
        self.energy_rate = v;
    }

    // int32 voltage = 9;


    pub fn get_voltage(&self) -> i32 {
        self.voltage
    }
    pub fn clear_voltage(&mut self) {
        self.voltage = 0;
    }

    // Param is passed by value, moved
    pub fn set_voltage(&mut self, v: i32) {
        self.voltage = v;
    }

    // .google.protobuf.Duration time_to_empty = 10;


    pub fn get_time_to_empty(&self) -> &::protobuf::well_known_types::Duration {
        self.time_to_empty.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Duration::default_instance())
    }
    pub fn clear_time_to_empty(&mut self) {
        self.time_to_empty.clear();
    }

    pub fn has_time_to_empty(&self) -> bool {
        self.time_to_empty.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_to_empty(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.time_to_empty = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_time_to_empty(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.time_to_empty.is_none() {
            self.time_to_empty.set_default();
        }
        self.time_to_empty.as_mut().unwrap()
    }

    // Take field
    pub fn take_time_to_empty(&mut self) -> ::protobuf::well_known_types::Duration {
        self.time_to_empty.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // int32 eletric_current = 11;


    pub fn get_eletric_current(&self) -> i32 {
        self.eletric_current
    }
    pub fn clear_eletric_current(&mut self) {
        self.eletric_current = 0;
    }

    // Param is passed by value, moved
    pub fn set_eletric_current(&mut self, v: i32) {
        self.eletric_current = v;
    }

    // int32 temperature = 12;


    pub fn get_temperature(&self) -> i32 {
        self.temperature
    }
    pub fn clear_temperature(&mut self) {
        self.temperature = 0;
    }

    // Param is passed by value, moved
    pub fn set_temperature(&mut self, v: i32) {
        self.temperature = v;
    }

    // int32 max_error = 13;


    pub fn get_max_error(&self) -> i32 {
        self.max_error
    }
    pub fn clear_max_error(&mut self) {
        self.max_error = 0;
    }

    // Param is passed by value, moved
    pub fn set_max_error(&mut self, v: i32) {
        self.max_error = v;
    }

    // int32 status_register = 14;


    pub fn get_status_register(&self) -> i32 {
        self.status_register
    }
    pub fn clear_status_register(&mut self) {
        self.status_register = 0;
    }

    // Param is passed by value, moved
    pub fn set_status_register(&mut self, v: i32) {
        self.status_register = v;
    }

    // repeated int32 cell_voltage = 15;


    pub fn get_cell_voltage(&self) -> &[i32] {
        &self.cell_voltage
    }
    pub fn clear_cell_voltage(&mut self) {
        self.cell_voltage.clear();
    }

    // Param is passed by value, moved
    pub fn set_cell_voltage(&mut self, v: ::std::vec::Vec<i32>) {
        self.cell_voltage = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cell_voltage(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.cell_voltage
    }

    // Take field
    pub fn take_cell_voltage(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.cell_voltage, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for BatteryUsage {
    fn is_initialized(&self) -> bool {
        for v in &self.time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.time_to_empty {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.serial_number)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ct_number)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.time)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.state)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.cycle_count = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.energy_full = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.energy_remaining = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.energy_rate = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.voltage = tmp;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.time_to_empty)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.eletric_current = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.temperature = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.max_error = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.status_register = tmp;
                },
                15 => {
                    ::protobuf::rt::read_repeated_int32_into(wire_type, is, &mut self.cell_voltage)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.serial_number.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.serial_number);
        }
        if !self.ct_number.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.ct_number);
        }
        if let Some(ref v) = self.time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.state.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.state);
        }
        if self.cycle_count != 0 {
            my_size += ::protobuf::rt::value_size(5, self.cycle_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.energy_full != 0. {
            my_size += 5;
        }
        if self.energy_remaining != 0. {
            my_size += 5;
        }
        if self.energy_rate != 0 {
            my_size += ::protobuf::rt::value_size(8, self.energy_rate, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.voltage != 0 {
            my_size += ::protobuf::rt::value_size(9, self.voltage, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.time_to_empty.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.eletric_current != 0 {
            my_size += ::protobuf::rt::value_size(11, self.eletric_current, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.temperature != 0 {
            my_size += ::protobuf::rt::value_size(12, self.temperature, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.max_error != 0 {
            my_size += ::protobuf::rt::value_size(13, self.max_error, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.status_register != 0 {
            my_size += ::protobuf::rt::value_size(14, self.status_register, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.cell_voltage {
            my_size += ::protobuf::rt::value_size(15, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.serial_number.is_empty() {
            os.write_string(1, &self.serial_number)?;
        }
        if !self.ct_number.is_empty() {
            os.write_string(2, &self.ct_number)?;
        }
        if let Some(ref v) = self.time.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.state.is_empty() {
            os.write_string(4, &self.state)?;
        }
        if self.cycle_count != 0 {
            os.write_int32(5, self.cycle_count)?;
        }
        if self.energy_full != 0. {
            os.write_float(6, self.energy_full)?;
        }
        if self.energy_remaining != 0. {
            os.write_float(7, self.energy_remaining)?;
        }
        if self.energy_rate != 0 {
            os.write_int32(8, self.energy_rate)?;
        }
        if self.voltage != 0 {
            os.write_int32(9, self.voltage)?;
        }
        if let Some(ref v) = self.time_to_empty.as_ref() {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.eletric_current != 0 {
            os.write_int32(11, self.eletric_current)?;
        }
        if self.temperature != 0 {
            os.write_int32(12, self.temperature)?;
        }
        if self.max_error != 0 {
            os.write_int32(13, self.max_error)?;
        }
        if self.status_register != 0 {
            os.write_int32(14, self.status_register)?;
        }
        for v in &self.cell_voltage {
            os.write_int32(15, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BatteryUsage {
        BatteryUsage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "serial_number",
                    |m: &BatteryUsage| { &m.serial_number },
                    |m: &mut BatteryUsage| { &mut m.serial_number },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ct_number",
                    |m: &BatteryUsage| { &m.ct_number },
                    |m: &mut BatteryUsage| { &mut m.ct_number },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "time",
                    |m: &BatteryUsage| { &m.time },
                    |m: &mut BatteryUsage| { &mut m.time },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "state",
                    |m: &BatteryUsage| { &m.state },
                    |m: &mut BatteryUsage| { &mut m.state },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "cycle_count",
                    |m: &BatteryUsage| { &m.cycle_count },
                    |m: &mut BatteryUsage| { &mut m.cycle_count },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "energy_full",
                    |m: &BatteryUsage| { &m.energy_full },
                    |m: &mut BatteryUsage| { &mut m.energy_full },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "energy_remaining",
                    |m: &BatteryUsage| { &m.energy_remaining },
                    |m: &mut BatteryUsage| { &mut m.energy_remaining },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "energy_rate",
                    |m: &BatteryUsage| { &m.energy_rate },
                    |m: &mut BatteryUsage| { &mut m.energy_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "voltage",
                    |m: &BatteryUsage| { &m.voltage },
                    |m: &mut BatteryUsage| { &mut m.voltage },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                    "time_to_empty",
                    |m: &BatteryUsage| { &m.time_to_empty },
                    |m: &mut BatteryUsage| { &mut m.time_to_empty },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "eletric_current",
                    |m: &BatteryUsage| { &m.eletric_current },
                    |m: &mut BatteryUsage| { &mut m.eletric_current },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "temperature",
                    |m: &BatteryUsage| { &m.temperature },
                    |m: &mut BatteryUsage| { &mut m.temperature },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "max_error",
                    |m: &BatteryUsage| { &m.max_error },
                    |m: &mut BatteryUsage| { &mut m.max_error },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "status_register",
                    |m: &BatteryUsage| { &m.status_register },
                    |m: &mut BatteryUsage| { &mut m.status_register },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "cell_voltage",
                    |m: &BatteryUsage| { &m.cell_voltage },
                    |m: &mut BatteryUsage| { &mut m.cell_voltage },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BatteryUsage>(
                    "BatteryUsage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BatteryUsage {
        static mut instance: ::protobuf::lazy::Lazy<BatteryUsage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BatteryUsage,
        };
        unsafe {
            instance.get(BatteryUsage::new)
        }
    }
}

impl ::protobuf::Clear for BatteryUsage {
    fn clear(&mut self) {
        self.serial_number.clear();
        self.ct_number.clear();
        self.time.clear();
        self.state.clear();
        self.cycle_count = 0;
        self.energy_full = 0.;
        self.energy_remaining = 0.;
        self.energy_rate = 0;
        self.voltage = 0;
        self.time_to_empty.clear();
        self.eletric_current = 0;
        self.temperature = 0;
        self.max_error = 0;
        self.status_register = 0;
        self.cell_voltage.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BatteryUsage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BatteryUsage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!hp/xy/sunrise_v1/hw/battery.proto\x12\x13hp.xy.sunrise_v1.hw\x1a\x1fg\
    oogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\
    \x1chp/xy/sunrise_v1/state.proto\"\x8c\x02\n\x07Battery\x12/\n\x05state\
    \x18\x01\x20\x01(\x0e2\x19.hp.xy.sunrise_v1.HWStateR\x05state\x12#\n\rse\
    rial_number\x18\x02\x20\x01(\tR\x0cserialNumber\x12\x1b\n\tct_number\x18\
    \x03\x20\x01(\tR\x08ctNumber\x12\"\n\x0cmanufacturer\x18\x04\x20\x01(\tR\
    \x0cmanufacturer\x12\x1e\n\ndevicename\x18\x05\x20\x01(\tR\ndevicename\
    \x12#\n\renergy_design\x18\x06\x20\x01(\x02R\x0cenergyDesign\x12%\n\x0ev\
    oltage_design\x18\x07\x20\x01(\x02R\rvoltageDesign\"\xb1\x04\n\x0cBatter\
    yUsage\x12#\n\rserial_number\x18\x01\x20\x01(\tR\x0cserialNumber\x12\x1b\
    \n\tct_number\x18\x02\x20\x01(\tR\x08ctNumber\x12.\n\x04time\x18\x03\x20\
    \x01(\x0b2\x1a.google.protobuf.TimestampR\x04time\x12\x14\n\x05state\x18\
    \x04\x20\x01(\tR\x05state\x12\x1f\n\x0bcycle_count\x18\x05\x20\x01(\x05R\
    \ncycleCount\x12\x1f\n\x0benergy_full\x18\x06\x20\x01(\x02R\nenergyFull\
    \x12)\n\x10energy_remaining\x18\x07\x20\x01(\x02R\x0fenergyRemaining\x12\
    \x1f\n\x0benergy_rate\x18\x08\x20\x01(\x05R\nenergyRate\x12\x18\n\x07vol\
    tage\x18\t\x20\x01(\x05R\x07voltage\x12=\n\rtime_to_empty\x18\n\x20\x01(\
    \x0b2\x19.google.protobuf.DurationR\x0btimeToEmpty\x12'\n\x0feletric_cur\
    rent\x18\x0b\x20\x01(\x05R\x0eeletricCurrent\x12\x20\n\x0btemperature\
    \x18\x0c\x20\x01(\x05R\x0btemperature\x12\x1b\n\tmax_error\x18\r\x20\x01\
    (\x05R\x08maxError\x12'\n\x0fstatus_register\x18\x0e\x20\x01(\x05R\x0est\
    atusRegister\x12!\n\x0ccell_voltage\x18\x0f\x20\x03(\x05R\x0bcellVoltage\
    J\xf2\x1e\n\x07\x12\x05\0\0\xb8\x01\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\
    \n\x08\n\x01\x02\x12\x03\x02\0\x1c\n\t\n\x02\x03\0\x12\x03\x04\0)\n\t\n\
    \x02\x03\x01\x12\x03\x05\0(\n\t\n\x02\x03\x02\x12\x03\x06\0&\n\n\n\x02\
    \x04\0\x12\x04\x08\0S\x01\n\n\n\x03\x04\0\x01\x12\x03\x08\x08\x0f\n\xa0\
    \x02\n\x04\x04\0\x02\0\x12\x03\x10\x04\x16\x1a\x92\x02*\r\n\x20HW\x20Sta\
    te\r\n\x20\r\n\x20HW_STATE_ADDED\x20-\x20The\x20HW\x20component\x20was\
    \x20added\x20or\x20first\x20detected\x20(all\x20data\x20fields\x20are\
    \x20populated)\r\n\x20HW_STATE_REMOVED\x20-\x20The\x20HW\x20component\
    \x20was\x20removed\x20or\x20not\x20detected\x20anymore\x20(If\x20there\
    \x20are\x20Primary\x20Keys\x20defined\x20send\x20them\x20only,\x20otherw\
    ise\x20populate\x20all\x20data\x20fields)\r\n\n\x0c\n\x05\x04\0\x02\0\
    \x06\x12\x03\x10\x04\x0b\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x10\x0c\x11\
    \n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x10\x14\x15\n\x86\x01\n\x04\x04\0\
    \x02\x01\x12\x03\x1b\x04\x1d\x1ay*\r\n\x20Battery\x20Serial\x20Number\
    \x20(PRIMARY\x20KEY)\r\n\x20\r\n\x20Example:\x2022536\x202021/05/26\r\n\
    \x20\r\n\x20Source:\x20\r\n\x20*\x20Windows:\x20HP\x20WMI\r\n\x20*\x20Li\
    nux:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x1b\x04\n\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03\x1b\x0b\x18\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\x1b\x1b\x1c\n\x9a\x01\n\x04\x04\0\x02\x02\x12\x03&\x04\x19\x1a\
    \x8c\x01*\r\n\x20Battery\x20CT\x20Number\x20-\x20HP-specific\x20format\
    \x20(PRIMARY\x20KEY)\x20\r\n\x20\r\n\x20Example:\x206DJGHNBGW8Y6IP\r\n\
    \x20\r\n\x20Source:\x20\r\n\x20*\x20Windows:\x20HP\x20WMI\r\n\x20*\x20Li\
    nux:\x20HP\x20WMI\r\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03&\x04\n\n\x0c\
    \n\x05\x04\0\x02\x02\x01\x12\x03&\x0b\x14\n\x0c\n\x05\x04\0\x02\x02\x03\
    \x12\x03&\x17\x18\n\x80\x01\n\x04\x04\0\x02\x03\x12\x031\x04\x1c\x1as*\r\
    \n\x20Battery\x20Manufacturer\x20(encoded\x20values)\r\n\x20\r\n\x20Exam\
    ple:\x2033-42\r\n\x20\r\n\x20Source:\x20\r\n\x20*\x20Windows:\x20HP\x20W\
    MI\r\n\x20*\x20Linux:\x20`lshw`\r\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\
    \x031\x04\n\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x031\x0b\x17\n\x0c\n\x05\
    \x04\0\x02\x03\x03\x12\x031\x1a\x1b\nj\n\x04\x04\0\x02\x04\x12\x03<\x04\
    \x1a\x1a]*\r\n\x20Device\x20Name\r\n\x20\r\n\x20Example:\x20battery_BAT0\
    \r\n\x20\r\n\x20Source:\x20\r\n\x20*\x20Windows:\x20HP\x20WMI\r\n\x20*\
    \x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03<\x04\n\n\x0c\
    \n\x05\x04\0\x02\x04\x01\x12\x03<\x0b\x15\n\x0c\n\x05\x04\0\x02\x04\x03\
    \x12\x03<\x18\x19\n\x9c\x01\n\x04\x04\0\x02\x05\x12\x03G\x04\x1c\x1a\x8e\
    \x01*\r\n\x20Battery\x20Design\x20Charge\x20Capacity\x20(in\x20Wh)\r\n\
    \x20\r\n\x20Example:\x204450\r\n\x20\r\n\x20Source:\x20\r\n\x20*\x20Wind\
    ows:\x20WMI\x20-\x20Win32_Battery\x20-\x20DesignCapacity\r\n\x20*\x20Lin\
    ux:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03G\x04\t\n\x0c\n\x05\
    \x04\0\x02\x05\x01\x12\x03G\n\x17\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03G\
    \x1a\x1b\n\xa3\x01\n\x04\x04\0\x02\x06\x12\x03R\x04\x1d\x1a\x95\x01*\r\n\
    \x20Battery\x20Design\x20Voltage\x20(in\x20mV)\r\n\x20\r\n\x20Example:\
    \x2011400\r\n\x20\r\n\x20Source:\x20\r\n\x20*\x20Windows:\x20HP\x20WMI\r\
    \n\x20*\x20Linux:\x20/sys/class/power_supply/BAT0/voltage_min_design\r\n\
    \n\x0c\n\x05\x04\0\x02\x06\x05\x12\x03R\x04\t\n\x0c\n\x05\x04\0\x02\x06\
    \x01\x12\x03R\n\x18\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03R\x1b\x1c\n\xc7\
    \x01\n\x02\x04\x01\x12\x05[\0\xb8\x01\x01\x1a\xb9\x01*\r\n\x20Battery\
    \x20Events\x20captured\x20on\x20a\x20frequency\x20defined\x20by\x20the\
    \x20Battery\x20Usage\x20trigger\r\n\x20This\x20may\x20mean\x20weekly,\
    \x20daily,\x20or\x20listening\x20to\x20certain\x20events\r\n\x20\r\n\x20\
    Most\x20fields\x20are\x20available\x20in\x20upower\x20\r\n\n\n\n\x03\x04\
    \x01\x01\x12\x03[\x08\x14\nx\n\x04\x04\x01\x02\0\x12\x03f\x04\x1d\x1ak*\
    \r\n\x20Battery\x20Serial\x20Number\r\n\x20\r\n\x20Example:\x2022536\x20\
    2021/05/26\r\n\x20\r\n\x20Source:\x20\r\n\x20*\x20Windows:\x20HP\x20WMI\
    \r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03f\
    \x04\n\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03f\x0b\x18\n\x0c\n\x05\x04\
    \x01\x02\0\x03\x12\x03f\x1b\x1c\n\x8a\x01\n\x04\x04\x01\x02\x01\x12\x03q\
    \x04\x19\x1a}*\r\n\x20Battery\x20CT\x20Number\x20(HP-specific\x20format)\
    \r\n\x20\r\n\x20Example:\x206DJGHNBGW8Y6IP\r\n\x20\r\n\x20Source:\x20\r\
    \n\x20*\x20Windows:\x20HP\x20WMI\r\n\x20*\x20Linux:\x20HP\x20WMI\r\n\n\
    \x0c\n\x05\x04\x01\x02\x01\x05\x12\x03q\x04\n\n\x0c\n\x05\x04\x01\x02\
    \x01\x01\x12\x03q\x0b\x14\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03q\x17\
    \x18\n$\n\x04\x04\x01\x02\x02\x12\x03v\x04'\x1a\x17*\r\n\x20Time\x20of\
    \x20the\x20event\r\n\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\x03v\x04\x1d\n\
    \x0c\n\x05\x04\x01\x02\x02\x01\x12\x03v\x1e\"\n\x0c\n\x05\x04\x01\x02\
    \x02\x03\x12\x03v%&\nI\n\x04\x04\x01\x02\x03\x12\x03~\x04\x15\x1a<*\r\n\
    \x20State\x20of\x20the\x20battery\r\n\x20\r\n\x20Source:\r\n\x20*\x20Lin\
    ux:\x20upower\x20-d\r\n\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03~\x04\n\n\
    \x0c\n\x05\x04\x01\x02\x03\x01\x12\x03~\x0b\x10\n\x0c\n\x05\x04\x01\x02\
    \x03\x03\x12\x03~\x13\x14\n\x83\x01\n\x04\x04\x01\x02\x04\x12\x04\x86\
    \x01\x04\x1a\x1au*\r\n\x20Number\x20of\x20full\x20discharge\x20cycles\
    \x20of\x20the\x20battery\r\n\x20\r\n\x20Source:\r\n\x20*\x20Linux:\x20/s\
    ys/class/power_supply/BAT0/cycle_count\r\n\n\r\n\x05\x04\x01\x02\x04\x05\
    \x12\x04\x86\x01\x04\t\n\r\n\x05\x04\x01\x02\x04\x01\x12\x04\x86\x01\n\
    \x15\n\r\n\x05\x04\x01\x02\x04\x03\x12\x04\x86\x01\x18\x19\n\xbb\x01\n\
    \x04\x04\x01\x02\x05\x12\x04\x8f\x01\x04\x1a\x1a\xac\x01*\r\n\x20Total\
    \x20Energy\x20when\x20the\x20battery\x20is\x20at\x20its\x20full\x20capac\
    ity\x20(in\x20Wh)\x20\r\n\x20This\x20value\x20is\x20the\x20main\x20indic\
    ator\x20of\x20the\x20expected\x20life\x20of\x20a\x20battery\x20\r\n\x20\
    \r\n\x20Source:\r\n\x20*\x20Linux:\x20upower\x20-d\r\n\n\r\n\x05\x04\x01\
    \x02\x05\x05\x12\x04\x8f\x01\x04\t\n\r\n\x05\x04\x01\x02\x05\x01\x12\x04\
    \x8f\x01\n\x15\n\r\n\x05\x04\x01\x02\x05\x03\x12\x04\x8f\x01\x18\x19\n\
    \x8b\x01\n\x04\x04\x01\x02\x06\x12\x04\x97\x01\x04\x1f\x1a}*\r\n\x20Rema\
    ining\x20energy\x20(in\x20Wh)\x20of\x20the\x20battery\x20before\x20reach\
    ing\x20zero\x20in\x20this\x20discharge\x20cycle\x20\r\n\x20\r\n\x20Sourc\
    e:\r\n\x20*\x20Linux:\x20upower\x20-d\r\n\n\r\n\x05\x04\x01\x02\x06\x05\
    \x12\x04\x97\x01\x04\t\n\r\n\x05\x04\x01\x02\x06\x01\x12\x04\x97\x01\n\
    \x1a\n\r\n\x05\x04\x01\x02\x06\x03\x12\x04\x97\x01\x1d\x1e\n\\\n\x04\x04\
    \x01\x02\x07\x12\x04\x9f\x01\x04\x1a\x1aN*\r\n\x20Charge\x20or\x20Discha\
    rge\x20energy\x20rate\x20(in\x20W)\r\n\x20\r\n\x20Source:\r\n\x20*\x20Li\
    nux:\x20upower\x20-d\r\n\n\r\n\x05\x04\x01\x02\x07\x05\x12\x04\x9f\x01\
    \x04\t\n\r\n\x05\x04\x01\x02\x07\x01\x12\x04\x9f\x01\n\x15\n\r\n\x05\x04\
    \x01\x02\x07\x03\x12\x04\x9f\x01\x18\x19\nT\n\x04\x04\x01\x02\x08\x12\
    \x04\xa7\x01\x04\x16\x1aF*\r\n\x20Current\x20battery\x20Voltage\x20(in\
    \x20V)\r\n\x20\r\n\x20Source:\r\n\x20*\x20Linux:\x20upower\x20-d\r\n\n\r\
    \n\x05\x04\x01\x02\x08\x05\x12\x04\xa7\x01\x04\t\n\r\n\x05\x04\x01\x02\
    \x08\x01\x12\x04\xa7\x01\n\x11\n\r\n\x05\x04\x01\x02\x08\x03\x12\x04\xa7\
    \x01\x14\x15\nT\n\x04\x04\x01\x02\t\x12\x04\xaf\x01\x040\x1aF*\r\n\x20Cu\
    rrent\x20battery\x20Voltage\x20(in\x20V)\r\n\x20\r\n\x20Source:\r\n\x20*\
    \x20Linux:\x20upower\x20-d\r\n\n\r\n\x05\x04\x01\x02\t\x06\x12\x04\xaf\
    \x01\x04\x1c\n\r\n\x05\x04\x01\x02\t\x01\x12\x04\xaf\x01\x1d*\n\r\n\x05\
    \x04\x01\x02\t\x03\x12\x04\xaf\x01-/\n\xe5\x01\n\x04\x04\x01\x02\n\x12\
    \x04\xb3\x01\x04\x1f\x1a\xcf\x01\x20AUGUSTO:\x20I\x20was\x20not\x20able\
    \x20to\x20find\x20source\x20for\x20those\x20fields,\x20they\x20should\
    \x20be\x20accessible\x20with\x20HP\x20WMI\r\n\x20Probably\x20with\x20thi\
    s\x20command:\x20https://github.com/torvalds/linux/blob/master/drivers/p\
    latform/x86/hp-wmi.c#L82\r\n\"\x05\x20mA\r\n\n\r\n\x05\x04\x01\x02\n\x05\
    \x12\x04\xb3\x01\x04\t\n\r\n\x05\x04\x01\x02\n\x01\x12\x04\xb3\x01\n\x19\
    \n\r\n\x05\x04\x01\x02\n\x03\x12\x04\xb3\x01\x1c\x1e\n\x14\n\x04\x04\x01\
    \x02\x0b\x12\x04\xb4\x01\x04\x1b\"\x06\x20\xc2\xbaC\r\n\n\r\n\x05\x04\
    \x01\x02\x0b\x05\x12\x04\xb4\x01\x04\t\n\r\n\x05\x04\x01\x02\x0b\x01\x12\
    \x04\xb4\x01\n\x15\n\r\n\x05\x04\x01\x02\x0b\x03\x12\x04\xb4\x01\x18\x1a\
    \n\x16\n\x04\x04\x01\x02\x0c\x12\x04\xb5\x01\x04\x19\"\x08\x200-100\r\n\
    \n\r\n\x05\x04\x01\x02\x0c\x05\x12\x04\xb5\x01\x04\t\n\r\n\x05\x04\x01\
    \x02\x0c\x01\x12\x04\xb5\x01\n\x13\n\r\n\x05\x04\x01\x02\x0c\x03\x12\x04\
    \xb5\x01\x16\x18\nD\n\x04\x04\x01\x02\r\x12\x04\xb6\x01\x04\x1f\"6\x20Bi\
    t\x20encoded\x20battery\x20status\x20(see\x20SMART\x20Battery\x20Spec)\r\
    \n\n\r\n\x05\x04\x01\x02\r\x05\x12\x04\xb6\x01\x04\t\n\r\n\x05\x04\x01\
    \x02\r\x01\x12\x04\xb6\x01\n\x19\n\r\n\x05\x04\x01\x02\r\x03\x12\x04\xb6\
    \x01\x1c\x1e\nK\n\x04\x04\x01\x02\x0e\x12\x04\xb7\x01\x04%\"=\x20mV\x20(\
    most\x20devices\x20have\x203\x20cells,\x20but\x204\x20and\x202\x20are\
    \x20also\x20found)\r\n\n\r\n\x05\x04\x01\x02\x0e\x04\x12\x04\xb7\x01\x04\
    \x0c\n\r\n\x05\x04\x01\x02\x0e\x05\x12\x04\xb7\x01\r\x12\n\r\n\x05\x04\
    \x01\x02\x0e\x01\x12\x04\xb7\x01\x13\x1f\n\r\n\x05\x04\x01\x02\x0e\x03\
    \x12\x04\xb7\x01\"$b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
