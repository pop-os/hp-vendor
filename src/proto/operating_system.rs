// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `hp/xy/sunrise_v1/sw/operating_system.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct OperatingSystem {
    // message fields
    pub state: super::state::SWState,
    pub name: ::std::string::String,
    pub version: ::std::string::String,
    pub codename: ::std::string::String,
    pub manufacturer: ::std::string::String,
    pub sku: ::std::string::String,
    pub boot_device: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OperatingSystem {
    fn default() -> &'a OperatingSystem {
        <OperatingSystem as ::protobuf::Message>::default_instance()
    }
}

impl OperatingSystem {
    pub fn new() -> OperatingSystem {
        ::std::default::Default::default()
    }

    // .hp.xy.sunrise_v1.SWState state = 1;


    pub fn get_state(&self) -> super::state::SWState {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = super::state::SWState::SW_STATE_SAME;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: super::state::SWState) {
        self.state = v;
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string version = 3;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }

    // string codename = 4;


    pub fn get_codename(&self) -> &str {
        &self.codename
    }
    pub fn clear_codename(&mut self) {
        self.codename.clear();
    }

    // Param is passed by value, moved
    pub fn set_codename(&mut self, v: ::std::string::String) {
        self.codename = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_codename(&mut self) -> &mut ::std::string::String {
        &mut self.codename
    }

    // Take field
    pub fn take_codename(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.codename, ::std::string::String::new())
    }

    // string manufacturer = 5;


    pub fn get_manufacturer(&self) -> &str {
        &self.manufacturer
    }
    pub fn clear_manufacturer(&mut self) {
        self.manufacturer.clear();
    }

    // Param is passed by value, moved
    pub fn set_manufacturer(&mut self, v: ::std::string::String) {
        self.manufacturer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_manufacturer(&mut self) -> &mut ::std::string::String {
        &mut self.manufacturer
    }

    // Take field
    pub fn take_manufacturer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.manufacturer, ::std::string::String::new())
    }

    // string sku = 6;


    pub fn get_sku(&self) -> &str {
        &self.sku
    }
    pub fn clear_sku(&mut self) {
        self.sku.clear();
    }

    // Param is passed by value, moved
    pub fn set_sku(&mut self, v: ::std::string::String) {
        self.sku = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sku(&mut self) -> &mut ::std::string::String {
        &mut self.sku
    }

    // Take field
    pub fn take_sku(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sku, ::std::string::String::new())
    }

    // string boot_device = 7;


    pub fn get_boot_device(&self) -> &str {
        &self.boot_device
    }
    pub fn clear_boot_device(&mut self) {
        self.boot_device.clear();
    }

    // Param is passed by value, moved
    pub fn set_boot_device(&mut self, v: ::std::string::String) {
        self.boot_device = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_boot_device(&mut self) -> &mut ::std::string::String {
        &mut self.boot_device
    }

    // Take field
    pub fn take_boot_device(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.boot_device, ::std::string::String::new())
    }
}

impl ::protobuf::Message for OperatingSystem {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.codename)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.manufacturer)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sku)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.boot_device)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.state != super::state::SWState::SW_STATE_SAME {
            my_size += ::protobuf::rt::enum_size(1, self.state);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.version);
        }
        if !self.codename.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.codename);
        }
        if !self.manufacturer.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.manufacturer);
        }
        if !self.sku.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.sku);
        }
        if !self.boot_device.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.boot_device);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.state != super::state::SWState::SW_STATE_SAME {
            os.write_enum(1, self.state.value())?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.version.is_empty() {
            os.write_string(3, &self.version)?;
        }
        if !self.codename.is_empty() {
            os.write_string(4, &self.codename)?;
        }
        if !self.manufacturer.is_empty() {
            os.write_string(5, &self.manufacturer)?;
        }
        if !self.sku.is_empty() {
            os.write_string(6, &self.sku)?;
        }
        if !self.boot_device.is_empty() {
            os.write_string(7, &self.boot_device)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OperatingSystem {
        OperatingSystem::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::state::SWState>>(
                    "state",
                    |m: &OperatingSystem| { &m.state },
                    |m: &mut OperatingSystem| { &mut m.state },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &OperatingSystem| { &m.name },
                    |m: &mut OperatingSystem| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "version",
                    |m: &OperatingSystem| { &m.version },
                    |m: &mut OperatingSystem| { &mut m.version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "codename",
                    |m: &OperatingSystem| { &m.codename },
                    |m: &mut OperatingSystem| { &mut m.codename },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "manufacturer",
                    |m: &OperatingSystem| { &m.manufacturer },
                    |m: &mut OperatingSystem| { &mut m.manufacturer },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "sku",
                    |m: &OperatingSystem| { &m.sku },
                    |m: &mut OperatingSystem| { &mut m.sku },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "boot_device",
                    |m: &OperatingSystem| { &m.boot_device },
                    |m: &mut OperatingSystem| { &mut m.boot_device },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<OperatingSystem>(
                    "OperatingSystem",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static OperatingSystem {
        static mut instance: ::protobuf::lazy::Lazy<OperatingSystem> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const OperatingSystem,
        };
        unsafe {
            instance.get(OperatingSystem::new)
        }
    }
}

impl ::protobuf::Clear for OperatingSystem {
    fn clear(&mut self) {
        self.state = super::state::SWState::SW_STATE_SAME;
        self.name.clear();
        self.version.clear();
        self.codename.clear();
        self.manufacturer.clear();
        self.sku.clear();
        self.boot_device.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OperatingSystem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OperatingSystem {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LinuxKernel {
    // message fields
    pub state: super::state::SWState,
    pub name: ::std::string::String,
    pub release: ::std::string::String,
    pub version: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LinuxKernel {
    fn default() -> &'a LinuxKernel {
        <LinuxKernel as ::protobuf::Message>::default_instance()
    }
}

impl LinuxKernel {
    pub fn new() -> LinuxKernel {
        ::std::default::Default::default()
    }

    // .hp.xy.sunrise_v1.SWState state = 1;


    pub fn get_state(&self) -> super::state::SWState {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = super::state::SWState::SW_STATE_SAME;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: super::state::SWState) {
        self.state = v;
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string release = 3;


    pub fn get_release(&self) -> &str {
        &self.release
    }
    pub fn clear_release(&mut self) {
        self.release.clear();
    }

    // Param is passed by value, moved
    pub fn set_release(&mut self, v: ::std::string::String) {
        self.release = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_release(&mut self) -> &mut ::std::string::String {
        &mut self.release
    }

    // Take field
    pub fn take_release(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.release, ::std::string::String::new())
    }

    // string version = 4;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }
}

impl ::protobuf::Message for LinuxKernel {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.release)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.state != super::state::SWState::SW_STATE_SAME {
            my_size += ::protobuf::rt::enum_size(1, self.state);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.release.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.release);
        }
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.state != super::state::SWState::SW_STATE_SAME {
            os.write_enum(1, self.state.value())?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.release.is_empty() {
            os.write_string(3, &self.release)?;
        }
        if !self.version.is_empty() {
            os.write_string(4, &self.version)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LinuxKernel {
        LinuxKernel::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::state::SWState>>(
                    "state",
                    |m: &LinuxKernel| { &m.state },
                    |m: &mut LinuxKernel| { &mut m.state },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &LinuxKernel| { &m.name },
                    |m: &mut LinuxKernel| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "release",
                    |m: &LinuxKernel| { &m.release },
                    |m: &mut LinuxKernel| { &mut m.release },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "version",
                    |m: &LinuxKernel| { &m.version },
                    |m: &mut LinuxKernel| { &mut m.version },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LinuxKernel>(
                    "LinuxKernel",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LinuxKernel {
        static mut instance: ::protobuf::lazy::Lazy<LinuxKernel> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LinuxKernel,
        };
        unsafe {
            instance.get(LinuxKernel::new)
        }
    }
}

impl ::protobuf::Clear for LinuxKernel {
    fn clear(&mut self) {
        self.state = super::state::SWState::SW_STATE_SAME;
        self.name.clear();
        self.release.clear();
        self.version.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LinuxKernel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LinuxKernel {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BootPerformance {
    // message fields
    pub time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub last_boot_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub boot_time_total: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub boot_time_firmware: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub boot_time_loader: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub boot_time_kernel: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub boot_time_userspace: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BootPerformance {
    fn default() -> &'a BootPerformance {
        <BootPerformance as ::protobuf::Message>::default_instance()
    }
}

impl BootPerformance {
    pub fn new() -> BootPerformance {
        ::std::default::Default::default()
    }

    // .google.protobuf.Timestamp time = 1;


    pub fn get_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.time.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_time(&mut self) {
        self.time.clear();
    }

    pub fn has_time(&self) -> bool {
        self.time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.time.is_none() {
            self.time.set_default();
        }
        self.time.as_mut().unwrap()
    }

    // Take field
    pub fn take_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp last_boot_time = 3;


    pub fn get_last_boot_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.last_boot_time.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_last_boot_time(&mut self) {
        self.last_boot_time.clear();
    }

    pub fn has_last_boot_time(&self) -> bool {
        self.last_boot_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_boot_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.last_boot_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_last_boot_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.last_boot_time.is_none() {
            self.last_boot_time.set_default();
        }
        self.last_boot_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_last_boot_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.last_boot_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Duration boot_time_total = 4;


    pub fn get_boot_time_total(&self) -> &::protobuf::well_known_types::Duration {
        self.boot_time_total.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Duration::default_instance())
    }
    pub fn clear_boot_time_total(&mut self) {
        self.boot_time_total.clear();
    }

    pub fn has_boot_time_total(&self) -> bool {
        self.boot_time_total.is_some()
    }

    // Param is passed by value, moved
    pub fn set_boot_time_total(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.boot_time_total = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_boot_time_total(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.boot_time_total.is_none() {
            self.boot_time_total.set_default();
        }
        self.boot_time_total.as_mut().unwrap()
    }

    // Take field
    pub fn take_boot_time_total(&mut self) -> ::protobuf::well_known_types::Duration {
        self.boot_time_total.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.protobuf.Duration boot_time_firmware = 5;


    pub fn get_boot_time_firmware(&self) -> &::protobuf::well_known_types::Duration {
        self.boot_time_firmware.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Duration::default_instance())
    }
    pub fn clear_boot_time_firmware(&mut self) {
        self.boot_time_firmware.clear();
    }

    pub fn has_boot_time_firmware(&self) -> bool {
        self.boot_time_firmware.is_some()
    }

    // Param is passed by value, moved
    pub fn set_boot_time_firmware(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.boot_time_firmware = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_boot_time_firmware(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.boot_time_firmware.is_none() {
            self.boot_time_firmware.set_default();
        }
        self.boot_time_firmware.as_mut().unwrap()
    }

    // Take field
    pub fn take_boot_time_firmware(&mut self) -> ::protobuf::well_known_types::Duration {
        self.boot_time_firmware.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.protobuf.Duration boot_time_loader = 6;


    pub fn get_boot_time_loader(&self) -> &::protobuf::well_known_types::Duration {
        self.boot_time_loader.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Duration::default_instance())
    }
    pub fn clear_boot_time_loader(&mut self) {
        self.boot_time_loader.clear();
    }

    pub fn has_boot_time_loader(&self) -> bool {
        self.boot_time_loader.is_some()
    }

    // Param is passed by value, moved
    pub fn set_boot_time_loader(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.boot_time_loader = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_boot_time_loader(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.boot_time_loader.is_none() {
            self.boot_time_loader.set_default();
        }
        self.boot_time_loader.as_mut().unwrap()
    }

    // Take field
    pub fn take_boot_time_loader(&mut self) -> ::protobuf::well_known_types::Duration {
        self.boot_time_loader.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.protobuf.Duration boot_time_kernel = 7;


    pub fn get_boot_time_kernel(&self) -> &::protobuf::well_known_types::Duration {
        self.boot_time_kernel.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Duration::default_instance())
    }
    pub fn clear_boot_time_kernel(&mut self) {
        self.boot_time_kernel.clear();
    }

    pub fn has_boot_time_kernel(&self) -> bool {
        self.boot_time_kernel.is_some()
    }

    // Param is passed by value, moved
    pub fn set_boot_time_kernel(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.boot_time_kernel = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_boot_time_kernel(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.boot_time_kernel.is_none() {
            self.boot_time_kernel.set_default();
        }
        self.boot_time_kernel.as_mut().unwrap()
    }

    // Take field
    pub fn take_boot_time_kernel(&mut self) -> ::protobuf::well_known_types::Duration {
        self.boot_time_kernel.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.protobuf.Duration boot_time_userspace = 8;


    pub fn get_boot_time_userspace(&self) -> &::protobuf::well_known_types::Duration {
        self.boot_time_userspace.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Duration::default_instance())
    }
    pub fn clear_boot_time_userspace(&mut self) {
        self.boot_time_userspace.clear();
    }

    pub fn has_boot_time_userspace(&self) -> bool {
        self.boot_time_userspace.is_some()
    }

    // Param is passed by value, moved
    pub fn set_boot_time_userspace(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.boot_time_userspace = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_boot_time_userspace(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.boot_time_userspace.is_none() {
            self.boot_time_userspace.set_default();
        }
        self.boot_time_userspace.as_mut().unwrap()
    }

    // Take field
    pub fn take_boot_time_userspace(&mut self) -> ::protobuf::well_known_types::Duration {
        self.boot_time_userspace.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }
}

impl ::protobuf::Message for BootPerformance {
    fn is_initialized(&self) -> bool {
        for v in &self.time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.last_boot_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.boot_time_total {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.boot_time_firmware {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.boot_time_loader {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.boot_time_kernel {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.boot_time_userspace {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.time)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.last_boot_time)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.boot_time_total)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.boot_time_firmware)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.boot_time_loader)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.boot_time_kernel)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.boot_time_userspace)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.last_boot_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.boot_time_total.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.boot_time_firmware.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.boot_time_loader.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.boot_time_kernel.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.boot_time_userspace.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.time.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.last_boot_time.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.boot_time_total.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.boot_time_firmware.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.boot_time_loader.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.boot_time_kernel.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.boot_time_userspace.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BootPerformance {
        BootPerformance::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "time",
                    |m: &BootPerformance| { &m.time },
                    |m: &mut BootPerformance| { &mut m.time },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "last_boot_time",
                    |m: &BootPerformance| { &m.last_boot_time },
                    |m: &mut BootPerformance| { &mut m.last_boot_time },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                    "boot_time_total",
                    |m: &BootPerformance| { &m.boot_time_total },
                    |m: &mut BootPerformance| { &mut m.boot_time_total },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                    "boot_time_firmware",
                    |m: &BootPerformance| { &m.boot_time_firmware },
                    |m: &mut BootPerformance| { &mut m.boot_time_firmware },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                    "boot_time_loader",
                    |m: &BootPerformance| { &m.boot_time_loader },
                    |m: &mut BootPerformance| { &mut m.boot_time_loader },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                    "boot_time_kernel",
                    |m: &BootPerformance| { &m.boot_time_kernel },
                    |m: &mut BootPerformance| { &mut m.boot_time_kernel },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                    "boot_time_userspace",
                    |m: &BootPerformance| { &m.boot_time_userspace },
                    |m: &mut BootPerformance| { &mut m.boot_time_userspace },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BootPerformance>(
                    "BootPerformance",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BootPerformance {
        static mut instance: ::protobuf::lazy::Lazy<BootPerformance> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BootPerformance,
        };
        unsafe {
            instance.get(BootPerformance::new)
        }
    }
}

impl ::protobuf::Clear for BootPerformance {
    fn clear(&mut self) {
        self.time.clear();
        self.last_boot_time.clear();
        self.boot_time_total.clear();
        self.boot_time_firmware.clear();
        self.boot_time_loader.clear();
        self.boot_time_kernel.clear();
        self.boot_time_userspace.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BootPerformance {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BootPerformance {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n*hp/xy/sunrise_v1/sw/operating_system.proto\x12\x13hp.xy.sunrise_v1.sw\
    \x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/duration.\
    proto\x1a\x1chp/xy/sunrise_v1/state.proto\"\xe3\x01\n\x0fOperatingSystem\
    \x12/\n\x05state\x18\x01\x20\x01(\x0e2\x19.hp.xy.sunrise_v1.SWStateR\x05\
    state\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x12\x18\n\x07version\
    \x18\x03\x20\x01(\tR\x07version\x12\x1a\n\x08codename\x18\x04\x20\x01(\t\
    R\x08codename\x12\"\n\x0cmanufacturer\x18\x05\x20\x01(\tR\x0cmanufacture\
    r\x12\x10\n\x03sku\x18\x06\x20\x01(\tR\x03sku\x12\x1f\n\x0bboot_device\
    \x18\x07\x20\x01(\tR\nbootDevice\"\x86\x01\n\x0bLinuxKernel\x12/\n\x05st\
    ate\x18\x01\x20\x01(\x0e2\x19.hp.xy.sunrise_v1.SWStateR\x05state\x12\x12\
    \n\x04name\x18\x02\x20\x01(\tR\x04name\x12\x18\n\x07release\x18\x03\x20\
    \x01(\tR\x07release\x12\x18\n\x07version\x18\x04\x20\x01(\tR\x07version\
    \"\xe4\x03\n\x0fBootPerformance\x12.\n\x04time\x18\x01\x20\x01(\x0b2\x1a\
    .google.protobuf.TimestampR\x04time\x12@\n\x0elast_boot_time\x18\x03\x20\
    \x01(\x0b2\x1a.google.protobuf.TimestampR\x0clastBootTime\x12A\n\x0fboot\
    _time_total\x18\x04\x20\x01(\x0b2\x19.google.protobuf.DurationR\rbootTim\
    eTotal\x12G\n\x12boot_time_firmware\x18\x05\x20\x01(\x0b2\x19.google.pro\
    tobuf.DurationR\x10bootTimeFirmware\x12C\n\x10boot_time_loader\x18\x06\
    \x20\x01(\x0b2\x19.google.protobuf.DurationR\x0ebootTimeLoader\x12C\n\
    \x10boot_time_kernel\x18\x07\x20\x01(\x0b2\x19.google.protobuf.DurationR\
    \x0ebootTimeKernel\x12I\n\x13boot_time_userspace\x18\x08\x20\x01(\x0b2\
    \x19.google.protobuf.DurationR\x11bootTimeUserspaceJ\xd3\x18\n\x07\x12\
    \x05\0\0\x91\x01\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\
    \x03\x02\0\x1c\n\t\n\x02\x03\0\x12\x03\x04\0)\n\t\n\x02\x03\x01\x12\x03\
    \x05\0(\n\t\n\x02\x03\x02\x12\x03\x06\0&\n\n\n\x02\x04\0\x12\x04\x08\0U\
    \x01\n\n\n\x03\x04\0\x01\x12\x03\x08\x08\x17\n\xb9\x02\n\x04\x04\0\x02\0\
    \x12\x03\x11\x04\x16\x1a\xab\x02\x20\r\n\x20SW\x20State\r\n\x20\r\n\x20S\
    W_STATE_INSTALLED\x20-\x20SW\x20component\x20was\x20installed\x20/\x20fi\
    rst\x20detected\x20(populate\x20all\x20data\x20fields)\r\n\x20SW_STATE_U\
    NINSTALLED\x20-\x20SW\x20component\x20was\x20uninstalled\x20/\x20not\x20\
    detected\x20anymore\x20(populate\x20PKs\x20only)\r\n\x20SW_STATE_UPDATED\
    \x20-\x20SW\x20component\x20was\x20updated\x20/\x20upgraded\x20(populate\
    \x20PKs\x20and\x20changed\x20fields)\r\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\
    \x03\x11\x04\x0b\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x11\x0c\x11\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x03\x11\x14\x15\n\x8e\x01\n\x04\x04\0\x02\x01\
    \x12\x03\x1c\x04\x14\x1a\x80\x01\x20\r\n\x20OS\x20Name\r\n\x20\r\n\x20Ex\
    ample:\x20Microsoft\x20Windows\x2010\x20Pro\r\n\x20\r\n\x20Source:\r\n\
    \x20*\x20Windows:\x20WMI\x20-\x20Win32_OperatingSystem\x20-\x20Name\r\n\
    \x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x1c\x04\
    \n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x1c\x0b\x0f\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03\x1c\x12\x13\n\x89\x01\n\x04\x04\0\x02\x02\x12\x03'\
    \x04\x17\x1a|\x20\r\n\x20OS\x20Version\r\n\x20\r\n\x20Example:\x2010.0.1\
    6299.192\r\n\x20\r\n\x20Source:\r\n\x20*\x20Windows:\x20WMI\x20-\x20Win3\
    2_OperatingSystem\x20-\x20Version\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\
    \x05\x04\0\x02\x02\x05\x12\x03'\x04\n\n\x0c\n\x05\x04\0\x02\x02\x01\x12\
    \x03'\x0b\x12\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03'\x15\x16\n\xaa\x01\n\
    \x04\x04\0\x02\x03\x12\x032\x04\x18\x1a\x9c\x01\x20\r\n\x20OS\x20codenam\
    e\r\n\x20\r\n\x20Example:\x20Redstone,\x20Titanium,\x20Hirsute\x20Hippo,\
    \x20Focal\x20Fossa,\x20Bionic\x20Beaver\r\n\x20\r\n\x20Source:\r\n\x20*\
    \x20Windows:\x20TBD\r\n\x20*\x20Linux:\x20`cat\x20/etc/os-release`\r\n\n\
    \x0c\n\x05\x04\0\x02\x03\x05\x12\x032\x04\n\n\x0c\n\x05\x04\0\x02\x03\
    \x01\x12\x032\x0b\x13\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x032\x16\x17\n\
    \x9b\x01\n\x04\x04\0\x02\x04\x12\x03=\x04\x1c\x1a\x8d\x01\x20\r\n\x20OS\
    \x20Manufacturer\r\n\x20\r\n\x20Example:\x20Microsoft\x20Corporation\r\n\
    \x20\r\n\x20Source:\r\n\x20*\x20Windows:\x20WMI\x20-\x20Win32_OperatingS\
    ystem\x20-\x20Manufacturer\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\
    \0\x02\x04\x05\x12\x03=\x04\n\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03=\x0b\
    \x17\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03=\x1a\x1b\n\xc6\x02\n\x04\x04\
    \0\x02\x05\x12\x03I\x04\x13\x1a\xb8\x02\x20\r\n\x20Operating\x20System\
    \x20SKU\r\n\x20\r\n\x20Example:\x20PRODUCT_HOME_BASIC,\x20PRODUCT_HOME_P\
    REMIUM\r\n\x20\r\n\x20Source:\r\n\x20*\x20Windows:\x20WMI\x20-\x20Win32_\
    OperatingSystem\x20-\x20OperatingSystemSKU\x20(mapped\x20from\x20integer\
    )\r\n\x20\x20\x20\x20\x20*\x20Full\x20list\x20of\x20Win\x20versions:\x20\
    https://docs.microsoft.com/en-us/windows/desktop/cimwin32prov/win32-oper\
    atingsystem\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\x05\x05\
    \x12\x03I\x04\n\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03I\x0b\x0e\n\x0c\n\
    \x05\x04\0\x02\x05\x03\x12\x03I\x11\x12\n\x9a\x01\n\x04\x04\0\x02\x06\
    \x12\x03T\x04\x1b\x1a\x8c\x01\x20\r\n\x20OS\x20Boot\x20Device\r\n\x20\r\
    \n\x20Example:\x20\\Device\\HarddiskVolume1\r\n\x20\r\n\x20Source:\r\n\
    \x20*\x20Windows:\x20WMI\x20-\x20Win32_OperatingSystem\x20-\x20BootDevic\
    e\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\x06\x05\x12\x03T\
    \x04\n\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03T\x0b\x16\n\x0c\n\x05\x04\0\
    \x02\x06\x03\x12\x03T\x19\x1a\n\n\n\x02\x04\x01\x12\x04W\0|\x01\n\n\n\
    \x03\x04\x01\x01\x12\x03W\x08\x13\n\xb9\x02\n\x04\x04\x01\x02\0\x12\x03`\
    \x04\x16\x1a\xab\x02\x20\r\n\x20SW\x20State\r\n\x20\r\n\x20SW_STATE_INST\
    ALLED\x20-\x20SW\x20component\x20was\x20installed\x20/\x20first\x20detec\
    ted\x20(populate\x20all\x20data\x20fields)\r\n\x20SW_STATE_UNINSTALLED\
    \x20-\x20SW\x20component\x20was\x20uninstalled\x20/\x20not\x20detected\
    \x20anymore\x20(populate\x20PKs\x20only)\r\n\x20SW_STATE_UPDATED\x20-\
    \x20SW\x20component\x20was\x20updated\x20/\x20upgraded\x20(populate\x20P\
    Ks\x20and\x20changed\x20fields)\r\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\
    \x03`\x04\x0b\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03`\x0c\x11\n\x0c\n\x05\
    \x04\x01\x02\0\x03\x12\x03`\x14\x15\nH\n\x04\x04\x01\x02\x01\x12\x03i\
    \x04\x14\x1a;\x20\r\n\x20OS\x20Kernel\r\n\x20\r\n\x20Example:\x20Linux\r\
    \n\x20\r\n\x20Source:\x20`uname\x20-s`\r\n\n\x0c\n\x05\x04\x01\x02\x01\
    \x05\x12\x03i\x04\n\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03i\x0b\x0f\n\
    \x0c\n\x05\x04\x01\x02\x01\x03\x12\x03i\x12\x13\n^\n\x04\x04\x01\x02\x02\
    \x12\x03r\x04\x17\x1aQ\x20\r\n\x20OS\x20Kernel\x20Release\r\n\x20\r\n\
    \x20Example:\x205.13.0-7614-generic\r\n\x20\r\n\x20Source:\x20`uname\x20\
    -r`\r\n\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03r\x04\n\n\x0c\n\x05\x04\
    \x01\x02\x02\x01\x12\x03r\x0b\x12\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\
    \x03r\x15\x16\nD\n\x04\x04\x01\x02\x03\x12\x03{\x04\x17\x1a7\x20\r\n\x20\
    OS\x20Version\r\n\x20\r\n\x20Example:\x20\r\n\x20\r\n\x20Source:\x20`una\
    me\x20-v`\r\n\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03{\x04\n\n\x0c\n\x05\
    \x04\x01\x02\x03\x01\x12\x03{\x0b\x12\n\x0c\n\x05\x04\x01\x02\x03\x03\
    \x12\x03{\x15\x16\n<\n\x02\x04\x02\x12\x06\x81\x01\0\x91\x01\x01\x1a.*\r\
    \n\x20Data\x20on\x20the\x20performance\x20of\x20the\x20last\x20boot\r\n\
    \n\x0b\n\x03\x04\x02\x01\x12\x04\x81\x01\x08\x17\n%\n\x04\x04\x02\x02\0\
    \x12\x04\x86\x01\x04'\x1a\x17*\r\n\x20Time\x20of\x20the\x20event\r\n\n\r\
    \n\x05\x04\x02\x02\0\x06\x12\x04\x86\x01\x04\x1d\n\r\n\x05\x04\x02\x02\0\
    \x01\x12\x04\x86\x01\x1e\"\n\r\n\x05\x04\x02\x02\0\x03\x12\x04\x86\x01%&\
    \n0\n\x04\x04\x02\x02\x01\x12\x04\x8b\x01\x041\x1a\"*\r\n\x20Last\x20Boo\
    t\x20time\x20(PRIMARY\x20KEY)\r\n\n\r\n\x05\x04\x02\x02\x01\x06\x12\x04\
    \x8b\x01\x04\x1d\n\r\n\x05\x04\x02\x02\x01\x01\x12\x04\x8b\x01\x1e,\n\r\
    \n\x05\x04\x02\x02\x01\x03\x12\x04\x8b\x01/0\n\x1c\n\x04\x04\x02\x02\x02\
    \x12\x04\x8c\x01\x041\"\x0e\x201min\x207.314s\r\n\n\r\n\x05\x04\x02\x02\
    \x02\x06\x12\x04\x8c\x01\x04\x1c\n\r\n\x05\x04\x02\x02\x02\x01\x12\x04\
    \x8c\x01\x1d,\n\r\n\x05\x04\x02\x02\x02\x03\x12\x04\x8c\x01/0\n\x17\n\
    \x04\x04\x02\x02\x03\x12\x04\x8d\x01\x044\"\t\x204.935s\r\n\n\r\n\x05\
    \x04\x02\x02\x03\x06\x12\x04\x8d\x01\x04\x1c\n\r\n\x05\x04\x02\x02\x03\
    \x01\x12\x04\x8d\x01\x1d/\n\r\n\x05\x04\x02\x02\x03\x03\x12\x04\x8d\x012\
    3\n\x16\n\x04\x04\x02\x02\x04\x12\x04\x8e\x01\x042\"\x08\x20237ms\r\n\n\
    \r\n\x05\x04\x02\x02\x04\x06\x12\x04\x8e\x01\x04\x1c\n\r\n\x05\x04\x02\
    \x02\x04\x01\x12\x04\x8e\x01\x1d-\n\r\n\x05\x04\x02\x02\x04\x03\x12\x04\
    \x8e\x0101\n\x18\n\x04\x04\x02\x02\x05\x12\x04\x8f\x01\x042\"\n\x2058.03\
    6s\r\n\n\r\n\x05\x04\x02\x02\x05\x06\x12\x04\x8f\x01\x04\x1c\n\r\n\x05\
    \x04\x02\x02\x05\x01\x12\x04\x8f\x01\x1d-\n\r\n\x05\x04\x02\x02\x05\x03\
    \x12\x04\x8f\x0101\n\x17\n\x04\x04\x02\x02\x06\x12\x04\x90\x01\x045\"\t\
    \x204.104s\r\n\n\r\n\x05\x04\x02\x02\x06\x06\x12\x04\x90\x01\x04\x1c\n\r\
    \n\x05\x04\x02\x02\x06\x01\x12\x04\x90\x01\x1d0\n\r\n\x05\x04\x02\x02\
    \x06\x03\x12\x04\x90\x0134b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
