// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `hp/xy/sunrise_v1/hw/base_board.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct BaseBoard {
    // message fields
    pub state: super::state::HWState,
    pub base_board_id: ::std::string::String,
    pub manufacturer: ::std::string::String,
    pub ct_number: ::std::string::String,
    pub version: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BaseBoard {
    fn default() -> &'a BaseBoard {
        <BaseBoard as ::protobuf::Message>::default_instance()
    }
}

impl BaseBoard {
    pub fn new() -> BaseBoard {
        ::std::default::Default::default()
    }

    // .hp.xy.sunrise_v1.HWState state = 1;


    pub fn get_state(&self) -> super::state::HWState {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = super::state::HWState::HW_STATE_SAME;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: super::state::HWState) {
        self.state = v;
    }

    // string base_board_id = 2;


    pub fn get_base_board_id(&self) -> &str {
        &self.base_board_id
    }
    pub fn clear_base_board_id(&mut self) {
        self.base_board_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_base_board_id(&mut self, v: ::std::string::String) {
        self.base_board_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base_board_id(&mut self) -> &mut ::std::string::String {
        &mut self.base_board_id
    }

    // Take field
    pub fn take_base_board_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.base_board_id, ::std::string::String::new())
    }

    // string manufacturer = 3;


    pub fn get_manufacturer(&self) -> &str {
        &self.manufacturer
    }
    pub fn clear_manufacturer(&mut self) {
        self.manufacturer.clear();
    }

    // Param is passed by value, moved
    pub fn set_manufacturer(&mut self, v: ::std::string::String) {
        self.manufacturer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_manufacturer(&mut self) -> &mut ::std::string::String {
        &mut self.manufacturer
    }

    // Take field
    pub fn take_manufacturer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.manufacturer, ::std::string::String::new())
    }

    // string ct_number = 4;


    pub fn get_ct_number(&self) -> &str {
        &self.ct_number
    }
    pub fn clear_ct_number(&mut self) {
        self.ct_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_ct_number(&mut self, v: ::std::string::String) {
        self.ct_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ct_number(&mut self) -> &mut ::std::string::String {
        &mut self.ct_number
    }

    // Take field
    pub fn take_ct_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ct_number, ::std::string::String::new())
    }

    // string version = 5;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }
}

impl ::protobuf::Message for BaseBoard {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.base_board_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.manufacturer)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ct_number)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.state != super::state::HWState::HW_STATE_SAME {
            my_size += ::protobuf::rt::enum_size(1, self.state);
        }
        if !self.base_board_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.base_board_id);
        }
        if !self.manufacturer.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.manufacturer);
        }
        if !self.ct_number.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.ct_number);
        }
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.state != super::state::HWState::HW_STATE_SAME {
            os.write_enum(1, self.state.value())?;
        }
        if !self.base_board_id.is_empty() {
            os.write_string(2, &self.base_board_id)?;
        }
        if !self.manufacturer.is_empty() {
            os.write_string(3, &self.manufacturer)?;
        }
        if !self.ct_number.is_empty() {
            os.write_string(4, &self.ct_number)?;
        }
        if !self.version.is_empty() {
            os.write_string(5, &self.version)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BaseBoard {
        BaseBoard::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::state::HWState>>(
                    "state",
                    |m: &BaseBoard| { &m.state },
                    |m: &mut BaseBoard| { &mut m.state },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "base_board_id",
                    |m: &BaseBoard| { &m.base_board_id },
                    |m: &mut BaseBoard| { &mut m.base_board_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "manufacturer",
                    |m: &BaseBoard| { &m.manufacturer },
                    |m: &mut BaseBoard| { &mut m.manufacturer },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ct_number",
                    |m: &BaseBoard| { &m.ct_number },
                    |m: &mut BaseBoard| { &mut m.ct_number },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "version",
                    |m: &BaseBoard| { &m.version },
                    |m: &mut BaseBoard| { &mut m.version },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BaseBoard>(
                    "BaseBoard",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BaseBoard {
        static mut instance: ::protobuf::lazy::Lazy<BaseBoard> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BaseBoard,
        };
        unsafe {
            instance.get(BaseBoard::new)
        }
    }
}

impl ::protobuf::Clear for BaseBoard {
    fn clear(&mut self) {
        self.state = super::state::HWState::HW_STATE_SAME;
        self.base_board_id.clear();
        self.manufacturer.clear();
        self.ct_number.clear();
        self.version.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BaseBoard {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BaseBoard {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$hp/xy/sunrise_v1/hw/base_board.proto\x12\x13hp.xy.sunrise_v1.hw\x1a\
    \x1chp/xy/sunrise_v1/state.proto\"\xbb\x01\n\tBaseBoard\x12/\n\x05state\
    \x18\x01\x20\x01(\x0e2\x19.hp.xy.sunrise_v1.HWStateR\x05state\x12\"\n\rb\
    ase_board_id\x18\x02\x20\x01(\tR\x0bbaseBoardId\x12\"\n\x0cmanufacturer\
    \x18\x03\x20\x01(\tR\x0cmanufacturer\x12\x1b\n\tct_number\x18\x04\x20\
    \x01(\tR\x08ctNumber\x12\x18\n\x07version\x18\x05\x20\x01(\tR\x07version\
    J\x94\x0c\n\x06\x12\x04\0\0D\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\
    \x01\x02\x12\x03\x02\0\x1c\n\t\n\x02\x03\0\x12\x03\x04\0&\n\n\n\x02\x04\
    \0\x12\x04\x06\0D\x01\n\n\n\x03\x04\0\x01\x12\x03\x06\x08\x11\n\xa0\x02\
    \n\x04\x04\0\x02\0\x12\x03\x0e\x04\x16\x1a\x92\x02*\r\n\x20HW\x20State\r\
    \n\x20\r\n\x20HW_STATE_ADDED\x20-\x20The\x20HW\x20component\x20was\x20ad\
    ded\x20or\x20first\x20detected\x20(all\x20data\x20fields\x20are\x20popul\
    ated)\r\n\x20HW_STATE_REMOVED\x20-\x20The\x20HW\x20component\x20was\x20r\
    emoved\x20or\x20not\x20detected\x20anymore\x20(If\x20there\x20are\x20Pri\
    mary\x20Keys\x20defined\x20send\x20them\x20only,\x20otherwise\x20populat\
    e\x20all\x20data\x20fields)\r\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x0e\
    \x04\x0b\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0e\x0c\x11\n\x0c\n\x05\x04\
    \0\x02\0\x03\x12\x03\x0e\x14\x15\n\xe2\x01\n\x04\x04\0\x02\x01\x12\x03\
    \x1a\x04\x1d\x1a\xd4\x01*\r\n\x20Base\x20board\x20identifier,\x20otherwi\
    se\x20known\x20as\x20the\x20Platform\x20ID\x20or\x20System\x20ID.\r\n\
    \x20Typically\x20a\x204\x20digit\x20Hex\x20code.\r\n\x20\r\n\x20Examples\
    :\x208895,\x20860F\r\n\x20\r\n\x20Source:\r\n\x20\x20\x20\x20\x20Windows\
    :\x20WMI\x20-\x20Win32_BaseBoard\x20-\x20Product\r\n\x20\x20\x20\x20\x20\
    Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x1a\x04\n\n\x0c\
    \n\x05\x04\0\x02\x01\x01\x12\x03\x1a\x0b\x18\n\x0c\n\x05\x04\0\x02\x01\
    \x03\x12\x03\x1a\x1b\x1c\n\x8f\x01\n\x04\x04\0\x02\x02\x12\x03%\x04\x1c\
    \x1a\x81\x01*\r\n\x20System\x20manufacturer\r\n\x20\r\n\x20Example:\x20H\
    P\r\n\x20\r\n\x20Source:\r\n\x20\x20\x20\x20\x20Windows:\x20WMI\x20-\x20\
    Win32_ComputerSystem\x20-\x20Manufacturer\r\n\x20\x20\x20\x20\x20Linux:\
    \x20TBD\r\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03%\x04\n\n\x0c\n\x05\x04\
    \0\x02\x02\x01\x12\x03%\x0b\x17\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03%\
    \x1a\x1b\n\xcd\x03\n\x04\x04\0\x02\x03\x12\x038\x04\x19\x1a\xbf\x03*\r\n\
    \x20CT\x20Number\x20of\x20the\x20base\x20board\x20for\x20traceability\
    \x20(HP-specific\x20identifier).\r\n\x20\r\n\x20Here\x20is\x20the\x20CT\
    \x20Number\x20format:\x20**CAAAARRSSWWXXX**\r\n\x20*\x20C\x20=\x20commod\
    ity\x20code\x20(P\x20for\x20base\x20boards/platforms)\r\n\x20*\x20AAAA\
    \x20=\x20assembly\x20code\r\n\x20*\x20RR\x20=\x20revision\x20level\r\n\
    \x20*\x20SS\x20=\x20supplier/site\x20of\x20manufacture\r\n\x20*\x20WW\
    \x20=\x20week\x20of\x20manufacture\r\n\x20*\x20XXX\x20=\x20unique\x20seq\
    uence\x20identifier\r\n\x20\r\n\x20Example:\x20PLETU00WBFF0CX\r\n\x20\r\
    \n\x20Source:\r\n\x20\x20\x20\x20\x20Windows:\x20WMI\x20-\x20Win32_BaseB\
    oard\x20-\x20SerialNumber\r\n\x20\x20\x20\x20\x20Linux:\x20TBD\r\n\n\x0c\
    \n\x05\x04\0\x02\x03\x05\x12\x038\x04\n\n\x0c\n\x05\x04\0\x02\x03\x01\
    \x12\x038\x0b\x14\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x038\x17\x18\n\x96\
    \x01\n\x04\x04\0\x02\x04\x12\x03C\x04\x17\x1a\x88\x01*\r\n\x20Base\x20Bo\
    ard\x20version\r\n\x20\r\n\x20Example:\x20KBC\x20Version\x2043.1B.00\r\n\
    \x20\r\n\x20Source:\r\n\x20\x20\x20\x20\x20Windows:\x20WMI\x20-\x20Win32\
    _Baseboard\x20-\x20Version\r\n\x20\x20\x20\x20\x20Linux:\x20TBD\r\n\n\
    \x0c\n\x05\x04\0\x02\x04\x05\x12\x03C\x04\n\n\x0c\n\x05\x04\0\x02\x04\
    \x01\x12\x03C\x0b\x12\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03C\x15\x16b\
    \x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
