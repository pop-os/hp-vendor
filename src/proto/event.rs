// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `hp/xy/sunrise_v1/event.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct EventPackage {
    // message fields
    pub version: ::std::string::String,
    pub time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub device_id: ::std::string::String,
    pub event_provider_info: ::protobuf::SingularPtrField<EventProviderInfo>,
    pub data: ::protobuf::RepeatedField<::protobuf::well_known_types::Any>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventPackage {
    fn default() -> &'a EventPackage {
        <EventPackage as ::protobuf::Message>::default_instance()
    }
}

impl EventPackage {
    pub fn new() -> EventPackage {
        ::std::default::Default::default()
    }

    // string version = 1;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }

    // .google.protobuf.Timestamp time = 2;


    pub fn get_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.time.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_time(&mut self) {
        self.time.clear();
    }

    pub fn has_time(&self) -> bool {
        self.time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.time.is_none() {
            self.time.set_default();
        }
        self.time.as_mut().unwrap()
    }

    // Take field
    pub fn take_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // string device_id = 3;


    pub fn get_device_id(&self) -> &str {
        &self.device_id
    }
    pub fn clear_device_id(&mut self) {
        self.device_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_device_id(&mut self, v: ::std::string::String) {
        self.device_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_id(&mut self) -> &mut ::std::string::String {
        &mut self.device_id
    }

    // Take field
    pub fn take_device_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.device_id, ::std::string::String::new())
    }

    // .hp.x.sunrise_v1.EventProviderInfo event_provider_info = 4;


    pub fn get_event_provider_info(&self) -> &EventProviderInfo {
        self.event_provider_info.as_ref().unwrap_or_else(|| EventProviderInfo::default_instance())
    }
    pub fn clear_event_provider_info(&mut self) {
        self.event_provider_info.clear();
    }

    pub fn has_event_provider_info(&self) -> bool {
        self.event_provider_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_event_provider_info(&mut self, v: EventProviderInfo) {
        self.event_provider_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_event_provider_info(&mut self) -> &mut EventProviderInfo {
        if self.event_provider_info.is_none() {
            self.event_provider_info.set_default();
        }
        self.event_provider_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_event_provider_info(&mut self) -> EventProviderInfo {
        self.event_provider_info.take().unwrap_or_else(|| EventProviderInfo::new())
    }

    // repeated .google.protobuf.Any data = 15;


    pub fn get_data(&self) -> &[::protobuf::well_known_types::Any] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::protobuf::RepeatedField<::protobuf::well_known_types::Any>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    pub fn mut_data(&mut self) -> &mut ::protobuf::RepeatedField<::protobuf::well_known_types::Any> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::protobuf::RepeatedField<::protobuf::well_known_types::Any> {
        ::std::mem::replace(&mut self.data, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for EventPackage {
    fn is_initialized(&self) -> bool {
        for v in &self.time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.event_provider_info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.data {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.time)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.device_id)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.event_provider_info)?;
                },
                15 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.version);
        }
        if let Some(ref v) = self.time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.device_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.device_id);
        }
        if let Some(ref v) = self.event_provider_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.data {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.version.is_empty() {
            os.write_string(1, &self.version)?;
        }
        if let Some(ref v) = self.time.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.device_id.is_empty() {
            os.write_string(3, &self.device_id)?;
        }
        if let Some(ref v) = self.event_provider_info.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.data {
            os.write_tag(15, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventPackage {
        EventPackage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "version",
                    |m: &EventPackage| { &m.version },
                    |m: &mut EventPackage| { &mut m.version },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "time",
                    |m: &EventPackage| { &m.time },
                    |m: &mut EventPackage| { &mut m.time },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "device_id",
                    |m: &EventPackage| { &m.device_id },
                    |m: &mut EventPackage| { &mut m.device_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<EventProviderInfo>>(
                    "event_provider_info",
                    |m: &EventPackage| { &m.event_provider_info },
                    |m: &mut EventPackage| { &mut m.event_provider_info },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                    "data",
                    |m: &EventPackage| { &m.data },
                    |m: &mut EventPackage| { &mut m.data },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EventPackage>(
                    "EventPackage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static EventPackage {
        static mut instance: ::protobuf::lazy::Lazy<EventPackage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EventPackage,
        };
        unsafe {
            instance.get(EventPackage::new)
        }
    }
}

impl ::protobuf::Clear for EventPackage {
    fn clear(&mut self) {
        self.version.clear();
        self.time.clear();
        self.device_id.clear();
        self.event_provider_info.clear();
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EventPackage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EventPackage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EventProviderInfo {
    // message fields
    pub app_name: ::std::string::String,
    pub app_version: ::std::string::String,
    pub os_name: ::std::string::String,
    pub os_version: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventProviderInfo {
    fn default() -> &'a EventProviderInfo {
        <EventProviderInfo as ::protobuf::Message>::default_instance()
    }
}

impl EventProviderInfo {
    pub fn new() -> EventProviderInfo {
        ::std::default::Default::default()
    }

    // string app_name = 1;


    pub fn get_app_name(&self) -> &str {
        &self.app_name
    }
    pub fn clear_app_name(&mut self) {
        self.app_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_app_name(&mut self, v: ::std::string::String) {
        self.app_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app_name(&mut self) -> &mut ::std::string::String {
        &mut self.app_name
    }

    // Take field
    pub fn take_app_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app_name, ::std::string::String::new())
    }

    // string app_version = 2;


    pub fn get_app_version(&self) -> &str {
        &self.app_version
    }
    pub fn clear_app_version(&mut self) {
        self.app_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_app_version(&mut self, v: ::std::string::String) {
        self.app_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app_version(&mut self) -> &mut ::std::string::String {
        &mut self.app_version
    }

    // Take field
    pub fn take_app_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app_version, ::std::string::String::new())
    }

    // string os_name = 3;


    pub fn get_os_name(&self) -> &str {
        &self.os_name
    }
    pub fn clear_os_name(&mut self) {
        self.os_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_os_name(&mut self, v: ::std::string::String) {
        self.os_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_os_name(&mut self) -> &mut ::std::string::String {
        &mut self.os_name
    }

    // Take field
    pub fn take_os_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.os_name, ::std::string::String::new())
    }

    // string os_version = 4;


    pub fn get_os_version(&self) -> &str {
        &self.os_version
    }
    pub fn clear_os_version(&mut self) {
        self.os_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_os_version(&mut self, v: ::std::string::String) {
        self.os_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_os_version(&mut self) -> &mut ::std::string::String {
        &mut self.os_version
    }

    // Take field
    pub fn take_os_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.os_version, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EventProviderInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app_version)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.os_name)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.os_version)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.app_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.app_name);
        }
        if !self.app_version.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.app_version);
        }
        if !self.os_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.os_name);
        }
        if !self.os_version.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.os_version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.app_name.is_empty() {
            os.write_string(1, &self.app_name)?;
        }
        if !self.app_version.is_empty() {
            os.write_string(2, &self.app_version)?;
        }
        if !self.os_name.is_empty() {
            os.write_string(3, &self.os_name)?;
        }
        if !self.os_version.is_empty() {
            os.write_string(4, &self.os_version)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventProviderInfo {
        EventProviderInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "app_name",
                    |m: &EventProviderInfo| { &m.app_name },
                    |m: &mut EventProviderInfo| { &mut m.app_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "app_version",
                    |m: &EventProviderInfo| { &m.app_version },
                    |m: &mut EventProviderInfo| { &mut m.app_version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "os_name",
                    |m: &EventProviderInfo| { &m.os_name },
                    |m: &mut EventProviderInfo| { &mut m.os_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "os_version",
                    |m: &EventProviderInfo| { &m.os_version },
                    |m: &mut EventProviderInfo| { &mut m.os_version },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EventProviderInfo>(
                    "EventProviderInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static EventProviderInfo {
        static mut instance: ::protobuf::lazy::Lazy<EventProviderInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EventProviderInfo,
        };
        unsafe {
            instance.get(EventProviderInfo::new)
        }
    }
}

impl ::protobuf::Clear for EventProviderInfo {
    fn clear(&mut self) {
        self.app_name.clear();
        self.app_version.clear();
        self.os_name.clear();
        self.os_version.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EventProviderInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EventProviderInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1chp/xy/sunrise_v1/event.proto\x12\x0fhp.x.sunrise_v1\x1a\x19google/\
    protobuf/any.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xf3\x01\n\
    \x0cEventPackage\x12\x18\n\x07version\x18\x01\x20\x01(\tR\x07version\x12\
    .\n\x04time\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x04time\
    \x12\x1b\n\tdevice_id\x18\x03\x20\x01(\tR\x08deviceId\x12R\n\x13event_pr\
    ovider_info\x18\x04\x20\x01(\x0b2\".hp.x.sunrise_v1.EventProviderInfoR\
    \x11eventProviderInfo\x12(\n\x04data\x18\x0f\x20\x03(\x0b2\x14.google.pr\
    otobuf.AnyR\x04data\"\x87\x01\n\x11EventProviderInfo\x12\x19\n\x08app_na\
    me\x18\x01\x20\x01(\tR\x07appName\x12\x1f\n\x0bapp_version\x18\x02\x20\
    \x01(\tR\nappVersion\x12\x17\n\x07os_name\x18\x03\x20\x01(\tR\x06osName\
    \x12\x1d\n\nos_version\x18\x04\x20\x01(\tR\tosVersionJ\xc2\x05\n\x06\x12\
    \x04\0\0\x1a\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\t\n\x02\x03\0\x12\x03\
    \x02\0#\n\t\n\x02\x03\x01\x12\x03\x03\0)\n\x08\n\x01\x02\x12\x03\x05\0\
    \x18\n\n\n\x02\x04\0\x12\x04\x07\0\x13\x01\n\n\n\x03\x04\0\x01\x12\x03\
    \x07\x08\x14\n\x17\n\x04\x04\0\x02\0\x12\x03\t\x04\x17\x1a\n\x20CONTEXT\
    \r\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\t\x04\n\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03\t\x0b\x12\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\t\x15\x16\n\
    \x0b\n\x04\x04\0\x02\x01\x12\x03\n\x04'\n\x0c\n\x05\x04\0\x02\x01\x06\
    \x12\x03\n\x04\x1d\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\n\x1e\"\n\x0c\n\
    \x05\x04\0\x02\x01\x03\x12\x03\n%&\n$\n\x04\x04\0\x02\x02\x12\x03\r\x04\
    \x19\x1a\x17\x20Device\x20Serial\x20Number\r\n\n\x0c\n\x05\x04\0\x02\x02\
    \x05\x12\x03\r\x04\n\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\r\x0b\x14\n\
    \x0c\n\x05\x04\0\x02\x02\x03\x12\x03\r\x17\x18\n:\n\x04\x04\0\x02\x03\
    \x12\x03\x0f\x04.\x1a-\x20The\x20application\x20that\x20has\x20created\
    \x20the\x20Event\r\n\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03\x0f\x04\x15\n\
    \x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x0f\x16)\n\x0c\n\x05\x04\0\x02\x03\
    \x03\x12\x03\x0f,-\n\x1a\n\x04\x04\0\x02\x04\x12\x03\x12\x04+\x1a\r\x20E\
    VENT\x20DATA\r\n\n\x0c\n\x05\x04\0\x02\x04\x04\x12\x03\x12\x04\x0c\n\x0c\
    \n\x05\x04\0\x02\x04\x06\x12\x03\x12\r\x20\n\x0c\n\x05\x04\0\x02\x04\x01\
    \x12\x03\x12!%\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x12(*\n\n\n\x02\x04\
    \x01\x12\x04\x15\0\x1a\x01\n\n\n\x03\x04\x01\x01\x12\x03\x15\x08\x19\n\
    \x0b\n\x04\x04\x01\x02\0\x12\x03\x16\x04\x18\n\x0c\n\x05\x04\x01\x02\0\
    \x05\x12\x03\x16\x04\n\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x16\x0b\x13\
    \n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x16\x16\x17\n\x0b\n\x04\x04\x01\
    \x02\x01\x12\x03\x17\x04\x1b\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x17\
    \x04\n\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x17\x0b\x16\n\x0c\n\x05\
    \x04\x01\x02\x01\x03\x12\x03\x17\x19\x1a\n\x0b\n\x04\x04\x01\x02\x02\x12\
    \x03\x18\x04\x17\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x18\x04\n\n\x0c\
    \n\x05\x04\x01\x02\x02\x01\x12\x03\x18\x0b\x12\n\x0c\n\x05\x04\x01\x02\
    \x02\x03\x12\x03\x18\x15\x16\n\x0b\n\x04\x04\x01\x02\x03\x12\x03\x19\x04\
    \x1a\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03\x19\x04\n\n\x0c\n\x05\x04\
    \x01\x02\x03\x01\x12\x03\x19\x0b\x15\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\
    \x03\x19\x18\x19b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
