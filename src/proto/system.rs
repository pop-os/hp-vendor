// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `hp/xy/sunrise_v1/hw/system.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct System {
    // message fields
    pub chassis: ::std::string::String,
    pub manufacturer: ::std::string::String,
    pub model: ::std::string::String,
    pub version: ::std::string::String,
    pub family: ::std::string::String,
    pub sku: ::std::string::String,
    pub serialnumber: ::std::string::String,
    pub name: ::std::string::String,
    pub uuid: ::std::string::String,
    pub width: ::std::string::String,
    pub capabilities: ::protobuf::RepeatedField<::std::string::String>,
    pub feature_byte: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a System {
    fn default() -> &'a System {
        <System as ::protobuf::Message>::default_instance()
    }
}

impl System {
    pub fn new() -> System {
        ::std::default::Default::default()
    }

    // string chassis = 1;


    pub fn get_chassis(&self) -> &str {
        &self.chassis
    }
    pub fn clear_chassis(&mut self) {
        self.chassis.clear();
    }

    // Param is passed by value, moved
    pub fn set_chassis(&mut self, v: ::std::string::String) {
        self.chassis = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chassis(&mut self) -> &mut ::std::string::String {
        &mut self.chassis
    }

    // Take field
    pub fn take_chassis(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.chassis, ::std::string::String::new())
    }

    // string manufacturer = 2;


    pub fn get_manufacturer(&self) -> &str {
        &self.manufacturer
    }
    pub fn clear_manufacturer(&mut self) {
        self.manufacturer.clear();
    }

    // Param is passed by value, moved
    pub fn set_manufacturer(&mut self, v: ::std::string::String) {
        self.manufacturer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_manufacturer(&mut self) -> &mut ::std::string::String {
        &mut self.manufacturer
    }

    // Take field
    pub fn take_manufacturer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.manufacturer, ::std::string::String::new())
    }

    // string model = 3;


    pub fn get_model(&self) -> &str {
        &self.model
    }
    pub fn clear_model(&mut self) {
        self.model.clear();
    }

    // Param is passed by value, moved
    pub fn set_model(&mut self, v: ::std::string::String) {
        self.model = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_model(&mut self) -> &mut ::std::string::String {
        &mut self.model
    }

    // Take field
    pub fn take_model(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.model, ::std::string::String::new())
    }

    // string version = 4;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }

    // string family = 5;


    pub fn get_family(&self) -> &str {
        &self.family
    }
    pub fn clear_family(&mut self) {
        self.family.clear();
    }

    // Param is passed by value, moved
    pub fn set_family(&mut self, v: ::std::string::String) {
        self.family = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_family(&mut self) -> &mut ::std::string::String {
        &mut self.family
    }

    // Take field
    pub fn take_family(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.family, ::std::string::String::new())
    }

    // string sku = 6;


    pub fn get_sku(&self) -> &str {
        &self.sku
    }
    pub fn clear_sku(&mut self) {
        self.sku.clear();
    }

    // Param is passed by value, moved
    pub fn set_sku(&mut self, v: ::std::string::String) {
        self.sku = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sku(&mut self) -> &mut ::std::string::String {
        &mut self.sku
    }

    // Take field
    pub fn take_sku(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sku, ::std::string::String::new())
    }

    // string serialnumber = 7;


    pub fn get_serialnumber(&self) -> &str {
        &self.serialnumber
    }
    pub fn clear_serialnumber(&mut self) {
        self.serialnumber.clear();
    }

    // Param is passed by value, moved
    pub fn set_serialnumber(&mut self, v: ::std::string::String) {
        self.serialnumber = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serialnumber(&mut self) -> &mut ::std::string::String {
        &mut self.serialnumber
    }

    // Take field
    pub fn take_serialnumber(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.serialnumber, ::std::string::String::new())
    }

    // string name = 8;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string uuid = 9;


    pub fn get_uuid(&self) -> &str {
        &self.uuid
    }
    pub fn clear_uuid(&mut self) {
        self.uuid.clear();
    }

    // Param is passed by value, moved
    pub fn set_uuid(&mut self, v: ::std::string::String) {
        self.uuid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uuid(&mut self) -> &mut ::std::string::String {
        &mut self.uuid
    }

    // Take field
    pub fn take_uuid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.uuid, ::std::string::String::new())
    }

    // string width = 10;


    pub fn get_width(&self) -> &str {
        &self.width
    }
    pub fn clear_width(&mut self) {
        self.width.clear();
    }

    // Param is passed by value, moved
    pub fn set_width(&mut self, v: ::std::string::String) {
        self.width = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_width(&mut self) -> &mut ::std::string::String {
        &mut self.width
    }

    // Take field
    pub fn take_width(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.width, ::std::string::String::new())
    }

    // repeated string capabilities = 11;


    pub fn get_capabilities(&self) -> &[::std::string::String] {
        &self.capabilities
    }
    pub fn clear_capabilities(&mut self) {
        self.capabilities.clear();
    }

    // Param is passed by value, moved
    pub fn set_capabilities(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.capabilities = v;
    }

    // Mutable pointer to the field.
    pub fn mut_capabilities(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.capabilities
    }

    // Take field
    pub fn take_capabilities(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.capabilities, ::protobuf::RepeatedField::new())
    }

    // string feature_byte = 12;


    pub fn get_feature_byte(&self) -> &str {
        &self.feature_byte
    }
    pub fn clear_feature_byte(&mut self) {
        self.feature_byte.clear();
    }

    // Param is passed by value, moved
    pub fn set_feature_byte(&mut self, v: ::std::string::String) {
        self.feature_byte = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_feature_byte(&mut self) -> &mut ::std::string::String {
        &mut self.feature_byte
    }

    // Take field
    pub fn take_feature_byte(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.feature_byte, ::std::string::String::new())
    }
}

impl ::protobuf::Message for System {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.chassis)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.manufacturer)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.model)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.family)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sku)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.serialnumber)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.uuid)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.width)?;
                },
                11 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.capabilities)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.feature_byte)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.chassis.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.chassis);
        }
        if !self.manufacturer.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.manufacturer);
        }
        if !self.model.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.model);
        }
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.version);
        }
        if !self.family.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.family);
        }
        if !self.sku.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.sku);
        }
        if !self.serialnumber.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.serialnumber);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.name);
        }
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.uuid);
        }
        if !self.width.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.width);
        }
        for value in &self.capabilities {
            my_size += ::protobuf::rt::string_size(11, &value);
        };
        if !self.feature_byte.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.feature_byte);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.chassis.is_empty() {
            os.write_string(1, &self.chassis)?;
        }
        if !self.manufacturer.is_empty() {
            os.write_string(2, &self.manufacturer)?;
        }
        if !self.model.is_empty() {
            os.write_string(3, &self.model)?;
        }
        if !self.version.is_empty() {
            os.write_string(4, &self.version)?;
        }
        if !self.family.is_empty() {
            os.write_string(5, &self.family)?;
        }
        if !self.sku.is_empty() {
            os.write_string(6, &self.sku)?;
        }
        if !self.serialnumber.is_empty() {
            os.write_string(7, &self.serialnumber)?;
        }
        if !self.name.is_empty() {
            os.write_string(8, &self.name)?;
        }
        if !self.uuid.is_empty() {
            os.write_string(9, &self.uuid)?;
        }
        if !self.width.is_empty() {
            os.write_string(10, &self.width)?;
        }
        for v in &self.capabilities {
            os.write_string(11, &v)?;
        };
        if !self.feature_byte.is_empty() {
            os.write_string(12, &self.feature_byte)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> System {
        System::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "chassis",
                    |m: &System| { &m.chassis },
                    |m: &mut System| { &mut m.chassis },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "manufacturer",
                    |m: &System| { &m.manufacturer },
                    |m: &mut System| { &mut m.manufacturer },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "model",
                    |m: &System| { &m.model },
                    |m: &mut System| { &mut m.model },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "version",
                    |m: &System| { &m.version },
                    |m: &mut System| { &mut m.version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "family",
                    |m: &System| { &m.family },
                    |m: &mut System| { &mut m.family },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "sku",
                    |m: &System| { &m.sku },
                    |m: &mut System| { &mut m.sku },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "serialnumber",
                    |m: &System| { &m.serialnumber },
                    |m: &mut System| { &mut m.serialnumber },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &System| { &m.name },
                    |m: &mut System| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "uuid",
                    |m: &System| { &m.uuid },
                    |m: &mut System| { &mut m.uuid },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "width",
                    |m: &System| { &m.width },
                    |m: &mut System| { &mut m.width },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "capabilities",
                    |m: &System| { &m.capabilities },
                    |m: &mut System| { &mut m.capabilities },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "feature_byte",
                    |m: &System| { &m.feature_byte },
                    |m: &mut System| { &mut m.feature_byte },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<System>(
                    "System",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static System {
        static mut instance: ::protobuf::lazy::Lazy<System> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const System,
        };
        unsafe {
            instance.get(System::new)
        }
    }
}

impl ::protobuf::Clear for System {
    fn clear(&mut self) {
        self.chassis.clear();
        self.manufacturer.clear();
        self.model.clear();
        self.version.clear();
        self.family.clear();
        self.sku.clear();
        self.serialnumber.clear();
        self.name.clear();
        self.uuid.clear();
        self.width.clear();
        self.capabilities.clear();
        self.feature_byte.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for System {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for System {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20hp/xy/sunrise_v1/hw/system.proto\x12\x13hp.xy.sunrise_v1.hw\"\xc9\
    \x02\n\x06System\x12\x18\n\x07chassis\x18\x01\x20\x01(\tR\x07chassis\x12\
    \"\n\x0cmanufacturer\x18\x02\x20\x01(\tR\x0cmanufacturer\x12\x14\n\x05mo\
    del\x18\x03\x20\x01(\tR\x05model\x12\x18\n\x07version\x18\x04\x20\x01(\t\
    R\x07version\x12\x16\n\x06family\x18\x05\x20\x01(\tR\x06family\x12\x10\n\
    \x03sku\x18\x06\x20\x01(\tR\x03sku\x12\"\n\x0cserialnumber\x18\x07\x20\
    \x01(\tR\x0cserialnumber\x12\x12\n\x04name\x18\x08\x20\x01(\tR\x04name\
    \x12\x12\n\x04uuid\x18\t\x20\x01(\tR\x04uuid\x12\x14\n\x05width\x18\n\
    \x20\x01(\tR\x05width\x12\"\n\x0ccapabilities\x18\x0b\x20\x03(\tR\x0ccap\
    abilities\x12!\n\x0cfeature_byte\x18\x0c\x20\x01(\tR\x0bfeatureByteJ\xf5\
    \x15\n\x07\x12\x05\0\0\x91\x01\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\
    \n\x01\x02\x12\x03\x02\0\x1c\n\x0b\n\x02\x04\0\x12\x05\x04\0\x91\x01\x01\
    \n\n\n\x03\x04\0\x01\x12\x03\x04\x08\x0e\n\x85\x01\n\x04\x04\0\x02\0\x12\
    \x03\x0f\x04\x17\x1ax*\r\n\x20System\x20Chassis\r\n\x20\r\n\x20Example:\
    \x20Laptop,\x20notebook,\x20desktop\r\n\x20\r\n\x20Source:\r\n\x20*\x20W\
    indows:\x20TBD\r\n\x20*\x20Linux:\x20lshw\x20-\x20description\r\n\n\x0c\
    \n\x05\x04\0\x02\0\x05\x12\x03\x0f\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\x0f\x0b\x12\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0f\x15\x16\n\xa2\
    \x01\n\x04\x04\0\x02\x01\x12\x03\x1a\x04\x1c\x1a\x94\x01*\r\n\x20System\
    \x20Manufacturer\r\n\x20\r\n\x20Example:\x20Hewlett-Packard\r\n\x20\r\n\
    \x20Source:\r\n\x20*\x20Windows:\x20WMI\x20-\x20Win32_ComputerSystem\x20\
    -\x20Manufacturer\r\n\x20*\x20Linux:\x20lshw\x20-\x20vendor\r\n\n\x0c\n\
    \x05\x04\0\x02\x01\x05\x12\x03\x1a\x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03\x1a\x0b\x17\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x1a\x1a\x1b\n\
    \xa8\x01\n\x04\x04\0\x02\x02\x12\x03%\x04\x15\x1a\x9a\x01*\r\n\x20System\
    \x20Model\r\n\x20\r\n\x20Example:\x20HP\x20EliteBook\x20820\x20G1\x20(G4\
    T88LT#AC4)\r\n\x20\r\n\x20Source:\r\n\x20*\x20Windows:\x20\x20WMI\x20-\
    \x20Win32_ComputerSystem\x20-\x20Model\r\n\x20*\x20Linux:\x20lshw\x20-\
    \x20product\r\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03%\x04\n\n\x0c\n\x05\
    \x04\0\x02\x02\x01\x12\x03%\x0b\x10\n\x0c\n\x05\x04\0\x02\x02\x03\x12\
    \x03%\x13\x14\nt\n\x04\x04\0\x02\x03\x12\x030\x04\x17\x1ag*\r\n\x20Syste\
    m\x20Version\r\n\x20\r\n\x20Example:\x20A3009DD10303\r\n\x20\r\n\x20Sour\
    ce:\r\n\x20*\x20Windows:\x20TBD\r\n\x20*\x20Linux:\x20lshw\x20-\x20versi\
    on\r\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x030\x04\n\n\x0c\n\x05\x04\0\
    \x02\x03\x01\x12\x030\x0b\x12\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x030\x15\
    \x16\nh\n\x04\x04\0\x02\x04\x12\x03;\x04\x16\x1a[*\r\n\x20System\x20Fami\
    ly\r\n\x20\r\n\x20Example:\x20103C_5336AN\x20\r\n\x20\r\n\x20Source:\r\n\
    \x20*\x20Windows:\x20TBD\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\
    \x02\x04\x05\x12\x03;\x04\n\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03;\x0b\
    \x11\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03;\x14\x15\n\x95\x01\n\x04\x04\
    \0\x02\x05\x12\x03F\x04\x13\x1a\x87\x01*\r\n\x20System\x20SKU\r\n\x20\r\
    \n\x20Example:\x203F0D5AA#ABA,\x20G4T88LT#AC4\r\n\x20\r\n\x20Source:\r\n\
    \x20*\x20Windows:\x20WMI\x20-\x20MS_SystemInformation\x20-\x20SystemSKU\
    \r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03F\
    \x04\n\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03F\x0b\x0e\n\x0c\n\x05\x04\0\
    \x02\x05\x03\x12\x03F\x11\x12\n\xf9\x02\n\x04\x04\0\x02\x06\x12\x03W\x04\
    \x1c\x1a\xeb\x02*\r\n\x20System\x20Serial\x20Number\r\n\x20Contains\x20e\
    ncoded\x20information\x20that\x20represents\x20serial\x20number\x20of\
    \x20system\x20or\x20device.\r\n\x20\r\n\x20Format:\x20\r\n\x20*\x20CCC\
    \x20=\x20supplier\x20code\x20(encoded)\r\n\x20*\x20YMM\x20=\x20week\x20o\
    f\x20manufacture\x20(encoded)\r\n\x20*\x20RRRR\x20=\x20random\x20values\
    \r\n\x20\r\n\x20Example:\x205CG4441ZNV,\x20CND8127SCP\r\n\x20\r\n\x20Sou\
    rce:\r\n\x20*\x20Windows:\x20WMI\x20-\x20Win32_ComputerSystemProduct\x20\
    -\x20IdentifyingNumber\r\n\x20*\x20Linux:\x20lshw\x20-\x20serial\r\n\n\
    \x0c\n\x05\x04\0\x02\x06\x05\x12\x03W\x04\n\n\x0c\n\x05\x04\0\x02\x06\
    \x01\x12\x03W\x0b\x17\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03W\x1a\x1b\n\
    \x91\x01\n\x04\x04\0\x02\x07\x12\x03b\x04\x14\x1a\x83\x01*\r\n\x20System\
    \x20Name\r\n\x20\r\n\x20Example:\x20JOHNDOE10,\x20my-awesome-pc\r\n\x20\
    \r\n\x20Source:\r\n\x20*\x20Windows:\x20WMI\x20-\x20Win32_ComputerSystem\
    \x20-\x20Name\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\x07\
    \x05\x12\x03b\x04\n\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03b\x0b\x0f\n\x0c\
    \n\x05\x04\0\x02\x07\x03\x12\x03b\x12\x13\n\x8a\x02\n\x04\x04\0\x02\x08\
    \x12\x03n\x04\x14\x1a\xfc\x01*\r\n\x20System\x20UUID\r\n\x20Universally\
    \x20Unique\x20Identifier\x20is\x20a\x2016-octet\x20(128-bit)\x20number\
    \x20\r\n\x20\r\n\x20Example:\x20550E8400-E29B-41D4-A716-446655440000,\
    \x207F57D02D-7314-E311-A9BD-F7757856691A\r\n\x20\r\n\x20Source:\r\n\x20*\
    \x20Windows:\x20WMI\x20-\x20Win32_ComputerSystemProduct\x20-\x20UUID\r\n\
    \x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\x08\x05\x12\x03n\x04\n\
    \n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03n\x0b\x0f\n\x0c\n\x05\x04\0\x02\
    \x08\x03\x12\x03n\x12\x13\ne\n\x04\x04\0\x02\t\x12\x03y\x04\x16\x1aX*\r\
    \n\x20System\x20Bit\x20Width\r\n\x20\r\n\x20Example:\x2064-bit\r\n\x20\r\
    \n\x20Source:\r\n\x20*\x20Windows:\x20TBD\r\n\x20*\x20Linux:\x20TBD\r\n\
    \n\x0c\n\x05\x04\0\x02\t\x05\x12\x03y\x04\n\n\x0c\n\x05\x04\0\x02\t\x01\
    \x12\x03y\x0b\x10\n\x0c\n\x05\x04\0\x02\t\x03\x12\x03y\x13\x15\n\x95\x01\
    \n\x04\x04\0\x02\n\x12\x04\x84\x01\x04&\x1a\x86\x01*\r\n\x20System\x20Ca\
    pabilities\r\n\x20\r\n\x20Example:\x20smbios-2.7\x20dmi-2.7\x20smp\x20vs\
    yscall32\r\n\x20\r\n\x20Source:\r\n\x20*\x20Windows:\x20TBD\r\n\x20*\x20\
    Linux:\x20lshw\x20-\x20capabilities\r\n\n\r\n\x05\x04\0\x02\n\x04\x12\
    \x04\x84\x01\x04\x0c\n\r\n\x05\x04\0\x02\n\x05\x12\x04\x84\x01\r\x13\n\r\
    \n\x05\x04\0\x02\n\x01\x12\x04\x84\x01\x14\x20\n\r\n\x05\x04\0\x02\n\x03\
    \x12\x04\x84\x01#%\n\xc3\x02\n\x04\x04\0\x02\x0b\x12\x04\x90\x01\x04\x1d\
    \x1a\xb4\x02*\x20\r\n\x20Feature\x20byte\x20contains\x20a\x20series\x20o\
    f\x20flags\x20that\x20indicates\x20whether\x20a\x20software\x20or\x20har\
    dware\x20component\x20is\x20pre-installed.\r\n\x20\r\n\x20Example:\x203K\
    3Q6b7K7M7WaBaNapaqasawbhbzcbdUdXdpdq.mD\r\n\x20\x20\x20\x20\x20The\x20\"\
    cb\"\x20in\x20the\x20middle\x20means\x20\"30\x20days\x20McAfee\x20trial\
    \"\r\n\x20\r\n\x20Source:\r\n\x20*\x20Windows:\x20c:\\hp\\bin\\rstone.in\
    i\\FeatureByte\r\n\x20*\x20Linux:\x20TBD\r\n\n\r\n\x05\x04\0\x02\x0b\x05\
    \x12\x04\x90\x01\x04\n\n\r\n\x05\x04\0\x02\x0b\x01\x12\x04\x90\x01\x0b\
    \x17\n\r\n\x05\x04\0\x02\x0b\x03\x12\x04\x90\x01\x1a\x1cb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
