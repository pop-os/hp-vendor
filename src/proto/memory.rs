// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `hp/xy/sunrise_v1/hw/memory.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct MemoryPhysical {
    // message fields
    pub state: super::state::HWState,
    pub serial_number: ::std::string::String,
    pub part_number: ::std::string::String,
    pub manufacturer: ::std::string::String,
    pub form_factor: ::std::string::String,
    pub field_type: ::std::string::String,
    pub size: u64,
    pub speed: u32,
    pub data_width: u32,
    pub bank_label: ::std::string::String,
    pub locator: ::std::string::String,
    pub rank: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MemoryPhysical {
    fn default() -> &'a MemoryPhysical {
        <MemoryPhysical as ::protobuf::Message>::default_instance()
    }
}

impl MemoryPhysical {
    pub fn new() -> MemoryPhysical {
        ::std::default::Default::default()
    }

    // .hp.xy.sunrise_v1.HWState state = 1;


    pub fn get_state(&self) -> super::state::HWState {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = super::state::HWState::HW_STATE_SAME;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: super::state::HWState) {
        self.state = v;
    }

    // string serial_number = 2;


    pub fn get_serial_number(&self) -> &str {
        &self.serial_number
    }
    pub fn clear_serial_number(&mut self) {
        self.serial_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        &mut self.serial_number
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.serial_number, ::std::string::String::new())
    }

    // string part_number = 3;


    pub fn get_part_number(&self) -> &str {
        &self.part_number
    }
    pub fn clear_part_number(&mut self) {
        self.part_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_part_number(&mut self, v: ::std::string::String) {
        self.part_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_part_number(&mut self) -> &mut ::std::string::String {
        &mut self.part_number
    }

    // Take field
    pub fn take_part_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.part_number, ::std::string::String::new())
    }

    // string manufacturer = 4;


    pub fn get_manufacturer(&self) -> &str {
        &self.manufacturer
    }
    pub fn clear_manufacturer(&mut self) {
        self.manufacturer.clear();
    }

    // Param is passed by value, moved
    pub fn set_manufacturer(&mut self, v: ::std::string::String) {
        self.manufacturer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_manufacturer(&mut self) -> &mut ::std::string::String {
        &mut self.manufacturer
    }

    // Take field
    pub fn take_manufacturer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.manufacturer, ::std::string::String::new())
    }

    // string form_factor = 5;


    pub fn get_form_factor(&self) -> &str {
        &self.form_factor
    }
    pub fn clear_form_factor(&mut self) {
        self.form_factor.clear();
    }

    // Param is passed by value, moved
    pub fn set_form_factor(&mut self, v: ::std::string::String) {
        self.form_factor = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_form_factor(&mut self) -> &mut ::std::string::String {
        &mut self.form_factor
    }

    // Take field
    pub fn take_form_factor(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.form_factor, ::std::string::String::new())
    }

    // string type = 6;


    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    // uint64 size = 7;


    pub fn get_size(&self) -> u64 {
        self.size
    }
    pub fn clear_size(&mut self) {
        self.size = 0;
    }

    // Param is passed by value, moved
    pub fn set_size(&mut self, v: u64) {
        self.size = v;
    }

    // uint32 speed = 8;


    pub fn get_speed(&self) -> u32 {
        self.speed
    }
    pub fn clear_speed(&mut self) {
        self.speed = 0;
    }

    // Param is passed by value, moved
    pub fn set_speed(&mut self, v: u32) {
        self.speed = v;
    }

    // uint32 data_width = 9;


    pub fn get_data_width(&self) -> u32 {
        self.data_width
    }
    pub fn clear_data_width(&mut self) {
        self.data_width = 0;
    }

    // Param is passed by value, moved
    pub fn set_data_width(&mut self, v: u32) {
        self.data_width = v;
    }

    // string bank_label = 10;


    pub fn get_bank_label(&self) -> &str {
        &self.bank_label
    }
    pub fn clear_bank_label(&mut self) {
        self.bank_label.clear();
    }

    // Param is passed by value, moved
    pub fn set_bank_label(&mut self, v: ::std::string::String) {
        self.bank_label = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bank_label(&mut self) -> &mut ::std::string::String {
        &mut self.bank_label
    }

    // Take field
    pub fn take_bank_label(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bank_label, ::std::string::String::new())
    }

    // string locator = 11;


    pub fn get_locator(&self) -> &str {
        &self.locator
    }
    pub fn clear_locator(&mut self) {
        self.locator.clear();
    }

    // Param is passed by value, moved
    pub fn set_locator(&mut self, v: ::std::string::String) {
        self.locator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_locator(&mut self) -> &mut ::std::string::String {
        &mut self.locator
    }

    // Take field
    pub fn take_locator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.locator, ::std::string::String::new())
    }

    // uint32 rank = 12;


    pub fn get_rank(&self) -> u32 {
        self.rank
    }
    pub fn clear_rank(&mut self) {
        self.rank = 0;
    }

    // Param is passed by value, moved
    pub fn set_rank(&mut self, v: u32) {
        self.rank = v;
    }
}

impl ::protobuf::Message for MemoryPhysical {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.serial_number)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.part_number)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.manufacturer)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.form_factor)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.size = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.speed = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.data_width = tmp;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bank_label)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.locator)?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.rank = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.state != super::state::HWState::HW_STATE_SAME {
            my_size += ::protobuf::rt::enum_size(1, self.state);
        }
        if !self.serial_number.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.serial_number);
        }
        if !self.part_number.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.part_number);
        }
        if !self.manufacturer.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.manufacturer);
        }
        if !self.form_factor.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.form_factor);
        }
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.field_type);
        }
        if self.size != 0 {
            my_size += ::protobuf::rt::value_size(7, self.size, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.speed != 0 {
            my_size += ::protobuf::rt::value_size(8, self.speed, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.data_width != 0 {
            my_size += ::protobuf::rt::value_size(9, self.data_width, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.bank_label.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.bank_label);
        }
        if !self.locator.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.locator);
        }
        if self.rank != 0 {
            my_size += ::protobuf::rt::value_size(12, self.rank, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.state != super::state::HWState::HW_STATE_SAME {
            os.write_enum(1, self.state.value())?;
        }
        if !self.serial_number.is_empty() {
            os.write_string(2, &self.serial_number)?;
        }
        if !self.part_number.is_empty() {
            os.write_string(3, &self.part_number)?;
        }
        if !self.manufacturer.is_empty() {
            os.write_string(4, &self.manufacturer)?;
        }
        if !self.form_factor.is_empty() {
            os.write_string(5, &self.form_factor)?;
        }
        if !self.field_type.is_empty() {
            os.write_string(6, &self.field_type)?;
        }
        if self.size != 0 {
            os.write_uint64(7, self.size)?;
        }
        if self.speed != 0 {
            os.write_uint32(8, self.speed)?;
        }
        if self.data_width != 0 {
            os.write_uint32(9, self.data_width)?;
        }
        if !self.bank_label.is_empty() {
            os.write_string(10, &self.bank_label)?;
        }
        if !self.locator.is_empty() {
            os.write_string(11, &self.locator)?;
        }
        if self.rank != 0 {
            os.write_uint32(12, self.rank)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MemoryPhysical {
        MemoryPhysical::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::state::HWState>>(
                    "state",
                    |m: &MemoryPhysical| { &m.state },
                    |m: &mut MemoryPhysical| { &mut m.state },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "serial_number",
                    |m: &MemoryPhysical| { &m.serial_number },
                    |m: &mut MemoryPhysical| { &mut m.serial_number },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "part_number",
                    |m: &MemoryPhysical| { &m.part_number },
                    |m: &mut MemoryPhysical| { &mut m.part_number },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "manufacturer",
                    |m: &MemoryPhysical| { &m.manufacturer },
                    |m: &mut MemoryPhysical| { &mut m.manufacturer },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "form_factor",
                    |m: &MemoryPhysical| { &m.form_factor },
                    |m: &mut MemoryPhysical| { &mut m.form_factor },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "type",
                    |m: &MemoryPhysical| { &m.field_type },
                    |m: &mut MemoryPhysical| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "size",
                    |m: &MemoryPhysical| { &m.size },
                    |m: &mut MemoryPhysical| { &mut m.size },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "speed",
                    |m: &MemoryPhysical| { &m.speed },
                    |m: &mut MemoryPhysical| { &mut m.speed },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "data_width",
                    |m: &MemoryPhysical| { &m.data_width },
                    |m: &mut MemoryPhysical| { &mut m.data_width },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "bank_label",
                    |m: &MemoryPhysical| { &m.bank_label },
                    |m: &mut MemoryPhysical| { &mut m.bank_label },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "locator",
                    |m: &MemoryPhysical| { &m.locator },
                    |m: &mut MemoryPhysical| { &mut m.locator },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "rank",
                    |m: &MemoryPhysical| { &m.rank },
                    |m: &mut MemoryPhysical| { &mut m.rank },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MemoryPhysical>(
                    "MemoryPhysical",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MemoryPhysical {
        static mut instance: ::protobuf::lazy::Lazy<MemoryPhysical> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MemoryPhysical,
        };
        unsafe {
            instance.get(MemoryPhysical::new)
        }
    }
}

impl ::protobuf::Clear for MemoryPhysical {
    fn clear(&mut self) {
        self.state = super::state::HWState::HW_STATE_SAME;
        self.serial_number.clear();
        self.part_number.clear();
        self.manufacturer.clear();
        self.form_factor.clear();
        self.field_type.clear();
        self.size = 0;
        self.speed = 0;
        self.data_width = 0;
        self.bank_label.clear();
        self.locator.clear();
        self.rank = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MemoryPhysical {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MemoryPhysical {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20hp/xy/sunrise_v1/hw/memory.proto\x12\x13hp.xy.sunrise_v1.hw\x1a\
    \x1chp/xy/sunrise_v1/state.proto\"\xf6\x02\n\x0eMemoryPhysical\x12/\n\
    \x05state\x18\x01\x20\x01(\x0e2\x19.hp.xy.sunrise_v1.HWStateR\x05state\
    \x12#\n\rserial_number\x18\x02\x20\x01(\tR\x0cserialNumber\x12\x1f\n\x0b\
    part_number\x18\x03\x20\x01(\tR\npartNumber\x12\"\n\x0cmanufacturer\x18\
    \x04\x20\x01(\tR\x0cmanufacturer\x12\x1f\n\x0bform_factor\x18\x05\x20\
    \x01(\tR\nformFactor\x12\x12\n\x04type\x18\x06\x20\x01(\tR\x04type\x12\
    \x12\n\x04size\x18\x07\x20\x01(\x04R\x04size\x12\x14\n\x05speed\x18\x08\
    \x20\x01(\rR\x05speed\x12\x1d\n\ndata_width\x18\t\x20\x01(\rR\tdataWidth\
    \x12\x1d\n\nbank_label\x18\n\x20\x01(\tR\tbankLabel\x12\x18\n\x07locator\
    \x18\x0b\x20\x01(\tR\x07locator\x12\x12\n\x04rank\x18\x0c\x20\x01(\rR\
    \x04rankJ\x9d\x13\n\x07\x12\x05\0\0\x8a\x01\x01\n\x08\n\x01\x0c\x12\x03\
    \0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x1c\n\t\n\x02\x03\0\x12\x03\x04\0\
    &\n\x0b\n\x02\x04\0\x12\x05\x06\0\x8a\x01\x01\n\n\n\x03\x04\0\x01\x12\
    \x03\x06\x08\x16\n\xa0\x02\n\x04\x04\0\x02\0\x12\x03\x0e\x04\x16\x1a\x92\
    \x02*\r\n\x20HW\x20State\r\n\x20\r\n\x20HW_STATE_ADDED\x20-\x20The\x20HW\
    \x20component\x20was\x20added\x20or\x20first\x20detected\x20(all\x20data\
    \x20fields\x20are\x20populated)\r\n\x20HW_STATE_REMOVED\x20-\x20The\x20H\
    W\x20component\x20was\x20removed\x20or\x20not\x20detected\x20anymore\x20\
    (If\x20there\x20are\x20Primary\x20Keys\x20defined\x20send\x20them\x20onl\
    y,\x20otherwise\x20populate\x20all\x20data\x20fields)\r\n\n\x0c\n\x05\
    \x04\0\x02\0\x06\x12\x03\x0e\x04\x0b\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\
    \x0e\x0c\x11\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0e\x14\x15\n\x9b\x01\n\
    \x04\x04\0\x02\x01\x12\x03\x19\x04\x1d\x1a\x8d\x01*\r\n\x20Serial\x20Num\
    ber\x20of\x20the\x20Chip\x20(PRIMARY\x20KEY)\r\n\x20\r\n\x20Example:\r\n\
    \x20\r\n\x20Source\r\n\x20*\x20Windows:\x20WMI\x20-\x20Win32_PhysicalMem\
    ory\x20-\x20SerialNumber\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\
    \x02\x01\x05\x12\x03\x19\x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x19\
    \x0b\x18\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x19\x1b\x1c\n\x97\x01\n\
    \x04\x04\0\x02\x02\x12\x03$\x04\x1b\x1a\x89\x01*\r\n\x20Part\x20Number\
    \x20of\x20the\x20Chip\x20(PRIMARY\x20KEY)\r\n\x20\r\n\x20Example:\r\n\
    \x20\r\n\x20Source\r\n\x20*\x20Windows:\x20WMI\x20-\x20Win32_PhysicalMem\
    ory\x20-\x20PartNumber\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\
    \x02\x02\x05\x12\x03$\x04\n\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03$\x0b\
    \x16\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03$\x19\x1a\n\x84\x01\n\x04\x04\
    \0\x02\x03\x12\x03/\x04\x1c\x1aw*\r\n\x20Chip\x20Manufacturer\r\n\x20\r\
    \n\x20Example:\r\n\x20\r\n\x20Source\r\n\x20*\x20Windows:\x20WMI\x20-\
    \x20Win32_PhysicalMemory\x20-\x20Manufacturer\r\n\x20*\x20Linux:\x20TBD\
    \r\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03/\x04\n\n\x0c\n\x05\x04\0\x02\
    \x03\x01\x12\x03/\x0b\x17\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03/\x1a\x1b\
    \n\x81\x01\n\x04\x04\0\x02\x04\x12\x03:\x04\x1b\x1at*\r\n\x20Chip\x20For\
    m\x20Factor\r\n\x20\r\n\x20Example:\r\n\x20\r\n\x20Source\r\n\x20*\x20Wi\
    ndows:\x20WMI\x20-\x20Win32_PhysicalMemory\x20-\x20FormFactor\r\n\x20*\
    \x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03:\x04\n\n\x0c\
    \n\x05\x04\0\x02\x04\x01\x12\x03:\x0b\x16\n\x0c\n\x05\x04\0\x02\x04\x03\
    \x12\x03:\x19\x1a\n\x7f\n\x04\x04\0\x02\x05\x12\x03E\x04\x14\x1ar*\r\n\
    \x20Chip\x20Type\r\n\x20\r\n\x20Example:\x20DDR4\r\n\x20\r\n\x20Source\r\
    \n\x20*\x20Windows:\x20WMI\x20-\x20Win32_PhysicalMemory\x20-\x20TypeDeta\
    il\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03E\
    \x04\n\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03E\x0b\x0f\n\x0c\n\x05\x04\0\
    \x02\x05\x03\x12\x03E\x12\x13\n\x82\x01\n\x04\x04\0\x02\x06\x12\x03P\x04\
    \x14\x1au*\r\n\x20Chip\x20Size\x20(in\x20MBs)\r\n\x20\r\n\x20Example:\
    \x20\r\n\x20\r\n\x20Source\r\n\x20*\x20Windows:\x20WMI\x20-\x20Win32_Phy\
    sicalMemory\x20-\x20Capacity\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\
    \x04\0\x02\x06\x05\x12\x03P\x04\n\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03P\
    \x0b\x0f\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03P\x12\x13\n\x8f\x01\n\x04\
    \x04\0\x02\x07\x12\x03[\x04\x15\x1a\x81\x01*\r\n\x20Memory\x20Chip\x20Sp\
    eed\x20(in\x20Nanoseconds)\r\n\x20\r\n\x20Example:\r\n\x20\r\n\x20Source\
    \r\n\x20*\x20Windows:\x20WMI\x20-\x20Win32_PhysicalMemory\x20-\x20Speed\
    \r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\x07\x05\x12\x03[\
    \x04\n\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03[\x0b\x10\n\x0c\n\x05\x04\0\
    \x02\x07\x03\x12\x03[\x13\x14\n\x89\x01\n\x04\x04\0\x02\x08\x12\x03f\x04\
    \x1a\x1a|*\r\n\x20Chip\x20Data\x20Width\r\n\x20\r\n\x20Example:\x2064\
    \x20(bits)\r\n\x20\r\n\x20Source\r\n\x20*\x20Windows:\x20WMI\x20-\x20Win\
    32_PhysicalMemory\x20-\x20DataWidth\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\
    \n\x05\x04\0\x02\x08\x05\x12\x03f\x04\n\n\x0c\n\x05\x04\0\x02\x08\x01\
    \x12\x03f\x0b\x15\n\x0c\n\x05\x04\0\x02\x08\x03\x12\x03f\x18\x19\nz\n\
    \x04\x04\0\x02\t\x12\x03q\x04\x1b\x1am*\r\n\x20Bank\x20Label\r\n\x20\r\n\
    \x20Example:\r\n\x20\r\n\x20Source\r\n\x20*\x20Windows:\x20WMI\x20-\x20W\
    in32_PhysicalMemory\x20-\x20BankLabel\r\n\x20*\x20Linux:\x20TBD\r\n\n\
    \x0c\n\x05\x04\0\x02\t\x05\x12\x03q\x04\n\n\x0c\n\x05\x04\0\x02\t\x01\
    \x12\x03q\x0b\x15\n\x0c\n\x05\x04\0\x02\t\x03\x12\x03q\x18\x1a\n\xb9\x01\
    \n\x04\x04\0\x02\n\x12\x03}\x04\x18\x1a\xab\x01*\r\n\x20Locator\r\n\x20L\
    abel\x20of\x20the\x20socket\x20or\x20circuit\x20board\x20that\x20holds\
    \x20the\x20memory\r\n\x20\r\n\x20Example:\r\n\x20\r\n\x20Source\r\n\x20*\
    \x20Windows:\x20WMI\x20-\x20Win32_PhysicalMemory\x20-\x20DeviceLocator\r\
    \n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\n\x05\x12\x03}\x04\n\
    \n\x0c\n\x05\x04\0\x02\n\x01\x12\x03}\x0b\x12\n\x0c\n\x05\x04\0\x02\n\
    \x03\x12\x03}\x15\x17\n\x9c\x01\n\x04\x04\0\x02\x0b\x12\x04\x89\x01\x04\
    \x15\x1a\x8d\x01*\r\n\x20Rank\r\n\x20Number\x20of\x20DIMM\x20ranks\x20in\
    \x20the\x20memory\x20array.\r\n\x20\r\n\x20Example:\x202\r\n\x20\r\n\x20\
    Source\r\n\x20*\x20Windows:\x20WMI\x20-\x20MSSmBios_RawSMBiosTables\r\n\
    \x20*\x20Linux:\x20TBD\r\n\n\r\n\x05\x04\0\x02\x0b\x05\x12\x04\x89\x01\
    \x04\n\n\r\n\x05\x04\0\x02\x0b\x01\x12\x04\x89\x01\x0b\x0f\n\r\n\x05\x04\
    \0\x02\x0b\x03\x12\x04\x89\x01\x12\x14b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
