// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `hp/xy/sunrise_v1/sw/driver.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct Driver {
    // message fields
    pub state: super::state::SWState,
    pub module_name: ::std::string::String,
    pub display_name: ::std::string::String,
    pub driver_type: ::std::string::String,
    pub driver_category: ::std::string::String,
    pub driver_version: ::std::string::String,
    pub size: u64,
    pub link_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub pnp_device_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Driver {
    fn default() -> &'a Driver {
        <Driver as ::protobuf::Message>::default_instance()
    }
}

impl Driver {
    pub fn new() -> Driver {
        ::std::default::Default::default()
    }

    // .hp.xy.sunrise_v1.SWState state = 1;


    pub fn get_state(&self) -> super::state::SWState {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = super::state::SWState::SW_STATE_SAME;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: super::state::SWState) {
        self.state = v;
    }

    // string module_name = 2;


    pub fn get_module_name(&self) -> &str {
        &self.module_name
    }
    pub fn clear_module_name(&mut self) {
        self.module_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_module_name(&mut self, v: ::std::string::String) {
        self.module_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_module_name(&mut self) -> &mut ::std::string::String {
        &mut self.module_name
    }

    // Take field
    pub fn take_module_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.module_name, ::std::string::String::new())
    }

    // string display_name = 3;


    pub fn get_display_name(&self) -> &str {
        &self.display_name
    }
    pub fn clear_display_name(&mut self) {
        self.display_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_display_name(&mut self, v: ::std::string::String) {
        self.display_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_display_name(&mut self) -> &mut ::std::string::String {
        &mut self.display_name
    }

    // Take field
    pub fn take_display_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.display_name, ::std::string::String::new())
    }

    // string driver_type = 4;


    pub fn get_driver_type(&self) -> &str {
        &self.driver_type
    }
    pub fn clear_driver_type(&mut self) {
        self.driver_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_driver_type(&mut self, v: ::std::string::String) {
        self.driver_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_driver_type(&mut self) -> &mut ::std::string::String {
        &mut self.driver_type
    }

    // Take field
    pub fn take_driver_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.driver_type, ::std::string::String::new())
    }

    // string driver_category = 5;


    pub fn get_driver_category(&self) -> &str {
        &self.driver_category
    }
    pub fn clear_driver_category(&mut self) {
        self.driver_category.clear();
    }

    // Param is passed by value, moved
    pub fn set_driver_category(&mut self, v: ::std::string::String) {
        self.driver_category = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_driver_category(&mut self) -> &mut ::std::string::String {
        &mut self.driver_category
    }

    // Take field
    pub fn take_driver_category(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.driver_category, ::std::string::String::new())
    }

    // string driver_version = 6;


    pub fn get_driver_version(&self) -> &str {
        &self.driver_version
    }
    pub fn clear_driver_version(&mut self) {
        self.driver_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_driver_version(&mut self, v: ::std::string::String) {
        self.driver_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_driver_version(&mut self) -> &mut ::std::string::String {
        &mut self.driver_version
    }

    // Take field
    pub fn take_driver_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.driver_version, ::std::string::String::new())
    }

    // uint64 size = 7;


    pub fn get_size(&self) -> u64 {
        self.size
    }
    pub fn clear_size(&mut self) {
        self.size = 0;
    }

    // Param is passed by value, moved
    pub fn set_size(&mut self, v: u64) {
        self.size = v;
    }

    // .google.protobuf.Timestamp link_time = 8;


    pub fn get_link_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.link_time.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_link_time(&mut self) {
        self.link_time.clear();
    }

    pub fn has_link_time(&self) -> bool {
        self.link_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_link_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.link_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_link_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.link_time.is_none() {
            self.link_time.set_default();
        }
        self.link_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_link_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.link_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // string pnp_device_id = 9;


    pub fn get_pnp_device_id(&self) -> &str {
        &self.pnp_device_id
    }
    pub fn clear_pnp_device_id(&mut self) {
        self.pnp_device_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_pnp_device_id(&mut self, v: ::std::string::String) {
        self.pnp_device_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pnp_device_id(&mut self) -> &mut ::std::string::String {
        &mut self.pnp_device_id
    }

    // Take field
    pub fn take_pnp_device_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pnp_device_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Driver {
    fn is_initialized(&self) -> bool {
        for v in &self.link_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.module_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.display_name)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.driver_type)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.driver_category)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.driver_version)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.size = tmp;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.link_time)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pnp_device_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.state != super::state::SWState::SW_STATE_SAME {
            my_size += ::protobuf::rt::enum_size(1, self.state);
        }
        if !self.module_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.module_name);
        }
        if !self.display_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.display_name);
        }
        if !self.driver_type.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.driver_type);
        }
        if !self.driver_category.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.driver_category);
        }
        if !self.driver_version.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.driver_version);
        }
        if self.size != 0 {
            my_size += ::protobuf::rt::value_size(7, self.size, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.link_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.pnp_device_id.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.pnp_device_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.state != super::state::SWState::SW_STATE_SAME {
            os.write_enum(1, self.state.value())?;
        }
        if !self.module_name.is_empty() {
            os.write_string(2, &self.module_name)?;
        }
        if !self.display_name.is_empty() {
            os.write_string(3, &self.display_name)?;
        }
        if !self.driver_type.is_empty() {
            os.write_string(4, &self.driver_type)?;
        }
        if !self.driver_category.is_empty() {
            os.write_string(5, &self.driver_category)?;
        }
        if !self.driver_version.is_empty() {
            os.write_string(6, &self.driver_version)?;
        }
        if self.size != 0 {
            os.write_uint64(7, self.size)?;
        }
        if let Some(ref v) = self.link_time.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.pnp_device_id.is_empty() {
            os.write_string(9, &self.pnp_device_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Driver {
        Driver::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::state::SWState>>(
                    "state",
                    |m: &Driver| { &m.state },
                    |m: &mut Driver| { &mut m.state },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "module_name",
                    |m: &Driver| { &m.module_name },
                    |m: &mut Driver| { &mut m.module_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "display_name",
                    |m: &Driver| { &m.display_name },
                    |m: &mut Driver| { &mut m.display_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "driver_type",
                    |m: &Driver| { &m.driver_type },
                    |m: &mut Driver| { &mut m.driver_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "driver_category",
                    |m: &Driver| { &m.driver_category },
                    |m: &mut Driver| { &mut m.driver_category },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "driver_version",
                    |m: &Driver| { &m.driver_version },
                    |m: &mut Driver| { &mut m.driver_version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "size",
                    |m: &Driver| { &m.size },
                    |m: &mut Driver| { &mut m.size },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "link_time",
                    |m: &Driver| { &m.link_time },
                    |m: &mut Driver| { &mut m.link_time },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "pnp_device_id",
                    |m: &Driver| { &m.pnp_device_id },
                    |m: &mut Driver| { &mut m.pnp_device_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Driver>(
                    "Driver",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Driver {
        static mut instance: ::protobuf::lazy::Lazy<Driver> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Driver,
        };
        unsafe {
            instance.get(Driver::new)
        }
    }
}

impl ::protobuf::Clear for Driver {
    fn clear(&mut self) {
        self.state = super::state::SWState::SW_STATE_SAME;
        self.module_name.clear();
        self.display_name.clear();
        self.driver_type.clear();
        self.driver_category.clear();
        self.driver_version.clear();
        self.size = 0;
        self.link_time.clear();
        self.pnp_device_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Driver {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Driver {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LinuxDriverCrash {
    // message fields
    pub crash_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub kernel: ::std::string::String,
    pub dump_file: ::std::string::String,
    pub up_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub load_average: ::std::string::String,
    pub tasks_count: u32,
    pub panic: ::std::string::String,
    pub pid: u32,
    pub command: ::std::string::String,
    pub task: ::std::string::String,
    pub cpu_cores_count: u32,
    pub state: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LinuxDriverCrash {
    fn default() -> &'a LinuxDriverCrash {
        <LinuxDriverCrash as ::protobuf::Message>::default_instance()
    }
}

impl LinuxDriverCrash {
    pub fn new() -> LinuxDriverCrash {
        ::std::default::Default::default()
    }

    // .google.protobuf.Timestamp crash_time = 1;


    pub fn get_crash_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.crash_time.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_crash_time(&mut self) {
        self.crash_time.clear();
    }

    pub fn has_crash_time(&self) -> bool {
        self.crash_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_crash_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.crash_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_crash_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.crash_time.is_none() {
            self.crash_time.set_default();
        }
        self.crash_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_crash_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.crash_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // string kernel = 2;


    pub fn get_kernel(&self) -> &str {
        &self.kernel
    }
    pub fn clear_kernel(&mut self) {
        self.kernel.clear();
    }

    // Param is passed by value, moved
    pub fn set_kernel(&mut self, v: ::std::string::String) {
        self.kernel = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_kernel(&mut self) -> &mut ::std::string::String {
        &mut self.kernel
    }

    // Take field
    pub fn take_kernel(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.kernel, ::std::string::String::new())
    }

    // string dump_file = 3;


    pub fn get_dump_file(&self) -> &str {
        &self.dump_file
    }
    pub fn clear_dump_file(&mut self) {
        self.dump_file.clear();
    }

    // Param is passed by value, moved
    pub fn set_dump_file(&mut self, v: ::std::string::String) {
        self.dump_file = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dump_file(&mut self) -> &mut ::std::string::String {
        &mut self.dump_file
    }

    // Take field
    pub fn take_dump_file(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dump_file, ::std::string::String::new())
    }

    // .google.protobuf.Duration up_time = 4;


    pub fn get_up_time(&self) -> &::protobuf::well_known_types::Duration {
        self.up_time.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Duration::default_instance())
    }
    pub fn clear_up_time(&mut self) {
        self.up_time.clear();
    }

    pub fn has_up_time(&self) -> bool {
        self.up_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_up_time(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.up_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_up_time(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.up_time.is_none() {
            self.up_time.set_default();
        }
        self.up_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_up_time(&mut self) -> ::protobuf::well_known_types::Duration {
        self.up_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // string load_average = 5;


    pub fn get_load_average(&self) -> &str {
        &self.load_average
    }
    pub fn clear_load_average(&mut self) {
        self.load_average.clear();
    }

    // Param is passed by value, moved
    pub fn set_load_average(&mut self, v: ::std::string::String) {
        self.load_average = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_load_average(&mut self) -> &mut ::std::string::String {
        &mut self.load_average
    }

    // Take field
    pub fn take_load_average(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.load_average, ::std::string::String::new())
    }

    // uint32 tasks_count = 6;


    pub fn get_tasks_count(&self) -> u32 {
        self.tasks_count
    }
    pub fn clear_tasks_count(&mut self) {
        self.tasks_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_tasks_count(&mut self, v: u32) {
        self.tasks_count = v;
    }

    // string panic = 7;


    pub fn get_panic(&self) -> &str {
        &self.panic
    }
    pub fn clear_panic(&mut self) {
        self.panic.clear();
    }

    // Param is passed by value, moved
    pub fn set_panic(&mut self, v: ::std::string::String) {
        self.panic = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_panic(&mut self) -> &mut ::std::string::String {
        &mut self.panic
    }

    // Take field
    pub fn take_panic(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.panic, ::std::string::String::new())
    }

    // uint32 pid = 8;


    pub fn get_pid(&self) -> u32 {
        self.pid
    }
    pub fn clear_pid(&mut self) {
        self.pid = 0;
    }

    // Param is passed by value, moved
    pub fn set_pid(&mut self, v: u32) {
        self.pid = v;
    }

    // string command = 9;


    pub fn get_command(&self) -> &str {
        &self.command
    }
    pub fn clear_command(&mut self) {
        self.command.clear();
    }

    // Param is passed by value, moved
    pub fn set_command(&mut self, v: ::std::string::String) {
        self.command = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_command(&mut self) -> &mut ::std::string::String {
        &mut self.command
    }

    // Take field
    pub fn take_command(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.command, ::std::string::String::new())
    }

    // string task = 10;


    pub fn get_task(&self) -> &str {
        &self.task
    }
    pub fn clear_task(&mut self) {
        self.task.clear();
    }

    // Param is passed by value, moved
    pub fn set_task(&mut self, v: ::std::string::String) {
        self.task = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_task(&mut self) -> &mut ::std::string::String {
        &mut self.task
    }

    // Take field
    pub fn take_task(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.task, ::std::string::String::new())
    }

    // uint32 cpu_cores_count = 11;


    pub fn get_cpu_cores_count(&self) -> u32 {
        self.cpu_cores_count
    }
    pub fn clear_cpu_cores_count(&mut self) {
        self.cpu_cores_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_cpu_cores_count(&mut self, v: u32) {
        self.cpu_cores_count = v;
    }

    // string state = 12;


    pub fn get_state(&self) -> &str {
        &self.state
    }
    pub fn clear_state(&mut self) {
        self.state.clear();
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: ::std::string::String) {
        self.state = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_state(&mut self) -> &mut ::std::string::String {
        &mut self.state
    }

    // Take field
    pub fn take_state(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.state, ::std::string::String::new())
    }
}

impl ::protobuf::Message for LinuxDriverCrash {
    fn is_initialized(&self) -> bool {
        for v in &self.crash_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.up_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.crash_time)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.kernel)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.dump_file)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.up_time)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.load_average)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.tasks_count = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.panic)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.pid = tmp;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.command)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.task)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.cpu_cores_count = tmp;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.state)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.crash_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.kernel.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.kernel);
        }
        if !self.dump_file.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.dump_file);
        }
        if let Some(ref v) = self.up_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.load_average.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.load_average);
        }
        if self.tasks_count != 0 {
            my_size += ::protobuf::rt::value_size(6, self.tasks_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.panic.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.panic);
        }
        if self.pid != 0 {
            my_size += ::protobuf::rt::value_size(8, self.pid, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.command.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.command);
        }
        if !self.task.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.task);
        }
        if self.cpu_cores_count != 0 {
            my_size += ::protobuf::rt::value_size(11, self.cpu_cores_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.state.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.state);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.crash_time.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.kernel.is_empty() {
            os.write_string(2, &self.kernel)?;
        }
        if !self.dump_file.is_empty() {
            os.write_string(3, &self.dump_file)?;
        }
        if let Some(ref v) = self.up_time.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.load_average.is_empty() {
            os.write_string(5, &self.load_average)?;
        }
        if self.tasks_count != 0 {
            os.write_uint32(6, self.tasks_count)?;
        }
        if !self.panic.is_empty() {
            os.write_string(7, &self.panic)?;
        }
        if self.pid != 0 {
            os.write_uint32(8, self.pid)?;
        }
        if !self.command.is_empty() {
            os.write_string(9, &self.command)?;
        }
        if !self.task.is_empty() {
            os.write_string(10, &self.task)?;
        }
        if self.cpu_cores_count != 0 {
            os.write_uint32(11, self.cpu_cores_count)?;
        }
        if !self.state.is_empty() {
            os.write_string(12, &self.state)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LinuxDriverCrash {
        LinuxDriverCrash::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "crash_time",
                    |m: &LinuxDriverCrash| { &m.crash_time },
                    |m: &mut LinuxDriverCrash| { &mut m.crash_time },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "kernel",
                    |m: &LinuxDriverCrash| { &m.kernel },
                    |m: &mut LinuxDriverCrash| { &mut m.kernel },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "dump_file",
                    |m: &LinuxDriverCrash| { &m.dump_file },
                    |m: &mut LinuxDriverCrash| { &mut m.dump_file },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                    "up_time",
                    |m: &LinuxDriverCrash| { &m.up_time },
                    |m: &mut LinuxDriverCrash| { &mut m.up_time },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "load_average",
                    |m: &LinuxDriverCrash| { &m.load_average },
                    |m: &mut LinuxDriverCrash| { &mut m.load_average },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "tasks_count",
                    |m: &LinuxDriverCrash| { &m.tasks_count },
                    |m: &mut LinuxDriverCrash| { &mut m.tasks_count },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "panic",
                    |m: &LinuxDriverCrash| { &m.panic },
                    |m: &mut LinuxDriverCrash| { &mut m.panic },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "pid",
                    |m: &LinuxDriverCrash| { &m.pid },
                    |m: &mut LinuxDriverCrash| { &mut m.pid },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "command",
                    |m: &LinuxDriverCrash| { &m.command },
                    |m: &mut LinuxDriverCrash| { &mut m.command },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "task",
                    |m: &LinuxDriverCrash| { &m.task },
                    |m: &mut LinuxDriverCrash| { &mut m.task },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "cpu_cores_count",
                    |m: &LinuxDriverCrash| { &m.cpu_cores_count },
                    |m: &mut LinuxDriverCrash| { &mut m.cpu_cores_count },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "state",
                    |m: &LinuxDriverCrash| { &m.state },
                    |m: &mut LinuxDriverCrash| { &mut m.state },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LinuxDriverCrash>(
                    "LinuxDriverCrash",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LinuxDriverCrash {
        static mut instance: ::protobuf::lazy::Lazy<LinuxDriverCrash> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LinuxDriverCrash,
        };
        unsafe {
            instance.get(LinuxDriverCrash::new)
        }
    }
}

impl ::protobuf::Clear for LinuxDriverCrash {
    fn clear(&mut self) {
        self.crash_time.clear();
        self.kernel.clear();
        self.dump_file.clear();
        self.up_time.clear();
        self.load_average.clear();
        self.tasks_count = 0;
        self.panic.clear();
        self.pid = 0;
        self.command.clear();
        self.task.clear();
        self.cpu_cores_count = 0;
        self.state.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LinuxDriverCrash {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LinuxDriverCrash {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20hp/xy/sunrise_v1/sw/driver.proto\x12\x13hp.xy.sunrise_v1.sw\x1a\
    \x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/duration.prot\
    o\x1a\x1chp/xy/sunrise_v1/state.proto\"\xdf\x02\n\x06Driver\x12/\n\x05st\
    ate\x18\x01\x20\x01(\x0e2\x19.hp.xy.sunrise_v1.SWStateR\x05state\x12\x1f\
    \n\x0bmodule_name\x18\x02\x20\x01(\tR\nmoduleName\x12!\n\x0cdisplay_name\
    \x18\x03\x20\x01(\tR\x0bdisplayName\x12\x1f\n\x0bdriver_type\x18\x04\x20\
    \x01(\tR\ndriverType\x12'\n\x0fdriver_category\x18\x05\x20\x01(\tR\x0edr\
    iverCategory\x12%\n\x0edriver_version\x18\x06\x20\x01(\tR\rdriverVersion\
    \x12\x12\n\x04size\x18\x07\x20\x01(\x04R\x04size\x127\n\tlink_time\x18\
    \x08\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x08linkTime\x12\"\n\rp\
    np_device_id\x18\t\x20\x01(\tR\x0bpnpDeviceId\"\x8e\x03\n\x10LinuxDriver\
    Crash\x129\n\ncrash_time\x18\x01\x20\x01(\x0b2\x1a.google.protobuf.Times\
    tampR\tcrashTime\x12\x16\n\x06kernel\x18\x02\x20\x01(\tR\x06kernel\x12\
    \x1b\n\tdump_file\x18\x03\x20\x01(\tR\x08dumpFile\x122\n\x07up_time\x18\
    \x04\x20\x01(\x0b2\x19.google.protobuf.DurationR\x06upTime\x12!\n\x0cloa\
    d_average\x18\x05\x20\x01(\tR\x0bloadAverage\x12\x1f\n\x0btasks_count\
    \x18\x06\x20\x01(\rR\ntasksCount\x12\x14\n\x05panic\x18\x07\x20\x01(\tR\
    \x05panic\x12\x10\n\x03pid\x18\x08\x20\x01(\rR\x03pid\x12\x18\n\x07comma\
    nd\x18\t\x20\x01(\tR\x07command\x12\x12\n\x04task\x18\n\x20\x01(\tR\x04t\
    ask\x12&\n\x0fcpu_cores_count\x18\x0b\x20\x01(\rR\rcpuCoresCount\x12\x14\
    \n\x05state\x18\x0c\x20\x01(\tR\x05stateJ\xe3+\n\x07\x12\x05\0\0\x90\x02\
    \x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x1c\n\
    \t\n\x02\x03\0\x12\x03\x04\0)\n\t\n\x02\x03\x01\x12\x03\x05\0(\n\t\n\x02\
    \x03\x02\x12\x03\x06\0&\n\x93\x03\n\x02\x04\0\x12\x04\x14\0y\x01\x1a\x86\
    \x03*\r\n\x20Example\x20of\x20DRIVER\x20data\x20from\x20Linux\x20(with\
    \x20extra\x20headers):\r\n\x20<code>\r\n\x20\x20\x20\x20\x20>\x20lsmod\
    \x20|\x20sort\r\n\x20\x20\x20\x20\x20Module\x20Name\x20\x20\x20\x20\x20S\
    ize\x20\x20\x20\x20\x20\x20Used\x20By\r\n\x20\x20\x20\x20\x20===========\
    ====\x20========\x20\x20==========================================\r\n\
    \x20\x20\x20\x20\x20aesni_intel\x20\x20\x20\x20\x20\x20\x20372736\x20\
    \x202\r\n\x20\x20\x20\x20\x20ahci\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x2040960\x20\x201\r\n\x20\x20\x20\x20\x20ashmen_lin\
    ux\x20\x20\x20\x20\x20\x20\x2020480\x20\x200\r\n\x20\x20\x20\x20\x20blue\
    tooth\x20\x20\x20\x20\x20\x20\x20\x20\x20544768\x20\x2033\x20btrtl,btint\
    el,btbcm,bnep,btusb,rfcom\r\n\x20</code>\r\n\n\n\n\x03\x04\0\x01\x12\x03\
    \x14\x08\x0e\n\xb9\x02\n\x04\x04\0\x02\0\x12\x03\x1d\x04\x16\x1a\xab\x02\
    \x20\r\n\x20SW\x20State\r\n\x20\r\n\x20SW_STATE_INSTALLED\x20-\x20SW\x20\
    component\x20was\x20installed\x20/\x20first\x20detected\x20(populate\x20\
    all\x20data\x20fields)\r\n\x20SW_STATE_UNINSTALLED\x20-\x20SW\x20compone\
    nt\x20was\x20uninstalled\x20/\x20not\x20detected\x20anymore\x20(populate\
    \x20PKs\x20only)\r\n\x20SW_STATE_UPDATED\x20-\x20SW\x20component\x20was\
    \x20updated\x20/\x20upgraded\x20(populate\x20PKs\x20and\x20changed\x20fi\
    elds)\r\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x1d\x04\x0b\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\x1d\x0c\x11\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \x1d\x14\x15\n\x96\x01\n\x04\x04\0\x02\x01\x12\x03(\x04\x1b\x1a\x88\x01*\
    \r\n\x20Driver\x20Module\x20Name\x20(PRIMARY\x20KEY)\r\n\x20\r\n\x20Exam\
    ple:\x20ahci,\x20bluetooth,\x203ware,\x20ACPI\r\n\x20\r\n\x20Source:\r\n\
    \x20*\x20Windows:\x20driverquery\r\n\x20*\x20Linux:\x20lsmod\r\n\n\x0c\n\
    \x05\x04\0\x02\x01\x05\x12\x03(\x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\
    \x03(\x0b\x16\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03(\x19\x1a\n\x86\x01\n\
    \x04\x04\0\x02\x02\x12\x033\x04\x1c\x1ay*\r\n\x20Driver\x20Display\x20Na\
    me\r\n\x20\r\n\x20Example:\x203ware,\x20Microsoft\x20ACPI\x20Driver\r\n\
    \x20\r\n\x20Source:\r\n\x20*\x20Windows:\x20driverquery\r\n\x20*\x20Linu\
    x:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x033\x04\n\n\x0c\n\x05\
    \x04\0\x02\x02\x01\x12\x033\x0b\x17\n\x0c\n\x05\x04\0\x02\x02\x03\x12\
    \x033\x1a\x1b\n\x83\x01\n\x04\x04\0\x02\x03\x12\x03>\x04\x1b\x1av*\r\n\
    \x20Driver\x20Type\x20(PRIMARY\x20KEY)\r\n\x20\r\n\x20Example:\x20Kernel\
    ,\x20File\x20System\r\n\x20\r\n\x20Source:\r\n\x20*\x20Windows:\x20drive\
    rquery\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\
    \x03>\x04\n\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03>\x0b\x16\n\x0c\n\x05\
    \x04\0\x02\x03\x03\x12\x03>\x19\x1a\n\xaf\x01\n\x04\x04\0\x02\x04\x12\
    \x03I\x04\x1f\x1a\xa1\x01*\r\n\x20Driver\x20Category\r\n\x20\r\n\x20Exam\
    ple:\x20HID,\x20Battery,\x20ACPI\x20Thermal\x20Zone,\x20Bluetooth\r\n\
    \x20\r\n\x20Source:\r\n\x20*\x20Windows:\x20WMI\x20-\x20Win32_PnPSignedD\
    river\x20-\x20DeviceClass\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\
    \0\x02\x04\x05\x12\x03I\x04\n\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03I\x0b\
    \x1a\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03I\x1d\x1e\n\xa4\x01\n\x04\x04\
    \0\x02\x05\x12\x03T\x04\x1e\x1a\x96\x01*\r\n\x20Driver\x20Version\r\n\
    \x20\r\n\x20Example:\x2010.0.19041.789,\x2012.1.6003.5843\r\n\x20\r\n\
    \x20Source:\r\n\x20*\x20Windows:\x20WMI\x20-\x20Win32_PnPSignedDriver\
    \x20-\x20DriverVersion\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\
    \x02\x05\x05\x12\x03T\x04\n\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03T\x0b\
    \x19\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03T\x1c\x1d\ns\n\x04\x04\0\x02\
    \x06\x12\x03_\x04\x14\x1af*\r\n\x20Driver\x20Size\x20(in\x20Bytes)\r\n\
    \x20\r\n\x20Example:\x2040960,\x2020480\r\n\x20\r\n\x20Source:\r\n\x20*\
    \x20Windows:\x20TBD\r\n\x20*\x20Linux:\x20lsmod\r\n\n\x0c\n\x05\x04\0\
    \x02\x06\x05\x12\x03_\x04\n\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03_\x0b\
    \x0f\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03_\x12\x13\nz\n\x04\x04\0\x02\
    \x07\x12\x03j\x04,\x1am*\r\n\x20Driver\x20Link\x20Time\r\n\x20\r\n\x20Ex\
    ample:\x2027/10/2020\x2003:55:03\r\n\x20\r\n\x20Source:\r\n\x20*\x20Wind\
    ows:\x20driverquery\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\
    \x07\x06\x12\x03j\x04\x1d\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03j\x1e'\n\
    \x0c\n\x05\x04\0\x02\x07\x03\x12\x03j*+\n\xd3\x02\n\x04\x04\0\x02\x08\
    \x12\x03w\x04\x1d\x1a\xc5\x02*\r\n\x20Plug-n-Play\x20Device\x20Id\r\n\
    \x20\r\n\x20Example:\x20\r\n\x20\x20\x20SWD\\DRIVERENUM\\{CFABACAD-7939-\
    467C-96A7-93781D90D2D8}#WIRELESSBUTTONDRIVER_USERSVC&3&3229B8BB&0\r\n\
    \x20\x20\x20ACPI\\GENUINEINTEL_-_INTEL64_FAMILY_6_MODEL_140_-_11TH_GEN_I\
    NTEL(R)_CORE(TM)_I7-1185G7_@_3.00GHZ\\_7\r\n\x20\r\n\x20Source:\r\n\x20*\
    \x20Windows:\x20WMI\x20-\x20Win32_PnPSignedDriver\x20-\x20DeviceID\r\n\
    \x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\x08\x05\x12\x03w\x04\n\
    \n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03w\x0b\x18\n\x0c\n\x05\x04\0\x02\
    \x08\x03\x12\x03w\x1b\x1c\n\xec\x07\n\x02\x04\x01\x12\x06\x97\x01\0\x90\
    \x02\x01\x1a\xdd\x07*\r\n\x20Based\x20on:\x20<a\x20href=\"https://ubuntu\
    .com/server/docs/kernel-crash-dump\">https://ubuntu.com/server/docs/kern\
    el-crash-dump</a>\r\n\x20\r\n\x20Example\x20of\x20a\x20crash\x20dump\x20\
    (<a\x20href=\"https://www.dedoimedo.com/computers/crash-analyze.html\">h\
    ttps://www.dedoimedo.com/computers/crash-analyze.html</a>)\r\n\x20<code>\
    \r\n\x20\x20\x20\x20\x20\x20\x20KERNEL:\x20/usr/lib/debug/lib/modules/2.\
    6.18-164.10.1.el5.centos.plus/vmlinux\r\n\x20\x20\x20\x20\x20DUMPFILE:\
    \x20vmcore\r\n\x20\x20\x20\x20\x20\x20\x20\x20\x20CPUS:\x202\r\n\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20DATE:\x20Tue\x20Jan\x2019\x2020:21:19\x20201\
    0\r\n\x20\x20\x20\x20\x20\x20\x20UPTIME:\x2000:00:00\r\n\x20LOAD\x20AVER\
    AGE:\x200.00,\x200.04,\x200.07\r\n\x20\x20\x20\x20\x20\x20\x20\x20TASKS:\
    \x20134\r\n\x20\x20\x20\x20\x20NODENAME:\x20testhost2@localdomain\r\n\
    \x20\x20\x20\x20\x20\x20RELEASE:\x202.6.18-164.10.1.el5\r\n\x20\x20\x20\
    \x20\x20\x20VERSION:\x20#1\x20SMP\x20Thu\x20Jan\x207\x2019:54:26\x20EST\
    \x202010\r\n\x20\x20\x20\x20\x20\x20MACHINE:\x20x86_64\x20\x20(3000\x20M\
    hz)\r\n\x20\x20\x20\x20\x20\x20\x20MEMORY:\x207.5\x20GB\r\n\x20\x20\x20\
    \x20\x20\x20\x20\x20PANIC:\x20\"SysRq\x20:\x20Trigger\x20a\x20crashdump\
    \"\r\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20PID:\x200\r\n\x20\x20\x20\
    \x20\x20\x20COMMAND:\x20\"swapper\"\r\n\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20TASK:\x20ffffffff80300ae0\x20\x20(1\x20of\x202)\x20\x20[THREAD_INFO:\
    \x20ffffffff803f2000]\r\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20CPU:\
    \x200\r\n\x20\x20\x20\x20\x20\x20\x20\x20STATE:\x20TASK_RUNNING\x20(ACTI\
    VE)\x20\r\n\x20</code>\r\n\x20\r\n\x20Note:\x20This\x20is\x20under\x20co\
    nstruction.\r\n\n\x0b\n\x03\x04\x01\x01\x12\x04\x97\x01\x08\x18\n:\n\x04\
    \x04\x01\x02\0\x12\x04\x9f\x01\x04-\x1a,*\r\n\x20Crash\x20Time\r\n\x20\r\
    \n\x20Source:\r\n\x20*\x20Linux:\x20TBD\r\n\n\r\n\x05\x04\x01\x02\0\x06\
    \x12\x04\x9f\x01\x04\x1d\n\r\n\x05\x04\x01\x02\0\x01\x12\x04\x9f\x01\x1e\
    (\n\r\n\x05\x04\x01\x02\0\x03\x12\x04\x9f\x01+,\n\xa8\x01\n\x04\x04\x01\
    \x02\x01\x12\x04\xa9\x01\x04\x16\x1a\x99\x01*\r\n\x20Kernel\x20running\
    \x20at\x20the\x20time\x20of\x20the\x20crash\r\n\r\n\x20Example:\x20/usr/\
    lib/debug/lib/modules/2.6.18-164.10.1.el5.centos.plus/vmlinux\r\n\x20\r\
    \n\x20Source:\r\n\x20*\x20Linux:\x20TBD\r\n\n\r\n\x05\x04\x01\x02\x01\
    \x05\x12\x04\xa9\x01\x04\n\n\r\n\x05\x04\x01\x02\x01\x01\x12\x04\xa9\x01\
    \x0b\x11\n\r\n\x05\x04\x01\x02\x01\x03\x12\x04\xa9\x01\x14\x15\nn\n\x04\
    \x04\x01\x02\x02\x12\x04\xb3\x01\x04\x19\x1a`*\r\n\x20Dump\x20File\x20-\
    \x20name\x20of\x20the\x20dumped\x20memory\x20core\r\n\r\n\x20Example:\
    \x20vmcore\r\n\x20\r\n\x20Source:\r\n\x20*\x20Linux:\x20TBD\r\n\n\r\n\
    \x05\x04\x01\x02\x02\x05\x12\x04\xb3\x01\x04\n\n\r\n\x05\x04\x01\x02\x02\
    \x01\x12\x04\xb3\x01\x0b\x14\n\r\n\x05\x04\x01\x02\x02\x03\x12\x04\xb3\
    \x01\x17\x18\nR\n\x04\x04\x01\x02\x03\x12\x04\xbb\x01\x04)\x1aD*\r\n\x20\
    OS\x20Up\x20Time\x20at\x20the\x20time\x20of\x20the\x20crash\r\n\r\n\x20S\
    ource:\r\n\x20*\x20Linux:\x20TBD\r\n\n\r\n\x05\x04\x01\x02\x03\x06\x12\
    \x04\xbb\x01\x04\x1c\n\r\n\x05\x04\x01\x02\x03\x01\x12\x04\xbb\x01\x1d$\
    \n\r\n\x05\x04\x01\x02\x03\x03\x12\x04\xbb\x01'(\ns\n\x04\x04\x01\x02\
    \x04\x12\x04\xc5\x01\x04\x1c\x1ae*\r\n\x20Average\x20Load\x20at\x20the\
    \x20time\x20of\x20the\x20crash\r\n\r\n\x20Example:\x200.00,\x200.04,\x20\
    0.07\r\n\x20\r\n\x20Source:\r\n\x20*\x20Linux:\x20TBD\r\n\n\r\n\x05\x04\
    \x01\x02\x04\x05\x12\x04\xc5\x01\x04\n\n\r\n\x05\x04\x01\x02\x04\x01\x12\
    \x04\xc5\x01\x0b\x17\n\r\n\x05\x04\x01\x02\x04\x03\x12\x04\xc5\x01\x1a\
    \x1b\nv\n\x04\x04\x01\x02\x05\x12\x04\xcf\x01\x04\x1b\x1ah*\r\n\x20Count\
    \x20of\x20Tasks\x20in\x20the\x20memory\x20at\x20the\x20time\x20of\x20the\
    \x20crash\r\n\r\n\x20Example:\x20134\r\n\x20\r\n\x20Source:\r\n\x20*\x20\
    Linux:\x20TBD\r\n\n\r\n\x05\x04\x01\x02\x05\x05\x12\x04\xcf\x01\x04\n\n\
    \r\n\x05\x04\x01\x02\x05\x01\x12\x04\xcf\x01\x0b\x16\n\r\n\x05\x04\x01\
    \x02\x05\x03\x12\x04\xcf\x01\x19\x1a\n\x8d\x01\n\x04\x04\x01\x02\x06\x12\
    \x04\xda\x01\x04\x15\x1a\x7f*\r\n\x20Panic\x20\r\n\x20Specifies\x20what\
    \x20kind\x20of\x20crash\x20occurred\x20on\x20the\x20machine\r\n\r\n\x20E\
    xample:\x20SysRq,\x20Oops,\x20Panic\r\n\x20\r\n\x20Source:\r\n\x20*\x20L\
    inux:\x20TBD\r\n\n\r\n\x05\x04\x01\x02\x06\x05\x12\x04\xda\x01\x04\n\n\r\
    \n\x05\x04\x01\x02\x06\x01\x12\x04\xda\x01\x0b\x10\n\r\n\x05\x04\x01\x02\
    \x06\x03\x12\x04\xda\x01\x13\x14\n\x81\x01\n\x04\x04\x01\x02\x07\x12\x04\
    \xe4\x01\x04\x13\x1as*\r\n\x20Process\x20Id\x20that\x20caused\x20the\x20\
    crash\r\n\r\n\x20Example:\x201902,\x200\x20(this\x20one\x20is\x20the\x20\
    scheduler)\r\n\x20\r\n\x20Source:\r\n\x20*\x20Linux:\x20TBD\r\n\n\r\n\
    \x05\x04\x01\x02\x07\x05\x12\x04\xe4\x01\x04\n\n\r\n\x05\x04\x01\x02\x07\
    \x01\x12\x04\xe4\x01\x0b\x0e\n\r\n\x05\x04\x01\x02\x07\x03\x12\x04\xe4\
    \x01\x11\x12\nn\n\x04\x04\x01\x02\x08\x12\x04\xee\x01\x04\x17\x1a`*\r\n\
    \x20Name\x20of\x20the\x20process\x20that\x20caused\x20the\x20crash\r\n\r\
    \n\x20Example:\x20swapper\r\n\x20\r\n\x20Source:\r\n\x20*\x20Linux:\x20T\
    BD\r\n\n\r\n\x05\x04\x01\x02\x08\x05\x12\x04\xee\x01\x04\n\n\r\n\x05\x04\
    \x01\x02\x08\x01\x12\x04\xee\x01\x0b\x12\n\r\n\x05\x04\x01\x02\x08\x03\
    \x12\x04\xee\x01\x15\x16\n\xac\x01\n\x04\x04\x01\x02\t\x12\x04\xf9\x01\
    \x04\x15\x1a\x9d\x01*\r\n\x20Task\r\n\x20Address\x20in\x20memory\x20for\
    \x20the\x20offending\x20process\r\n\r\n\x20Example:\x20ffffffff80300ae0\
    \x20\x20(1\x20of\x202)\x20\x20[THREAD_INFO:\x20ffffffff803f2000]\r\n\x20\
    \r\n\x20Source:\r\n\x20*\x20Linux:\x20TBD\r\n\n\r\n\x05\x04\x01\x02\t\
    \x05\x12\x04\xf9\x01\x04\n\n\r\n\x05\x04\x01\x02\t\x01\x12\x04\xf9\x01\
    \x0b\x0f\n\r\n\x05\x04\x01\x02\t\x03\x12\x04\xf9\x01\x12\x14\n\xb3\x01\n\
    \x04\x04\x01\x02\n\x12\x04\x84\x02\x04\x20\x1a\xa4\x01*\r\n\x20CPU\x20Co\
    res\x20Count\x20\r\n\x20It\x20is\x20the\x20number\x20of\x20the\x20CPU\
    \x20where\x20the\x20offending\x20process\x20was\x20running\x20at\x20the\
    \x20time\x20of\x20the\x20crash.\r\n\r\n\x20Example:\x201,\x202\r\n\x20\r\
    \n\x20Source:\r\n\x20*\x20Linux:\x20TBD\r\n\n\r\n\x05\x04\x01\x02\n\x05\
    \x12\x04\x84\x02\x04\n\n\r\n\x05\x04\x01\x02\n\x01\x12\x04\x84\x02\x0b\
    \x1a\n\r\n\x05\x04\x01\x02\n\x03\x12\x04\x84\x02\x1d\x1f\nj\n\x04\x04\
    \x01\x02\x0b\x12\x04\x8f\x02\x04\x16\x1a\\*\r\n\x20State\r\n\x20Process\
    \x20State\x20at\x20the\x20time\x20of\x20the\x20crash\r\n\r\n\x20Example\
    \r\n\x20\r\n\x20Source:\r\n\x20*\x20Linux:\x20TBD\r\n\n\r\n\x05\x04\x01\
    \x02\x0b\x05\x12\x04\x8f\x02\x04\n\n\r\n\x05\x04\x01\x02\x0b\x01\x12\x04\
    \x8f\x02\x0b\x10\n\r\n\x05\x04\x01\x02\x0b\x03\x12\x04\x8f\x02\x13\x15b\
    \x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
