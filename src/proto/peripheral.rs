// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `hp/xy/sunrise_v1/hw/peripheral.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct PeripheralUSBTypeA {
    // message fields
    pub state: super::state::HWState,
    pub time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub usb_bus_id: u32,
    pub usb_device_id: ::std::string::String,
    pub manufacturer_id: ::std::string::String,
    pub product_id: ::std::string::String,
    pub device_version: ::std::string::String,
    pub manufacturer: ::std::string::String,
    pub product: ::std::string::String,
    pub message: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PeripheralUSBTypeA {
    fn default() -> &'a PeripheralUSBTypeA {
        <PeripheralUSBTypeA as ::protobuf::Message>::default_instance()
    }
}

impl PeripheralUSBTypeA {
    pub fn new() -> PeripheralUSBTypeA {
        ::std::default::Default::default()
    }

    // .hp.xy.sunrise_v1.HWState state = 1;


    pub fn get_state(&self) -> super::state::HWState {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = super::state::HWState::HW_STATE_SAME;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: super::state::HWState) {
        self.state = v;
    }

    // .google.protobuf.Timestamp time = 2;


    pub fn get_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.time.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_time(&mut self) {
        self.time.clear();
    }

    pub fn has_time(&self) -> bool {
        self.time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.time.is_none() {
            self.time.set_default();
        }
        self.time.as_mut().unwrap()
    }

    // Take field
    pub fn take_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // uint32 usb_bus_id = 3;


    pub fn get_usb_bus_id(&self) -> u32 {
        self.usb_bus_id
    }
    pub fn clear_usb_bus_id(&mut self) {
        self.usb_bus_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_usb_bus_id(&mut self, v: u32) {
        self.usb_bus_id = v;
    }

    // string usb_device_id = 4;


    pub fn get_usb_device_id(&self) -> &str {
        &self.usb_device_id
    }
    pub fn clear_usb_device_id(&mut self) {
        self.usb_device_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_usb_device_id(&mut self, v: ::std::string::String) {
        self.usb_device_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_usb_device_id(&mut self) -> &mut ::std::string::String {
        &mut self.usb_device_id
    }

    // Take field
    pub fn take_usb_device_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.usb_device_id, ::std::string::String::new())
    }

    // string manufacturer_id = 5;


    pub fn get_manufacturer_id(&self) -> &str {
        &self.manufacturer_id
    }
    pub fn clear_manufacturer_id(&mut self) {
        self.manufacturer_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_manufacturer_id(&mut self, v: ::std::string::String) {
        self.manufacturer_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_manufacturer_id(&mut self) -> &mut ::std::string::String {
        &mut self.manufacturer_id
    }

    // Take field
    pub fn take_manufacturer_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.manufacturer_id, ::std::string::String::new())
    }

    // string product_id = 6;


    pub fn get_product_id(&self) -> &str {
        &self.product_id
    }
    pub fn clear_product_id(&mut self) {
        self.product_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_product_id(&mut self, v: ::std::string::String) {
        self.product_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_product_id(&mut self) -> &mut ::std::string::String {
        &mut self.product_id
    }

    // Take field
    pub fn take_product_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.product_id, ::std::string::String::new())
    }

    // string device_version = 7;


    pub fn get_device_version(&self) -> &str {
        &self.device_version
    }
    pub fn clear_device_version(&mut self) {
        self.device_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_device_version(&mut self, v: ::std::string::String) {
        self.device_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_version(&mut self) -> &mut ::std::string::String {
        &mut self.device_version
    }

    // Take field
    pub fn take_device_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.device_version, ::std::string::String::new())
    }

    // string manufacturer = 8;


    pub fn get_manufacturer(&self) -> &str {
        &self.manufacturer
    }
    pub fn clear_manufacturer(&mut self) {
        self.manufacturer.clear();
    }

    // Param is passed by value, moved
    pub fn set_manufacturer(&mut self, v: ::std::string::String) {
        self.manufacturer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_manufacturer(&mut self) -> &mut ::std::string::String {
        &mut self.manufacturer
    }

    // Take field
    pub fn take_manufacturer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.manufacturer, ::std::string::String::new())
    }

    // string product = 9;


    pub fn get_product(&self) -> &str {
        &self.product
    }
    pub fn clear_product(&mut self) {
        self.product.clear();
    }

    // Param is passed by value, moved
    pub fn set_product(&mut self, v: ::std::string::String) {
        self.product = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_product(&mut self) -> &mut ::std::string::String {
        &mut self.product
    }

    // Take field
    pub fn take_product(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.product, ::std::string::String::new())
    }

    // string message = 10;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }
}

impl ::protobuf::Message for PeripheralUSBTypeA {
    fn is_initialized(&self) -> bool {
        for v in &self.time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.time)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.usb_bus_id = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.usb_device_id)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.manufacturer_id)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.product_id)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.device_version)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.manufacturer)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.product)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.state != super::state::HWState::HW_STATE_SAME {
            my_size += ::protobuf::rt::enum_size(1, self.state);
        }
        if let Some(ref v) = self.time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.usb_bus_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.usb_bus_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.usb_device_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.usb_device_id);
        }
        if !self.manufacturer_id.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.manufacturer_id);
        }
        if !self.product_id.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.product_id);
        }
        if !self.device_version.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.device_version);
        }
        if !self.manufacturer.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.manufacturer);
        }
        if !self.product.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.product);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.state != super::state::HWState::HW_STATE_SAME {
            os.write_enum(1, self.state.value())?;
        }
        if let Some(ref v) = self.time.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.usb_bus_id != 0 {
            os.write_uint32(3, self.usb_bus_id)?;
        }
        if !self.usb_device_id.is_empty() {
            os.write_string(4, &self.usb_device_id)?;
        }
        if !self.manufacturer_id.is_empty() {
            os.write_string(5, &self.manufacturer_id)?;
        }
        if !self.product_id.is_empty() {
            os.write_string(6, &self.product_id)?;
        }
        if !self.device_version.is_empty() {
            os.write_string(7, &self.device_version)?;
        }
        if !self.manufacturer.is_empty() {
            os.write_string(8, &self.manufacturer)?;
        }
        if !self.product.is_empty() {
            os.write_string(9, &self.product)?;
        }
        if !self.message.is_empty() {
            os.write_string(10, &self.message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PeripheralUSBTypeA {
        PeripheralUSBTypeA::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::state::HWState>>(
                    "state",
                    |m: &PeripheralUSBTypeA| { &m.state },
                    |m: &mut PeripheralUSBTypeA| { &mut m.state },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "time",
                    |m: &PeripheralUSBTypeA| { &m.time },
                    |m: &mut PeripheralUSBTypeA| { &mut m.time },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "usb_bus_id",
                    |m: &PeripheralUSBTypeA| { &m.usb_bus_id },
                    |m: &mut PeripheralUSBTypeA| { &mut m.usb_bus_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "usb_device_id",
                    |m: &PeripheralUSBTypeA| { &m.usb_device_id },
                    |m: &mut PeripheralUSBTypeA| { &mut m.usb_device_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "manufacturer_id",
                    |m: &PeripheralUSBTypeA| { &m.manufacturer_id },
                    |m: &mut PeripheralUSBTypeA| { &mut m.manufacturer_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "product_id",
                    |m: &PeripheralUSBTypeA| { &m.product_id },
                    |m: &mut PeripheralUSBTypeA| { &mut m.product_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "device_version",
                    |m: &PeripheralUSBTypeA| { &m.device_version },
                    |m: &mut PeripheralUSBTypeA| { &mut m.device_version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "manufacturer",
                    |m: &PeripheralUSBTypeA| { &m.manufacturer },
                    |m: &mut PeripheralUSBTypeA| { &mut m.manufacturer },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "product",
                    |m: &PeripheralUSBTypeA| { &m.product },
                    |m: &mut PeripheralUSBTypeA| { &mut m.product },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "message",
                    |m: &PeripheralUSBTypeA| { &m.message },
                    |m: &mut PeripheralUSBTypeA| { &mut m.message },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PeripheralUSBTypeA>(
                    "PeripheralUSBTypeA",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PeripheralUSBTypeA {
        static mut instance: ::protobuf::lazy::Lazy<PeripheralUSBTypeA> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PeripheralUSBTypeA,
        };
        unsafe {
            instance.get(PeripheralUSBTypeA::new)
        }
    }
}

impl ::protobuf::Clear for PeripheralUSBTypeA {
    fn clear(&mut self) {
        self.state = super::state::HWState::HW_STATE_SAME;
        self.time.clear();
        self.usb_bus_id = 0;
        self.usb_device_id.clear();
        self.manufacturer_id.clear();
        self.product_id.clear();
        self.device_version.clear();
        self.manufacturer.clear();
        self.product.clear();
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PeripheralUSBTypeA {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PeripheralUSBTypeA {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PeripheralUSBTypeCSuperSpeed {
    // message fields
    pub state: super::state::HWState,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PeripheralUSBTypeCSuperSpeed {
    fn default() -> &'a PeripheralUSBTypeCSuperSpeed {
        <PeripheralUSBTypeCSuperSpeed as ::protobuf::Message>::default_instance()
    }
}

impl PeripheralUSBTypeCSuperSpeed {
    pub fn new() -> PeripheralUSBTypeCSuperSpeed {
        ::std::default::Default::default()
    }

    // .hp.xy.sunrise_v1.HWState state = 1;


    pub fn get_state(&self) -> super::state::HWState {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = super::state::HWState::HW_STATE_SAME;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: super::state::HWState) {
        self.state = v;
    }
}

impl ::protobuf::Message for PeripheralUSBTypeCSuperSpeed {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.state != super::state::HWState::HW_STATE_SAME {
            my_size += ::protobuf::rt::enum_size(1, self.state);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.state != super::state::HWState::HW_STATE_SAME {
            os.write_enum(1, self.state.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PeripheralUSBTypeCSuperSpeed {
        PeripheralUSBTypeCSuperSpeed::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::state::HWState>>(
                    "state",
                    |m: &PeripheralUSBTypeCSuperSpeed| { &m.state },
                    |m: &mut PeripheralUSBTypeCSuperSpeed| { &mut m.state },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PeripheralUSBTypeCSuperSpeed>(
                    "PeripheralUSBTypeCSuperSpeed",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PeripheralUSBTypeCSuperSpeed {
        static mut instance: ::protobuf::lazy::Lazy<PeripheralUSBTypeCSuperSpeed> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PeripheralUSBTypeCSuperSpeed,
        };
        unsafe {
            instance.get(PeripheralUSBTypeCSuperSpeed::new)
        }
    }
}

impl ::protobuf::Clear for PeripheralUSBTypeCSuperSpeed {
    fn clear(&mut self) {
        self.state = super::state::HWState::HW_STATE_SAME;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PeripheralUSBTypeCSuperSpeed {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PeripheralUSBTypeCSuperSpeed {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PeripheralUSBTypeCDisplayPort {
    // message fields
    pub state: super::state::HWState,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PeripheralUSBTypeCDisplayPort {
    fn default() -> &'a PeripheralUSBTypeCDisplayPort {
        <PeripheralUSBTypeCDisplayPort as ::protobuf::Message>::default_instance()
    }
}

impl PeripheralUSBTypeCDisplayPort {
    pub fn new() -> PeripheralUSBTypeCDisplayPort {
        ::std::default::Default::default()
    }

    // .hp.xy.sunrise_v1.HWState state = 1;


    pub fn get_state(&self) -> super::state::HWState {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = super::state::HWState::HW_STATE_SAME;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: super::state::HWState) {
        self.state = v;
    }
}

impl ::protobuf::Message for PeripheralUSBTypeCDisplayPort {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.state != super::state::HWState::HW_STATE_SAME {
            my_size += ::protobuf::rt::enum_size(1, self.state);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.state != super::state::HWState::HW_STATE_SAME {
            os.write_enum(1, self.state.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PeripheralUSBTypeCDisplayPort {
        PeripheralUSBTypeCDisplayPort::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::state::HWState>>(
                    "state",
                    |m: &PeripheralUSBTypeCDisplayPort| { &m.state },
                    |m: &mut PeripheralUSBTypeCDisplayPort| { &mut m.state },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PeripheralUSBTypeCDisplayPort>(
                    "PeripheralUSBTypeCDisplayPort",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PeripheralUSBTypeCDisplayPort {
        static mut instance: ::protobuf::lazy::Lazy<PeripheralUSBTypeCDisplayPort> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PeripheralUSBTypeCDisplayPort,
        };
        unsafe {
            instance.get(PeripheralUSBTypeCDisplayPort::new)
        }
    }
}

impl ::protobuf::Clear for PeripheralUSBTypeCDisplayPort {
    fn clear(&mut self) {
        self.state = super::state::HWState::HW_STATE_SAME;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PeripheralUSBTypeCDisplayPort {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PeripheralUSBTypeCDisplayPort {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PeripheralAudioPort {
    // message fields
    pub state: super::state::HWState,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PeripheralAudioPort {
    fn default() -> &'a PeripheralAudioPort {
        <PeripheralAudioPort as ::protobuf::Message>::default_instance()
    }
}

impl PeripheralAudioPort {
    pub fn new() -> PeripheralAudioPort {
        ::std::default::Default::default()
    }

    // .hp.xy.sunrise_v1.HWState state = 1;


    pub fn get_state(&self) -> super::state::HWState {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = super::state::HWState::HW_STATE_SAME;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: super::state::HWState) {
        self.state = v;
    }
}

impl ::protobuf::Message for PeripheralAudioPort {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.state != super::state::HWState::HW_STATE_SAME {
            my_size += ::protobuf::rt::enum_size(1, self.state);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.state != super::state::HWState::HW_STATE_SAME {
            os.write_enum(1, self.state.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PeripheralAudioPort {
        PeripheralAudioPort::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::state::HWState>>(
                    "state",
                    |m: &PeripheralAudioPort| { &m.state },
                    |m: &mut PeripheralAudioPort| { &mut m.state },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PeripheralAudioPort>(
                    "PeripheralAudioPort",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PeripheralAudioPort {
        static mut instance: ::protobuf::lazy::Lazy<PeripheralAudioPort> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PeripheralAudioPort,
        };
        unsafe {
            instance.get(PeripheralAudioPort::new)
        }
    }
}

impl ::protobuf::Clear for PeripheralAudioPort {
    fn clear(&mut self) {
        self.state = super::state::HWState::HW_STATE_SAME;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PeripheralAudioPort {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PeripheralAudioPort {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PeripheralHDMI {
    // message fields
    pub state: super::state::HWState,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PeripheralHDMI {
    fn default() -> &'a PeripheralHDMI {
        <PeripheralHDMI as ::protobuf::Message>::default_instance()
    }
}

impl PeripheralHDMI {
    pub fn new() -> PeripheralHDMI {
        ::std::default::Default::default()
    }

    // .hp.xy.sunrise_v1.HWState state = 1;


    pub fn get_state(&self) -> super::state::HWState {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = super::state::HWState::HW_STATE_SAME;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: super::state::HWState) {
        self.state = v;
    }
}

impl ::protobuf::Message for PeripheralHDMI {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.state != super::state::HWState::HW_STATE_SAME {
            my_size += ::protobuf::rt::enum_size(1, self.state);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.state != super::state::HWState::HW_STATE_SAME {
            os.write_enum(1, self.state.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PeripheralHDMI {
        PeripheralHDMI::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::state::HWState>>(
                    "state",
                    |m: &PeripheralHDMI| { &m.state },
                    |m: &mut PeripheralHDMI| { &mut m.state },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PeripheralHDMI>(
                    "PeripheralHDMI",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PeripheralHDMI {
        static mut instance: ::protobuf::lazy::Lazy<PeripheralHDMI> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PeripheralHDMI,
        };
        unsafe {
            instance.get(PeripheralHDMI::new)
        }
    }
}

impl ::protobuf::Clear for PeripheralHDMI {
    fn clear(&mut self) {
        self.state = super::state::HWState::HW_STATE_SAME;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PeripheralHDMI {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PeripheralHDMI {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PeripheralSIMCard {
    // message fields
    pub state: super::state::HWState,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PeripheralSIMCard {
    fn default() -> &'a PeripheralSIMCard {
        <PeripheralSIMCard as ::protobuf::Message>::default_instance()
    }
}

impl PeripheralSIMCard {
    pub fn new() -> PeripheralSIMCard {
        ::std::default::Default::default()
    }

    // .hp.xy.sunrise_v1.HWState state = 1;


    pub fn get_state(&self) -> super::state::HWState {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = super::state::HWState::HW_STATE_SAME;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: super::state::HWState) {
        self.state = v;
    }
}

impl ::protobuf::Message for PeripheralSIMCard {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.state != super::state::HWState::HW_STATE_SAME {
            my_size += ::protobuf::rt::enum_size(1, self.state);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.state != super::state::HWState::HW_STATE_SAME {
            os.write_enum(1, self.state.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PeripheralSIMCard {
        PeripheralSIMCard::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::state::HWState>>(
                    "state",
                    |m: &PeripheralSIMCard| { &m.state },
                    |m: &mut PeripheralSIMCard| { &mut m.state },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PeripheralSIMCard>(
                    "PeripheralSIMCard",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PeripheralSIMCard {
        static mut instance: ::protobuf::lazy::Lazy<PeripheralSIMCard> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PeripheralSIMCard,
        };
        unsafe {
            instance.get(PeripheralSIMCard::new)
        }
    }
}

impl ::protobuf::Clear for PeripheralSIMCard {
    fn clear(&mut self) {
        self.state = super::state::HWState::HW_STATE_SAME;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PeripheralSIMCard {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PeripheralSIMCard {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$hp/xy/sunrise_v1/hw/peripheral.proto\x12\x13hp.xy.sunrise_v1.hw\x1a\
    \x1fgoogle/protobuf/timestamp.proto\x1a\x1chp/xy/sunrise_v1/state.proto\
    \"\xfe\x02\n\x12PeripheralUSBTypeA\x12/\n\x05state\x18\x01\x20\x01(\x0e2\
    \x19.hp.xy.sunrise_v1.HWStateR\x05state\x12.\n\x04time\x18\x02\x20\x01(\
    \x0b2\x1a.google.protobuf.TimestampR\x04time\x12\x1c\n\nusb_bus_id\x18\
    \x03\x20\x01(\rR\x08usbBusId\x12\"\n\rusb_device_id\x18\x04\x20\x01(\tR\
    \x0busbDeviceId\x12'\n\x0fmanufacturer_id\x18\x05\x20\x01(\tR\x0emanufac\
    turerId\x12\x1d\n\nproduct_id\x18\x06\x20\x01(\tR\tproductId\x12%\n\x0ed\
    evice_version\x18\x07\x20\x01(\tR\rdeviceVersion\x12\"\n\x0cmanufacturer\
    \x18\x08\x20\x01(\tR\x0cmanufacturer\x12\x18\n\x07product\x18\t\x20\x01(\
    \tR\x07product\x12\x18\n\x07message\x18\n\x20\x01(\tR\x07message\"O\n\
    \x1cPeripheralUSBTypeCSuperSpeed\x12/\n\x05state\x18\x01\x20\x01(\x0e2\
    \x19.hp.xy.sunrise_v1.HWStateR\x05state\"P\n\x1dPeripheralUSBTypeCDispla\
    yPort\x12/\n\x05state\x18\x01\x20\x01(\x0e2\x19.hp.xy.sunrise_v1.HWState\
    R\x05state\"F\n\x13PeripheralAudioPort\x12/\n\x05state\x18\x01\x20\x01(\
    \x0e2\x19.hp.xy.sunrise_v1.HWStateR\x05state\"A\n\x0ePeripheralHDMI\x12/\
    \n\x05state\x18\x01\x20\x01(\x0e2\x19.hp.xy.sunrise_v1.HWStateR\x05state\
    \"D\n\x11PeripheralSIMCard\x12/\n\x05state\x18\x01\x20\x01(\x0e2\x19.hp.\
    xy.sunrise_v1.HWStateR\x05stateJ\x8e\x1c\n\x07\x12\x05\0\0\x8d\x01\x01\n\
    \x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x1c\n\t\n\
    \x02\x03\0\x12\x03\x04\0)\n\t\n\x02\x03\x01\x12\x03\x05\0&\n\x82\x02\n\
    \x02\x04\0\x12\x04\r\0G\x01\x1a\xf5\x01*\n\x20PeripheralUSBTypeA\x20is\
    \x20any\x20gadget\x20that\x20is\x20plugged/unplugged\x20from\x20one\x20o\
    f\x20the\x20USB\x20type\x20A\x20ports\n\x20Including:\x20External\x20Mic\
    ,\x20External\x20Camera,\x20USB\x20Flash\x20Drive,\x20etc.\n\x20\n\x20Li\
    nux\x20source\x20will\x20be\x20a\x20combination\x20of\x20dmesg,\x20/proc\
    /kmesg,\x20journalctl,\x20udev,\x20lsusb\n\n\n\n\x03\x04\0\x01\x12\x03\r\
    \x08\x1a\n\x9b\x02\n\x04\x04\0\x02\0\x12\x03\x15\x04\x16\x1a\x8d\x02*\n\
    \x20HW\x20State\n\x20\n\x20HW_STATE_ADDED\x20-\x20The\x20HW\x20component\
    \x20was\x20added\x20or\x20first\x20detected\x20(all\x20data\x20fields\
    \x20are\x20populated)\n\x20HW_STATE_REMOVED\x20-\x20The\x20HW\x20compone\
    nt\x20was\x20removed\x20or\x20not\x20detected\x20anymore\x20(If\x20there\
    \x20are\x20Primary\x20Keys\x20defined\x20send\x20them\x20only,\x20otherw\
    ise\x20populate\x20all\x20data\x20fields)\n\n\x0c\n\x05\x04\0\x02\0\x06\
    \x12\x03\x15\x04\x0b\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x15\x0c\x11\n\
    \x0c\n\x05\x04\0\x02\0\x03\x12\x03\x15\x14\x15\n\"\n\x04\x04\0\x02\x01\
    \x12\x03\x1a\x04'\x1a\x15*\n\x20Time\x20of\x20the\x20event\n\n\x0c\n\x05\
    \x04\0\x02\x01\x06\x12\x03\x1a\x04\x1d\n\x0c\n\x05\x04\0\x02\x01\x01\x12\
    \x03\x1a\x1e\"\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x1a%&\n\x1b\n\x04\
    \x04\0\x02\x02\x12\x03\x1f\x04\x1a\x1a\x0e*\n\x20USB\x20Bus\x20Id\n\n\
    \x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x1f\x04\n\n\x0c\n\x05\x04\0\x02\x02\
    \x01\x12\x03\x1f\x0b\x15\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x1f\x18\
    \x19\n\x1e\n\x04\x04\0\x02\x03\x12\x03$\x04\x1d\x1a\x11*\n\x20USB\x20Dev\
    ice\x20Id\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03$\x04\n\n\x0c\n\x05\x04\
    \0\x02\x03\x01\x12\x03$\x0b\x18\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03$\
    \x1b\x1c\n\x20\n\x04\x04\0\x02\x04\x12\x03)\x04\x1f\x1a\x13*\n\x20Manufa\
    cturer\x20Id\n\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03)\x04\n\n\x0c\n\x05\
    \x04\0\x02\x04\x01\x12\x03)\x0b\x1a\n\x0c\n\x05\x04\0\x02\x04\x03\x12\
    \x03)\x1d\x1e\n\x1a\n\x04\x04\0\x02\x05\x12\x03.\x04\x1a\x1a\r*\n\x20Dev\
    ice\x20Id\n\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03.\x04\n\n\x0c\n\x05\x04\
    \0\x02\x05\x01\x12\x03.\x0b\x15\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03.\
    \x18\x19\n\x1f\n\x04\x04\0\x02\x06\x12\x033\x04\x1e\x1a\x12*\n\x20Device\
    \x20Version\n\n\x0c\n\x05\x04\0\x02\x06\x05\x12\x033\x04\n\n\x0c\n\x05\
    \x04\0\x02\x06\x01\x12\x033\x0b\x19\n\x0c\n\x05\x04\0\x02\x06\x03\x12\
    \x033\x1c\x1d\n\"\n\x04\x04\0\x02\x07\x12\x038\x04\x1c\x1a\x15*\n\x20Man\
    ufacturer\x20name\n\n\x0c\n\x05\x04\0\x02\x07\x05\x12\x038\x04\n\n\x0c\n\
    \x05\x04\0\x02\x07\x01\x12\x038\x0b\x17\n\x0c\n\x05\x04\0\x02\x07\x03\
    \x12\x038\x1a\x1b\n\x1d\n\x04\x04\0\x02\x08\x12\x03=\x04\x17\x1a\x10*\n\
    \x20Product\x20name\n\n\x0c\n\x05\x04\0\x02\x08\x05\x12\x03=\x04\n\n\x0c\
    \n\x05\x04\0\x02\x08\x01\x12\x03=\x0b\x12\n\x0c\n\x05\x04\0\x02\x08\x03\
    \x12\x03=\x15\x16\n\xcd\x02\n\x04\x04\0\x02\t\x12\x03F\x04\x18\x1a\xbf\
    \x02*\n\x20Any\x20extra\x20Warning\x20or\x20Critical\x20messages\x20show\
    n\x20in\x20the\x20log\n\x20\n\x20Example:\x20[multi-line\x20message\x20e\
    xtracted\x20from\x20dmesg\x20-Hw\x20after\x20adding\x20a\x20headset:\x20\
    Jabra\x20UC\x20VOICE\x20750a\x20MS]\n\x20\x20\x20usb\x203-2:\x20Warning!\
    \x20Unlikely\x20big\x20volume\x20range\x20(=4096),\x20cval->res\x20is\
    \x20probably\x20wrong.\n\x20\x20\x20usb\x203-2:\x20[11]\x20FU\x20[Sideto\
    ne\x20Playback\x20Volume]\x20ch\x20=\x201,\x20val\x20=\x200/4096/1\n\n\
    \x0c\n\x05\x04\0\x02\t\x05\x12\x03F\x04\n\n\x0c\n\x05\x04\0\x02\t\x01\
    \x12\x03F\x0b\x12\n\x0c\n\x05\x04\0\x02\t\x03\x12\x03F\x15\x17\nD\n\x02\
    \x04\x01\x12\x04L\0T\x01\x1a8*\n\x20Peripheral\x20USB\x20Type-C\x20used\
    \x20in\x20SuperSpeed\x20mode\x20-\x20TODO\n\n\n\n\x03\x04\x01\x01\x12\
    \x03L\x08$\n\x9b\x02\n\x04\x04\x01\x02\0\x12\x03S\x04\x16\x1a\x8d\x02*\n\
    \x20HW\x20State\n\x20\n\x20HW_STATE_ADDED\x20-\x20The\x20HW\x20component\
    \x20was\x20added\x20or\x20first\x20detected\x20(all\x20data\x20fields\
    \x20are\x20populated)\n\x20HW_STATE_REMOVED\x20-\x20The\x20HW\x20compone\
    nt\x20was\x20removed\x20or\x20not\x20detected\x20anymore\x20(If\x20there\
    \x20are\x20Primary\x20Keys\x20defined\x20send\x20them\x20only,\x20otherw\
    ise\x20populate\x20all\x20data\x20fields)\n\n\x0c\n\x05\x04\x01\x02\0\
    \x06\x12\x03S\x04\x0b\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03S\x0c\x11\n\
    \x0c\n\x05\x04\x01\x02\0\x03\x12\x03S\x14\x15\nE\n\x02\x04\x02\x12\x04Y\
    \0b\x01\x1a9*\n\x20Peripheral\x20USB\x20Type-C\x20used\x20in\x20DisplayP\
    ort\x20mode\x20-\x20TODO\n\n\n\n\x03\x04\x02\x01\x12\x03Y\x08%\n\x9b\x02\
    \n\x04\x04\x02\x02\0\x12\x03a\x04\x16\x1a\x8d\x02*\n\x20HW\x20State\n\
    \x20\n\x20HW_STATE_ADDED\x20-\x20The\x20HW\x20component\x20was\x20added\
    \x20or\x20first\x20detected\x20(all\x20data\x20fields\x20are\x20populate\
    d)\n\x20HW_STATE_REMOVED\x20-\x20The\x20HW\x20component\x20was\x20remove\
    d\x20or\x20not\x20detected\x20anymore\x20(If\x20there\x20are\x20Primary\
    \x20Keys\x20defined\x20send\x20them\x20only,\x20otherwise\x20populate\
    \x20all\x20data\x20fields)\n\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03a\x04\
    \x0b\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03a\x0c\x11\n\x0c\n\x05\x04\x02\
    \x02\0\x03\x12\x03a\x14\x15\n*\n\x02\x04\x03\x12\x04g\0p\x01\x1a\x1e*\n\
    \x20PeripheralAudioPort\x20-\x20TODO\n\n\n\n\x03\x04\x03\x01\x12\x03g\
    \x08\x1b\n\x9b\x02\n\x04\x04\x03\x02\0\x12\x03o\x04\x16\x1a\x8d\x02*\n\
    \x20HW\x20State\n\x20\n\x20HW_STATE_ADDED\x20-\x20The\x20HW\x20component\
    \x20was\x20added\x20or\x20first\x20detected\x20(all\x20data\x20fields\
    \x20are\x20populated)\n\x20HW_STATE_REMOVED\x20-\x20The\x20HW\x20compone\
    nt\x20was\x20removed\x20or\x20not\x20detected\x20anymore\x20(If\x20there\
    \x20are\x20Primary\x20Keys\x20defined\x20send\x20them\x20only,\x20otherw\
    ise\x20populate\x20all\x20data\x20fields)\n\n\x0c\n\x05\x04\x03\x02\0\
    \x06\x12\x03o\x04\x0b\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03o\x0c\x11\n\
    \x0c\n\x05\x04\x03\x02\0\x03\x12\x03o\x14\x15\n%\n\x02\x04\x04\x12\x04u\
    \0~\x01\x1a\x19*\n\x20PeripheralHDMI\x20-\x20TODO\n\n\n\n\x03\x04\x04\
    \x01\x12\x03u\x08\x16\n\x9b\x02\n\x04\x04\x04\x02\0\x12\x03}\x04\x16\x1a\
    \x8d\x02*\n\x20HW\x20State\n\x20\n\x20HW_STATE_ADDED\x20-\x20The\x20HW\
    \x20component\x20was\x20added\x20or\x20first\x20detected\x20(all\x20data\
    \x20fields\x20are\x20populated)\n\x20HW_STATE_REMOVED\x20-\x20The\x20HW\
    \x20component\x20was\x20removed\x20or\x20not\x20detected\x20anymore\x20(\
    If\x20there\x20are\x20Primary\x20Keys\x20defined\x20send\x20them\x20only\
    ,\x20otherwise\x20populate\x20all\x20data\x20fields)\n\n\x0c\n\x05\x04\
    \x04\x02\0\x06\x12\x03}\x04\x0b\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03}\
    \x0c\x11\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03}\x14\x15\n*\n\x02\x04\x05\
    \x12\x06\x84\x01\0\x8d\x01\x01\x1a\x1c*\n\x20PeripheralSIMCard\x20-\x20T\
    ODO\n\n\x0b\n\x03\x04\x05\x01\x12\x04\x84\x01\x08\x19\n\x9c\x02\n\x04\
    \x04\x05\x02\0\x12\x04\x8c\x01\x04\x16\x1a\x8d\x02*\n\x20HW\x20State\n\
    \x20\n\x20HW_STATE_ADDED\x20-\x20The\x20HW\x20component\x20was\x20added\
    \x20or\x20first\x20detected\x20(all\x20data\x20fields\x20are\x20populate\
    d)\n\x20HW_STATE_REMOVED\x20-\x20The\x20HW\x20component\x20was\x20remove\
    d\x20or\x20not\x20detected\x20anymore\x20(If\x20there\x20are\x20Primary\
    \x20Keys\x20defined\x20send\x20them\x20only,\x20otherwise\x20populate\
    \x20all\x20data\x20fields)\n\n\r\n\x05\x04\x05\x02\0\x06\x12\x04\x8c\x01\
    \x04\x0b\n\r\n\x05\x04\x05\x02\0\x01\x12\x04\x8c\x01\x0c\x11\n\r\n\x05\
    \x04\x05\x02\0\x03\x12\x04\x8c\x01\x14\x15b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
