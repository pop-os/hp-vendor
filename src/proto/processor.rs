// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `hp/xy/sunrise_v1/hw/processor.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct Processor {
    // message fields
    pub socket: ::std::string::String,
    pub name: ::std::string::String,
    pub manufacturer: ::std::string::String,
    pub signature: ::std::string::String,
    pub processor_id: ::std::string::String,
    pub device_id: ::std::string::String,
    pub voltage: f32,
    pub max_clock_speed: ::std::string::String,
    pub cores_count: u32,
    pub cores_enabled: u32,
    pub thread_count: u32,
    pub capabilities: ::protobuf::RepeatedField<::std::string::String>,
    pub caches: ::protobuf::RepeatedField<ProcessorCache>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Processor {
    fn default() -> &'a Processor {
        <Processor as ::protobuf::Message>::default_instance()
    }
}

impl Processor {
    pub fn new() -> Processor {
        ::std::default::Default::default()
    }

    // string socket = 1;


    pub fn get_socket(&self) -> &str {
        &self.socket
    }
    pub fn clear_socket(&mut self) {
        self.socket.clear();
    }

    // Param is passed by value, moved
    pub fn set_socket(&mut self, v: ::std::string::String) {
        self.socket = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_socket(&mut self) -> &mut ::std::string::String {
        &mut self.socket
    }

    // Take field
    pub fn take_socket(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.socket, ::std::string::String::new())
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string manufacturer = 3;


    pub fn get_manufacturer(&self) -> &str {
        &self.manufacturer
    }
    pub fn clear_manufacturer(&mut self) {
        self.manufacturer.clear();
    }

    // Param is passed by value, moved
    pub fn set_manufacturer(&mut self, v: ::std::string::String) {
        self.manufacturer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_manufacturer(&mut self) -> &mut ::std::string::String {
        &mut self.manufacturer
    }

    // Take field
    pub fn take_manufacturer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.manufacturer, ::std::string::String::new())
    }

    // string signature = 4;


    pub fn get_signature(&self) -> &str {
        &self.signature
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::string::String) {
        self.signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::string::String {
        &mut self.signature
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.signature, ::std::string::String::new())
    }

    // string processor_id = 5;


    pub fn get_processor_id(&self) -> &str {
        &self.processor_id
    }
    pub fn clear_processor_id(&mut self) {
        self.processor_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_processor_id(&mut self, v: ::std::string::String) {
        self.processor_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_processor_id(&mut self) -> &mut ::std::string::String {
        &mut self.processor_id
    }

    // Take field
    pub fn take_processor_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.processor_id, ::std::string::String::new())
    }

    // string device_id = 6;


    pub fn get_device_id(&self) -> &str {
        &self.device_id
    }
    pub fn clear_device_id(&mut self) {
        self.device_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_device_id(&mut self, v: ::std::string::String) {
        self.device_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_id(&mut self) -> &mut ::std::string::String {
        &mut self.device_id
    }

    // Take field
    pub fn take_device_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.device_id, ::std::string::String::new())
    }

    // float voltage = 7;


    pub fn get_voltage(&self) -> f32 {
        self.voltage
    }
    pub fn clear_voltage(&mut self) {
        self.voltage = 0.;
    }

    // Param is passed by value, moved
    pub fn set_voltage(&mut self, v: f32) {
        self.voltage = v;
    }

    // string max_clock_speed = 8;


    pub fn get_max_clock_speed(&self) -> &str {
        &self.max_clock_speed
    }
    pub fn clear_max_clock_speed(&mut self) {
        self.max_clock_speed.clear();
    }

    // Param is passed by value, moved
    pub fn set_max_clock_speed(&mut self, v: ::std::string::String) {
        self.max_clock_speed = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_clock_speed(&mut self) -> &mut ::std::string::String {
        &mut self.max_clock_speed
    }

    // Take field
    pub fn take_max_clock_speed(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.max_clock_speed, ::std::string::String::new())
    }

    // uint32 cores_count = 9;


    pub fn get_cores_count(&self) -> u32 {
        self.cores_count
    }
    pub fn clear_cores_count(&mut self) {
        self.cores_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_cores_count(&mut self, v: u32) {
        self.cores_count = v;
    }

    // uint32 cores_enabled = 10;


    pub fn get_cores_enabled(&self) -> u32 {
        self.cores_enabled
    }
    pub fn clear_cores_enabled(&mut self) {
        self.cores_enabled = 0;
    }

    // Param is passed by value, moved
    pub fn set_cores_enabled(&mut self, v: u32) {
        self.cores_enabled = v;
    }

    // uint32 thread_count = 11;


    pub fn get_thread_count(&self) -> u32 {
        self.thread_count
    }
    pub fn clear_thread_count(&mut self) {
        self.thread_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_thread_count(&mut self, v: u32) {
        self.thread_count = v;
    }

    // repeated string capabilities = 12;


    pub fn get_capabilities(&self) -> &[::std::string::String] {
        &self.capabilities
    }
    pub fn clear_capabilities(&mut self) {
        self.capabilities.clear();
    }

    // Param is passed by value, moved
    pub fn set_capabilities(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.capabilities = v;
    }

    // Mutable pointer to the field.
    pub fn mut_capabilities(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.capabilities
    }

    // Take field
    pub fn take_capabilities(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.capabilities, ::protobuf::RepeatedField::new())
    }

    // repeated .hp.xy.sunrise_v1.hw.ProcessorCache caches = 13;


    pub fn get_caches(&self) -> &[ProcessorCache] {
        &self.caches
    }
    pub fn clear_caches(&mut self) {
        self.caches.clear();
    }

    // Param is passed by value, moved
    pub fn set_caches(&mut self, v: ::protobuf::RepeatedField<ProcessorCache>) {
        self.caches = v;
    }

    // Mutable pointer to the field.
    pub fn mut_caches(&mut self) -> &mut ::protobuf::RepeatedField<ProcessorCache> {
        &mut self.caches
    }

    // Take field
    pub fn take_caches(&mut self) -> ::protobuf::RepeatedField<ProcessorCache> {
        ::std::mem::replace(&mut self.caches, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Processor {
    fn is_initialized(&self) -> bool {
        for v in &self.caches {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.socket)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.manufacturer)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.signature)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.processor_id)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.device_id)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.voltage = tmp;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.max_clock_speed)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.cores_count = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.cores_enabled = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.thread_count = tmp;
                },
                12 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.capabilities)?;
                },
                13 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.caches)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.socket.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.socket);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.manufacturer.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.manufacturer);
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.signature);
        }
        if !self.processor_id.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.processor_id);
        }
        if !self.device_id.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.device_id);
        }
        if self.voltage != 0. {
            my_size += 5;
        }
        if !self.max_clock_speed.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.max_clock_speed);
        }
        if self.cores_count != 0 {
            my_size += ::protobuf::rt::value_size(9, self.cores_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.cores_enabled != 0 {
            my_size += ::protobuf::rt::value_size(10, self.cores_enabled, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.thread_count != 0 {
            my_size += ::protobuf::rt::value_size(11, self.thread_count, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.capabilities {
            my_size += ::protobuf::rt::string_size(12, &value);
        };
        for value in &self.caches {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.socket.is_empty() {
            os.write_string(1, &self.socket)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.manufacturer.is_empty() {
            os.write_string(3, &self.manufacturer)?;
        }
        if !self.signature.is_empty() {
            os.write_string(4, &self.signature)?;
        }
        if !self.processor_id.is_empty() {
            os.write_string(5, &self.processor_id)?;
        }
        if !self.device_id.is_empty() {
            os.write_string(6, &self.device_id)?;
        }
        if self.voltage != 0. {
            os.write_float(7, self.voltage)?;
        }
        if !self.max_clock_speed.is_empty() {
            os.write_string(8, &self.max_clock_speed)?;
        }
        if self.cores_count != 0 {
            os.write_uint32(9, self.cores_count)?;
        }
        if self.cores_enabled != 0 {
            os.write_uint32(10, self.cores_enabled)?;
        }
        if self.thread_count != 0 {
            os.write_uint32(11, self.thread_count)?;
        }
        for v in &self.capabilities {
            os.write_string(12, &v)?;
        };
        for v in &self.caches {
            os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Processor {
        Processor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "socket",
                    |m: &Processor| { &m.socket },
                    |m: &mut Processor| { &mut m.socket },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &Processor| { &m.name },
                    |m: &mut Processor| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "manufacturer",
                    |m: &Processor| { &m.manufacturer },
                    |m: &mut Processor| { &mut m.manufacturer },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "signature",
                    |m: &Processor| { &m.signature },
                    |m: &mut Processor| { &mut m.signature },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "processor_id",
                    |m: &Processor| { &m.processor_id },
                    |m: &mut Processor| { &mut m.processor_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "device_id",
                    |m: &Processor| { &m.device_id },
                    |m: &mut Processor| { &mut m.device_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "voltage",
                    |m: &Processor| { &m.voltage },
                    |m: &mut Processor| { &mut m.voltage },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "max_clock_speed",
                    |m: &Processor| { &m.max_clock_speed },
                    |m: &mut Processor| { &mut m.max_clock_speed },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "cores_count",
                    |m: &Processor| { &m.cores_count },
                    |m: &mut Processor| { &mut m.cores_count },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "cores_enabled",
                    |m: &Processor| { &m.cores_enabled },
                    |m: &mut Processor| { &mut m.cores_enabled },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "thread_count",
                    |m: &Processor| { &m.thread_count },
                    |m: &mut Processor| { &mut m.thread_count },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "capabilities",
                    |m: &Processor| { &m.capabilities },
                    |m: &mut Processor| { &mut m.capabilities },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ProcessorCache>>(
                    "caches",
                    |m: &Processor| { &m.caches },
                    |m: &mut Processor| { &mut m.caches },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Processor>(
                    "Processor",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Processor {
        static mut instance: ::protobuf::lazy::Lazy<Processor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Processor,
        };
        unsafe {
            instance.get(Processor::new)
        }
    }
}

impl ::protobuf::Clear for Processor {
    fn clear(&mut self) {
        self.socket.clear();
        self.name.clear();
        self.manufacturer.clear();
        self.signature.clear();
        self.processor_id.clear();
        self.device_id.clear();
        self.voltage = 0.;
        self.max_clock_speed.clear();
        self.cores_count = 0;
        self.cores_enabled = 0;
        self.thread_count = 0;
        self.capabilities.clear();
        self.caches.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Processor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Processor {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ProcessorCache {
    // message fields
    pub name: ::std::string::String,
    pub size: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProcessorCache {
    fn default() -> &'a ProcessorCache {
        <ProcessorCache as ::protobuf::Message>::default_instance()
    }
}

impl ProcessorCache {
    pub fn new() -> ProcessorCache {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // uint32 size = 2;


    pub fn get_size(&self) -> u32 {
        self.size
    }
    pub fn clear_size(&mut self) {
        self.size = 0;
    }

    // Param is passed by value, moved
    pub fn set_size(&mut self, v: u32) {
        self.size = v;
    }
}

impl ::protobuf::Message for ProcessorCache {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.size = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.size != 0 {
            my_size += ::protobuf::rt::value_size(2, self.size, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.size != 0 {
            os.write_uint32(2, self.size)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProcessorCache {
        ProcessorCache::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &ProcessorCache| { &m.name },
                    |m: &mut ProcessorCache| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "size",
                    |m: &ProcessorCache| { &m.size },
                    |m: &mut ProcessorCache| { &mut m.size },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ProcessorCache>(
                    "ProcessorCache",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ProcessorCache {
        static mut instance: ::protobuf::lazy::Lazy<ProcessorCache> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ProcessorCache,
        };
        unsafe {
            instance.get(ProcessorCache::new)
        }
    }
}

impl ::protobuf::Clear for ProcessorCache {
    fn clear(&mut self) {
        self.name.clear();
        self.size = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProcessorCache {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProcessorCache {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n#hp/xy/sunrise_v1/hw/processor.proto\x12\x13hp.xy.sunrise_v1.hw\"\xc5\
    \x03\n\tProcessor\x12\x16\n\x06socket\x18\x01\x20\x01(\tR\x06socket\x12\
    \x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x12\"\n\x0cmanufacturer\x18\
    \x03\x20\x01(\tR\x0cmanufacturer\x12\x1c\n\tsignature\x18\x04\x20\x01(\t\
    R\tsignature\x12!\n\x0cprocessor_id\x18\x05\x20\x01(\tR\x0bprocessorId\
    \x12\x1b\n\tdevice_id\x18\x06\x20\x01(\tR\x08deviceId\x12\x18\n\x07volta\
    ge\x18\x07\x20\x01(\x02R\x07voltage\x12&\n\x0fmax_clock_speed\x18\x08\
    \x20\x01(\tR\rmaxClockSpeed\x12\x1f\n\x0bcores_count\x18\t\x20\x01(\rR\n\
    coresCount\x12#\n\rcores_enabled\x18\n\x20\x01(\rR\x0ccoresEnabled\x12!\
    \n\x0cthread_count\x18\x0b\x20\x01(\rR\x0bthreadCount\x12\"\n\x0ccapabil\
    ities\x18\x0c\x20\x03(\tR\x0ccapabilities\x12;\n\x06caches\x18\r\x20\x03\
    (\x0b2#.hp.xy.sunrise_v1.hw.ProcessorCacheR\x06caches\"8\n\x0eProcessorC\
    ache\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x12\n\x04size\x18\
    \x02\x20\x01(\rR\x04sizeJ\xf1\x17\n\x07\x12\x05\0\0\xa6\x01\x01\n\x08\n\
    \x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x1c\n\x0b\n\x02\
    \x04\0\x12\x05\x04\0\x8d\x01\x01\n\n\n\x03\x04\0\x01\x12\x03\x04\x08\x11\
    \nb\n\x04\x04\0\x02\0\x12\x03\x0f\x04\x16\x1aU*\r\n\x20Processor\x20Sock\
    et\r\n\x20\r\n\x20Example:\x20FP6\r\n\x20\r\n\x20Source:\r\n\x20*\x20Win\
    dows:\x20TBD\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03\x0f\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0f\x0b\x11\n\x0c\
    \n\x05\x04\0\x02\0\x03\x12\x03\x0f\x14\x15\n\xd0\x01\n\x04\x04\0\x02\x01\
    \x12\x03\x1a\x04\x14\x1a\xc2\x01*\r\n\x20Processor\x20Name\x20(also\x20k\
    nown\x20as\x20version)\r\n\x20\r\n\x20Example:\x20\"AMD\x20Ryzen\x207\
    \x20PRO\x205850U\x20with\x20Radeon\x20Graphics\"\x20or\x20\"Intel(R)\x20\
    Core(TM)\x20i7-4600U\x20CPU\x20@\x202.10GHz\"\r\n\x20\r\n\x20Source:\r\n\
    \x20*\x20Windows:\x20TBD\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\
    \x02\x01\x05\x12\x03\x1a\x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x1a\
    \x0b\x0f\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x1a\x12\x13\n\x81\x01\n\
    \x04\x04\0\x02\x02\x12\x03%\x04\x1c\x1at*\r\n\x20Processor\x20Manufactur\
    er\r\n\x20\r\n\x20Example:\x20Advanced\x20Micro\x20Devices,\x20Inc.\r\n\
    \x20\r\n\x20Source:\r\n\x20*\x20Windows:\x20TBD\r\n\x20*\x20Linux:\x20TB\
    D\r\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03%\x04\n\n\x0c\n\x05\x04\0\x02\
    \x02\x01\x12\x03%\x0b\x17\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03%\x1a\x1b\
    \n\xae\x01\n\x04\x04\0\x02\x03\x12\x030\x04\x19\x1a\xa0\x01*\r\n\x20Proc\
    essor\x20Signature\r\n\x20\r\n\x20Example:\x20\"Family\x2025,\x20Model\
    \x2080,\x20Stepping\x200\"\x20or\x20\"Intel64\x20Family\x206\x20Model\
    \x2094\x20Stepping\x203\"\r\n\x20\r\n\x20Source:\r\n\x20*\x20Windows:\
    \x20TBD\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\
    \x030\x04\n\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x030\x0b\x14\n\x0c\n\x05\
    \x04\0\x02\x03\x03\x12\x030\x17\x18\n\xcb\x01\n\x04\x04\0\x02\x04\x12\
    \x03<\x04\x1c\x1a\xbd\x01*\r\n\x20Processor\x20Id\r\n\x20Processor\x20in\
    formation\x20that\x20describes\x20the\x20processor\x20features.\r\n\x20\
    \r\n\x20Example:\x20BFEBFBFF000506E3\r\n\x20\r\n\x20Source:\r\n\x20*\x20\
    Windows:\x20WMI\x20-\x20Win32_Processor\x20-\x20ProcessorId\r\n\x20*\x20\
    Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03<\x04\n\n\x0c\n\
    \x05\x04\0\x02\x04\x01\x12\x03<\x0b\x17\n\x0c\n\x05\x04\0\x02\x04\x03\
    \x12\x03<\x1a\x1b\n\xf6\x01\n\x04\x04\0\x02\x05\x12\x03H\x04\x19\x1a\xe8\
    \x01*\r\n\x20Device\x20Id\r\n\x20The\x20DeviceID\x20property\x20contains\
    \x20a\x20string\x20uniquely\x20identifying\x20the\x20processor\x20with\
    \x20other\x20devices\x20on\x20the\x20system.\r\n\x20\r\n\x20Example:\x20\
    CPU0,\x20CPU1,\x20cpu@0\r\n\x20\r\n\x20Source:\r\n\x20*\x20Windows:\x20W\
    MI\x20-\x20Win32_Processor\x20-\x20DeviceID\r\n\x20*\x20Linux:\x20TBD\r\
    \n\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03H\x04\n\n\x0c\n\x05\x04\0\x02\
    \x05\x01\x12\x03H\x0b\x14\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03H\x17\x18\
    \ne\n\x04\x04\0\x02\x06\x12\x03S\x04\x16\x1aX*\r\n\x20CPU\x20Voltage\x20\
    (in\x20V)\r\n\x20\r\n\x20Example:\x201.2V\r\n\x20\r\n\x20Source:\r\n\x20\
    *\x20Windows:\x20TBD\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\
    \x06\x05\x12\x03S\x04\t\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03S\n\x11\n\
    \x0c\n\x05\x04\0\x02\x06\x03\x12\x03S\x14\x15\nt\n\x04\x04\0\x02\x07\x12\
    \x03^\x04\x1f\x1ag*\r\n\x20CPU\x20Max\x20Clock\x20Speed\x20(in\x20MHz)\r\
    \n\x20\r\n\x20Example:\x204450\x20(Hz)\r\n\x20\r\n\x20Source:\r\n\x20*\
    \x20Windows:\x20TBD\r\n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\
    \x07\x05\x12\x03^\x04\n\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03^\x0b\x1a\n\
    \x0c\n\x05\x04\0\x02\x07\x03\x12\x03^\x1d\x1e\n\xc0\x01\n\x04\x04\0\x02\
    \x08\x12\x03j\x04\x1b\x1a\xb2\x01*\r\n\x20CPU\x20Cores\x20Count\r\n\x20N\
    umber\x20of\x20cores\x20for\x20the\x20current\x20instance\x20of\x20the\
    \x20processor.\r\n\x20\r\n\x20Example:\x2016\r\n\x20\r\n\x20Source:\r\n\
    \x20*\x20Windows:\x20WMI\x20-\x20Win32_Processor\x20-\x20NumberOfCores\r\
    \n\x20*\x20Linux:\x20TBD\r\n\n\x0c\n\x05\x04\0\x02\x08\x05\x12\x03j\x04\
    \n\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03j\x0b\x16\n\x0c\n\x05\x04\0\x02\
    \x08\x03\x12\x03j\x19\x1a\n\xbf\x01\n\x04\x04\0\x02\t\x12\x03v\x04\x1e\
    \x1a\xb1\x01*\r\n\x20CPU\x20Cores\x20Enabled\r\n\x20The\x20number\x20of\
    \x20enabled\x20cores\x20per\x20processor\x20socket.\r\n\x20\r\n\x20Examp\
    le:\x2016\r\n\x20\r\n\x20Source:\r\n\x20*\x20Windows:\x20WMI\x20-\x20Win\
    32_Processor\x20-\x20NumberOfEnabledCore\r\n\x20*\x20Linux:\x20TBD\r\n\n\
    \x0c\n\x05\x04\0\x02\t\x05\x12\x03v\x04\n\n\x0c\n\x05\x04\0\x02\t\x01\
    \x12\x03v\x0b\x18\n\x0c\n\x05\x04\0\x02\t\x03\x12\x03v\x1b\x1d\n\x95\x01\
    \n\x04\x04\0\x02\n\x12\x04\x81\x01\x04\x1d\x1a\x86\x01*\r\n\x20CPU\x20Th\
    read\x20Count\r\n\x20\r\n\x20Example:\x2016,\x2032\r\n\x20\r\n\x20Source\
    :\r\n\x20*\x20Windows:\x20WMI\x20-\x20Win32_Processor\x20-\x20NumberOfLo\
    gicalProcessors\r\n\x20*\x20Linux:\x20TBD\r\n\n\r\n\x05\x04\0\x02\n\x05\
    \x12\x04\x81\x01\x04\n\n\r\n\x05\x04\0\x02\n\x01\x12\x04\x81\x01\x0b\x17\
    \n\r\n\x05\x04\0\x02\n\x03\x12\x04\x81\x01\x1a\x1c\n\xd4\x01\n\x04\x04\0\
    \x02\x0b\x12\x04\x8a\x01\x04&\x1a\xc5\x01\r\n\x20CPU\x20Capabilities\r\n\
    \x20\r\n\x20Example:\x20(separated\x20by\x20space)\r\n\x20\x20\x20x86-64\
    \x20fpu\x20fpu_exception\x20wp\x20vme\x20de\x20pse\x20tsc\x20msr\x20pae\
    \x20mce\x20cx8\x20apic\x20...\r\n\x20\x20\x20ept\x20vpid\x20ept_ad\x20fs\
    gsbase\x20tsc_adjust\x20bmi1\x20avx2\x20smep\x20bmi2\x20erms\x20...\r\n\
    \n\r\n\x05\x04\0\x02\x0b\x04\x12\x04\x8a\x01\x04\x0c\n\r\n\x05\x04\0\x02\
    \x0b\x05\x12\x04\x8a\x01\r\x13\n\r\n\x05\x04\0\x02\x0b\x01\x12\x04\x8a\
    \x01\x14\x20\n\r\n\x05\x04\0\x02\x0b\x03\x12\x04\x8a\x01#%\n\x0c\n\x04\
    \x04\0\x02\x0c\x12\x04\x8c\x01\x04(\n\r\n\x05\x04\0\x02\x0c\x04\x12\x04\
    \x8c\x01\x04\x0c\n\r\n\x05\x04\0\x02\x0c\x06\x12\x04\x8c\x01\r\x1b\n\r\n\
    \x05\x04\0\x02\x0c\x01\x12\x04\x8c\x01\x1c\"\n\r\n\x05\x04\0\x02\x0c\x03\
    \x12\x04\x8c\x01%'\n\x0c\n\x02\x04\x01\x12\x06\x8f\x01\0\xa6\x01\x01\n\
    \x0b\n\x03\x04\x01\x01\x12\x04\x8f\x01\x08\x16\nq\n\x04\x04\x01\x02\0\
    \x12\x04\x9a\x01\x04\x14\x1ac*\r\n\x20Cache\x20Name\r\n\r\n\x20Example:\
    \x20L1,\x20L2\r\n\x20\r\n\x20Source:\r\n\x20*\x20Windows:\x20WMI\x20-\
    \x20Win32_Processor\r\n\x20*\x20Linux:\x20TBD\r\n\n\r\n\x05\x04\x01\x02\
    \0\x05\x12\x04\x9a\x01\x04\n\n\r\n\x05\x04\x01\x02\0\x01\x12\x04\x9a\x01\
    \x0b\x0f\n\r\n\x05\x04\x01\x02\0\x03\x12\x04\x9a\x01\x12\x13\nv\n\x04\
    \x04\x01\x02\x01\x12\x04\xa5\x01\x04\x14\x1ah*\r\n\x20Cache\x20Size\x20(\
    in\x20KiB)\r\n\r\n\x20Example:\x2032\r\n\x20\r\n\x20Source:\r\n\x20*\x20\
    Windows:\x20WMI\x20-\x20Win32_Processor\r\n\x20*\x20Linux:\x20TBD\r\n\n\
    \r\n\x05\x04\x01\x02\x01\x05\x12\x04\xa5\x01\x04\n\n\r\n\x05\x04\x01\x02\
    \x01\x01\x12\x04\xa5\x01\x0b\x0f\n\r\n\x05\x04\x01\x02\x01\x03\x12\x04\
    \xa5\x01\x12\x13b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
